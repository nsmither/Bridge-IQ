expression pcs_employees =
		let
		    Source = Sql.Databases("blsql"),
		    ExpData_A = Source{[Name="ExpData_A"]}[Data],
		    dbo_tblEntities = ExpData_A{[Schema="dbo",Item="tblEntities"]}[Data],
		    #"Removed Other Columns" = Table.SelectColumns(dbo_tblEntities,{"EntCode", "IDNo"})
		in
		    #"Removed Other Columns"
	lineageTag: 39e8c686-36a5-4395-8f7d-7ba2923fe445
	queryGroup: 'Historic Tables'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression pcs_dispatchers =
		let
		    Source = Sql.Databases("blsql"),
		    ExpData_A = Source{[Name="ExpData_A"]}[Data],
		    dbo_tblUserList = ExpData_A{[Schema="dbo",Item="tblUserList"]}[Data],
		    #"Removed Columns" = Table.RemoveColumns(dbo_tblUserList,{"UserPassword", "OffCode", "DefOff", "CatCode", "MsgInterval", "PollerYN", "NotifyCode", "LiveUpdateYN", "Registration", "AlertsA", "AlertsD", "AlertsM", "QCUserName", "QCPassword", "QCSubscriberID", "QCPollInterval", "ShowWelcomeYN", "DefChkPrt", "DefInvPrt", "DefBOLPrt", "SignPath", "DefDocPrt", "AgentYN", "AlertsCC", "MsgIntervalLoads", "MsgIntervalEntries", "RemoteYN", "BackgroundImg", "AutoRefreshScreensYN", "AutoRefreshReportsYN", "ReportStartRange", "ReportAllowInactivesYN", "DirectPhone", "DivCode", "DefDiv", "TeamName", "DefBOLStyle", "EmailServer", "EmailPassword", "EmailServerSSL", "EmailServerPort", "UseCompDefMailYN", "p2", "p3", "p4", "PWUpdate", "PWFailedAttempts", "TempPWIssued", "ITSIntegrationID", "DAT_UserName", "DAT_PW", "DAT_TokenPrimary", "DAT_TokenSecondary", "DAT_LastCall", "DisplayLargeFonts", "RestrictAdminYN", "DeptMgrYN", "SalespersonYN", "FBTokenID", "PowBI_OpYN", "PowBI_DispYN", "PowBI_FinYN", "CameraYN", "Cam_AccelYN", "Cam_TurnsYN", "Cam_ShockYN", "Cam_PanicYN", "Cam_BreaksYN"}),
		    #"Sorted Rows" = Table.Sort(#"Removed Columns",{{"EmpIDNo", Order.Ascending}}),
		    #"Merged Queries" = Table.NestedJoin(#"Sorted Rows", {"EmpIDNo"}, pcs_employees, {"IDNo"}, "PCS Employes", JoinKind.LeftOuter),
		    #"Expanded PCS Employes" = Table.ExpandTableColumn(#"Merged Queries", "PCS Employes", {"EntCode"}, {"EntCode"}),
		    #"Filtered Rows" = Table.SelectRows(#"Expanded PCS Employes", each ([EntCode] <> null)),
		    #"Changed Type" = Table.TransformColumnTypes(#"Filtered Rows",{{"EmpIDNo", type text}})
		in
		    #"Changed Type"
	lineageTag: 7263a1e3-ed95-495e-bb1f-ed2f6d3cddf4
	queryGroup: 'Historic Tables'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression pcs_orders_dispatchers =
		let
		    Source = Sql.Databases("blsql"),
		    ExpData_A = Source{[Name="ExpData_A"]}[Data],
		    dbo_tblLoads = ExpData_A{[Schema="dbo",Item="tblLoads"]}[Data],
		    #"Filtered Rows" = Table.SelectRows(dbo_tblLoads, each ([Status] = "Arrived")),
		    #"Removed Other Columns" = Table.SelectColumns(#"Filtered Rows",{"LoadID", "DispUser"}),
		    #"Added Prefix" = Table.TransformColumns(#"Removed Other Columns", {{"LoadID", each "PCS" & Text.From(_, "en-US"), type text}})
		in
		    #"Added Prefix"
	lineageTag: eec84fe6-96ff-40d2-a66a-32cf38eb315b
	queryGroup: 'Historic Tables'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression stop_historic =
		let
		    Source = Sql.Database("bl-appdb", "lme"),
		    dbo_stop = Source{[Schema="dbo",Item="stop"]}[Data],
		    #"Filtered Stops Pre RefreshCutOffDate" = Table.SelectRows(dbo_stop, each [sched_arrive_early] < RefreshCutOffDate),
		    #"Removed Columns" = Table.RemoveColumns(#"Filtered Stops Pre RefreshCutOffDate",{"company_id", "address2", "appointment_status_id", "appt_contact_name", "hub", "cases", "confirmed", "contact_name", "dist_from_prev", "dist_from_prev_um", "driver_load_unload", "edi_code", "edi_loc_code", "eta", "eta_distance", "eta_late", "eta_oor", "google_place_id", "inbound_status", "late_eta_colorcode", "late_route_status", "manifest_fgp_uid", "manifest_reg_uid", "move_dist_from_preassign", "move_dist_from_preassign_um", "move_dist_from_previous", "move_dist_from_previous_um", "operational_status", "orig_sched_early", "orig_sched_late", "pallets_dropped", "pallets_picked_up", "phone", "planned_arrival_time", "ponum", "prior_uncleared_stops", "projected_arrival", "rate_dist_from_previous", "rate_dist_from_previous_um", "refno", "requested_service", "seal", "service_date", "showas_address", "showas_address2", "showas_city_id", "showas_city_name", "showas_location_id", "showas_location_name", "showas_state", "showas_zip_code", "signed_for_name", "txl_uid", "volume", "volume_um", "weight", "weight_um", "ic_stop_id", "grouped_id", "payment_code_reviewed", "trimble_place_id"}),
		    #"Inserted actual_arrival_time" = Table.AddColumn(#"Removed Columns", "actual_arrival_time", each DateTime.Time([actual_arrival]), type time),
		    #"Inserted actual_departure_time" = Table.AddColumn(#"Inserted actual_arrival_time", "actual_departure_time", each DateTime.Time([actual_departure]), type time),
		    #"Inserted sched_arrive_early_time" = Table.AddColumn(#"Inserted actual_departure_time", "sched_arrive_early_time", each DateTime.Time([sched_arrive_early]), type time),
		    #"Inserted sched_arrive_late_time" = Table.AddColumn(#"Inserted sched_arrive_early_time", "sched_arrive_late_time", each DateTime.Time([sched_arrive_late]), type time),
		    #"Changed Type" = Table.TransformColumnTypes(#"Inserted sched_arrive_late_time",{{"actual_arrival", type date}, {"actual_departure", type date}, {"sched_arrive_early", type date}, {"sched_arrive_late", type date}})
		in
		    #"Changed Type"
	lineageTag: b3dd5e3a-6047-4487-aedf-02870170447d
	queryGroup: 'Historic Tables'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression pcs_orders =
		let
		    Source = Sql.Databases("blsql"),
		    ExpData_A = Source{[Name="ExpData_A"]}[Data],
		    dbo_tblLoads = ExpData_A{[Schema="dbo",Item="tblLoads"]}[Data],
		    #"Filtered Rows" = Table.SelectRows(dbo_tblLoads, each ([Status] = "Arrived")),
		    #"Removed Columns" = Table.RemoveColumns(#"Filtered Rows",{"TotalSeats", "TotalTariff", "TotalAsWeight", "TotalSpace", "SealNo", "RateType", "RatingUnits", "RateDiscount", "DiscountAmt", "TotalAcc", "TotalCom", "Rate", "txtNotes", "SelectYN", "TripID", "MasterLoad", "TailgateYN", "UserName", "InvSelect", "InvUser", "InvoiceID", "InvoiceDate", "LoadClass", "OfficeCode", "IO", "Container", "Chassis", "Notify", "NotifyTime", "LFD", "RRP", "LE", "JobID", "ChassisPU", "ChassisDel", "BookingNo", "VesselName", "ShipperID", "ShipAddress", "ShipPhone", "ShipContact", "ShipRef", "ShipZone", "ConsigneeID", "ConsAddress", "ConsPhone", "ConsContact", "ConsRef", "ConsZone", "DropDate", "DropID", "DropName", "DropAddress", "DropCity", "DropSt", "DropZip", "XStopsYN", "RateMatrix", "RateMatrixAcc", "CarrierName", "UnitNumber", "TruckNumber", "TrailerNumber1", "TrailerNumber2", "ReqTemp", "Pallets", "PalletsPU", "PalletsPUDam", "PalletsPUVar", "PalletsDel", "PalletsDelDam", "PalletsDelVar", "PalletExchange", "HazardousYN", "FundsType", "DZone", "BillToName", "BillToRef", "LastTraceDate", "LastTracePos", "ETA", "FrtConYN", "VarianceYN", "SaveQuoteYN", "ReleaseNumber", "LdClearedYN", "EDI1", "EDI2", "EDI3", "EDI4", "EDI5", "AvailPU", "AvailDel", "ComValue", "BrokerageNotes", "PreBillYN", "MinRateYN", "LegTrackingYN", "WebPosted", "CarrierRate", "WebActiveLoad", "TotalComF", "TotalAccF", "TotalRevenueF", "DiscountAmtF", "RateF", "SatStatus", "ChargeVAT", "SteamshipLine", "PortOfDischarge", "ContainerTerm", "RejectYN", "RejectDate", "EquipmentX", "LFDX", "RateSource", "RateMatrixCom", "MileageSys", "MileageMeth", "DropRetDate", "DropRetTime", "CarrierComment", "SignedForBy", "ClosedBorderYN", "RBSentDT", "RBSentBy", "RBSentTo", "QuoteExpires", "SOID", "AgentBatchID", "EDIRefs", "DispSelect", "StartTrace", "EndTrace", "CarrierRateAcc", "CarrierRateAccName", "QRIDNo", "PendingYN", "ResponseType", "ResponseDT", "ResponseUser", "QRDocYN", "QREmail", "QRPhone", "QRContact", "QuoteID", "DelOptions", "TeamName", "ContainerTermLoc", "ChassisPULoc", "ChassisDelLoc", "IntOrigName", "IntOrigAddress", "IntOrigCity", "IntOrigSt", "IntOrigZip", "IntOrigZone", "IntOrigPhone", "IntOrigContact", "IntOrigRef", "IntDestName", "IntDestAddress", "IntDestCity", "IntDestSt", "IntDestZip", "IntDestZone", "IntDestPhone", "IntDestContact", "IntDestRef", "MacroPointOrderID", "DAT_AssetID", "WebPostedBy", "DropTrailerID1", "DropTrailerID2", "CarrierRev", "SatStatusDT", "CarrierPayType", "CarrierPayRate", "CarrierPayYN", "LastSendX6", "InvHoldYN", "SteamshipCode", "NextResID", "PreloadTrailerID1", "PreloadTrailerID2", "XTRemoveYN", "ContOwnerID", "ChasOwnerID", "RateWareYN", "LastX6Sent", "ContainerST", "ChassisST", "LastFTUpdate", "DistDateQ", "TimeRem", "LastSendFourKites", "TTYN", "Status", "LoadType", "DispUser", "DriverName"}),
		    #"Added Prefix" = Table.TransformColumns(#"Removed Columns", {{"LoadID", each "PCS" & Text.From(_, "en-US"), type text}}),
		    #"Renamed Columns" = Table.RenameColumns(#"Added Prefix",{{"LoadID", "id"}, {"DateReceived", "order_entered_date"}, {"PickupDate", "shipper_sched_early_date"}, {"PickupTime", "shipper_sched_early_time"}, {"PUWindow", "shipper_sched_late_time"}, {"DeliveryDate", "consignee_sched_early_date"}, {"DeliveryTime", "consignee_sched_early_time"}, {"DelWindow", "consignee_sched_late_time"}, {"MilesBilled", "bill_distance"}, {"TotalPieces", "pieces"}, {"TotalWeight", "weight"}, {"TotalRevenue", "freight_charge"}, {"Equipment", "equipment_type_id"}, {"ShipName", "shipper_location_name"}, {"ShipCity", "shipper_city_name"}, {"ShipSt", "shipper_state"}, {"ShipZip", "shipper_zip_code"}, {"ConsName", "consignee_location_name"}, {"ConsCity", "consignee_city_name"}, {"ConsSt", "consignee_state"}, {"ConsZip", "consignee_zip_code"}, {"Salesperson", "salesperson_id"}, {"Commodity", "commodity"}}),
		    #"Changed Type" = Table.TransformColumnTypes(#"Renamed Columns",{{"order_entered_date", type date}, {"shipper_sched_early_date", type date}, {"shipper_sched_early_time", type time}, {"shipper_sched_late_time", type time}, {"consignee_sched_early_date", type date}, {"consignee_sched_early_time", type time}, {"consignee_sched_late_time", type time}, {"freight_charge", Currency.Type}, {"salesperson_id", type text}}),
		    #"Merged Queries" = Table.NestedJoin(#"Changed Type", {"salesperson_id"}, pcs_dispatchers, {"EmpIDNo"}, "tblUserList", JoinKind.LeftOuter),
		    #"Expanded tblUserList" = Table.ExpandTableColumn(#"Merged Queries", "tblUserList", {"eMailAdd"}, {"tblUserList.eMailAdd"}),
		    #"Removed Columns1" = Table.RemoveColumns(#"Expanded tblUserList",{"salesperson_id"}),
		    #"Renamed Columns1" = Table.RenameColumns(#"Removed Columns1",{{"tblUserList.eMailAdd", "salesperson_id"}}),
		    #"Replaced Value" = Table.ReplaceValue(#"Renamed Columns1","tcampbell@bridgelogisticsinc.com","CAMPFAO1",Replacer.ReplaceText,{"salesperson_id"}),
		    #"Replaced Value1" = Table.ReplaceValue(#"Replaced Value","BSOLORIA@BRIDGELOGISTICSINC.COM","SOLOCLOH",Replacer.ReplaceText,{"salesperson_id"}),
		    #"Replaced Value2" = Table.ReplaceValue(#"Replaced Value1","jmarot@bridgelogisticsinc.com","MAROHAOH",Replacer.ReplaceText,{"salesperson_id"}),
		    #"Merged Queries1" = Table.NestedJoin(#"Replaced Value2", {"BillToID"}, pcs_customers, {"IDNo"}, "pcs_customers", JoinKind.LeftOuter),
		    #"Expanded pcs_customers" = Table.ExpandTableColumn(#"Merged Queries1", "pcs_customers", {"EntCode"}, {"pcs_customers.EntCode"}),
		    #"Trimmed Text" = Table.TransformColumns(#"Expanded pcs_customers",{{"pcs_customers.EntCode", Text.Trim, type text}}),
		    //start merging entity codes for matching
		    #"Replaced Value3" = Table.ReplaceValue(#"Trimmed Text","V5978","V6064",Replacer.ReplaceText,{"pcs_customers.EntCode"}),
		    #"Replaced Value4" = Table.ReplaceValue(#"Replaced Value3","V37123","V18661",Replacer.ReplaceText,{"pcs_customers.EntCode"}),
		    #"Replaced Value5" = Table.ReplaceValue(#"Replaced Value4","V26458","V18025",Replacer.ReplaceText,{"pcs_customers.EntCode"}),
		    #"Replaced Value6" = Table.ReplaceValue(#"Replaced Value5","V24526","V38482",Replacer.ReplaceText,{"pcs_customers.EntCode"}),
		    #"Replaced Value7" = Table.ReplaceValue(#"Replaced Value6","V24303","V20643",Replacer.ReplaceText,{"pcs_customers.EntCode"}),
		    #"Replaced Value8" = Table.ReplaceValue(#"Replaced Value7","V18231","V20643",Replacer.ReplaceText,{"pcs_customers.EntCode"}),
		    #"Replaced Value10" = Table.ReplaceValue(#"Replaced Value8","V12320","V6978",Replacer.ReplaceText,{"pcs_customers.EntCode"}),
		    #"Replaced Value12" = Table.ReplaceValue(#"Replaced Value10","V10210","V10208",Replacer.ReplaceText,{"pcs_customers.EntCode"}),
		    #"Replaced Value11" = Table.ReplaceValue(#"Replaced Value12","v11634","V7430",Replacer.ReplaceText,{"pcs_customers.EntCode"}),
		    #"Merged Queries2" = Table.NestedJoin(#"Replaced Value11", {"pcs_customers.EntCode"}, custmers_pcs_sync, {"prev_code"}, "customer", JoinKind.LeftOuter),
		    #"Replaced Value9" = Table.ReplaceValue(#"Merged Queries2","V17061","V11634",Replacer.ReplaceText,{"pcs_customers.EntCode"}),
		    #"Expanded customer" = Table.ExpandTableColumn(#"Replaced Value9", "customer", {"id"}, {"customer.id"}),
		    #"Renamed Columns2" = Table.RenameColumns(#"Expanded customer",{{"customer.id", "customer.id_old"}}),
		    #"Added Conditional Column" = Table.AddColumn(#"Renamed Columns2", "customer_id", each if [pcs_customers.EntCode] = "V11634" then "PARIDUIA" else [customer.id_old]),
		    #"Removed Columns2" = Table.RemoveColumns(#"Added Conditional Column",{"customer.id_old", "BillToID", "pcs_customers.EntCode"}),
		    #"Added Custom" = Table.AddColumn(#"Removed Columns2", "status", each "D"),
		    #"Inserted First Characters" = Table.AddColumn(#"Added Custom", "consignee_3_digit_zip_code", each Text.Start([consignee_zip_code], 3), type text),
		    #"Inserted First Characters1" = Table.AddColumn(#"Inserted First Characters", "shipper_3_digit_zip_code", each Text.Start([shipper_zip_code], 3), type text),
		    //Start Add Lane
		    #"Trimmed Text1" = Table.TransformColumns(#"Inserted First Characters1",{{"shipper_city_name", Text.Trim, type text}, {"shipper_state", Text.Trim, type text}, {"consignee_city_name", Text.Trim, type text}, {"consignee_state", Text.Trim, type text}}),
		    #"Duplicated Column" = Table.DuplicateColumn(#"Trimmed Text1", "shipper_city_name", "shipper_city_name - Copy"),
		    #"Duplicated Column1" = Table.DuplicateColumn(#"Duplicated Column", "shipper_state", "shipper_state - Copy"),
		    #"Duplicated Column2" = Table.DuplicateColumn(#"Duplicated Column1", "consignee_city_name", "consignee_city_name - Copy"),
		    #"Duplicated Column3" = Table.DuplicateColumn(#"Duplicated Column2", "consignee_state", "consignee_state - Copy"),
		    #"Merged Columns" = Table.CombineColumns(#"Duplicated Column3",{"shipper_city_name - Copy", "shipper_state - Copy"},Combiner.CombineTextByDelimiter(", ", QuoteStyle.None),"Shipper"),
		    #"Merged Columns1" = Table.CombineColumns(#"Merged Columns",{"consignee_city_name - Copy", "consignee_state - Copy"},Combiner.CombineTextByDelimiter(", ", QuoteStyle.None),"Consignee"),
		    //End Add Lane
		    #"Merged Columns2" = Table.CombineColumns(#"Merged Columns1",{"Shipper", "Consignee"},Combiner.CombineTextByDelimiter(" - ", QuoteStyle.None),"lane")
		in
		    #"Merged Columns2"
	lineageTag: 4f815021-5764-4bb3-8b46-a88a5802f2ae
	queryGroup: 'Historic Tables'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression mcleod_historic_orders =
		let
		    Source = Sql.Databases("bl-appdb"),
		    lme = Source{[Name="lme"]}[Data],
		    dbo_orders = lme{[Schema="dbo",Item="orders"]}[Data],
		    #"Filtered Orders Pre RefreshCutOFfDate" = Table.SelectRows(dbo_orders, each [ordered_date] < RefreshCutOffDate),
		    //Start General Data Transformation
		    #"Removed Columns" = Table.RemoveColumns(#"Filtered Orders Pre RefreshCutOFfDate",{"company_id", "actual_reefer_profile", "agency_id", "agent_payee_id", "allow_relay", "autorate_status", "booking_no", "booking_number", "brk_qual_profile", "broker_location_id", "brokerage_workflow_id", "cbp_crossing_date", "cbp_crossing_location_id", "cbp_crossing_reason", "cbsa_crossing_date", "cbsa_crossing_location_id", "cbsa_crossing_reason", "cc_fuel_revenue", "cc_fuel_revenue_c", "cc_fuel_revenue_d", "cc_fuel_revenue_n", "cc_fuel_revenue_r", "cc_net_revenue", "cc_net_revenue_c", "cc_net_revenue_d", "cc_net_revenue_n", "cc_net_revenue_r", "cc_pro_nbr", "cobroker_location_id", "collection_method", "com_setpnt_temp", "com_setpnt_temp_um", "commitment_id", "container", "container_planned", "container_type_id", "controlling_carrier_code", "copy_from_company", "copy_from_order_id", "copy_to_company", "copy_to_order_id", "ctrl_party_id", "cube", "curr_movement_id", "cust_order_no", "declared_val", "def_move_type", "default_match_id", "dim_height", "dim_length", "dim_surcharge", "dim_surcharge_c", "dim_surcharge_d", "dim_surcharge_n", "dim_surcharge_r", "dim_width", "dispatch_opt", "dl_team_reqd", "dray_del_date", "dray_del_pay", "dray_del_pay_c", "dray_del_pay_d", "dray_del_pay_n", "dray_del_pay_r", "dray_del_payee", "dray_del_xfer_dt", "dray_pu_date", "dray_pu_pay", "dray_pu_pay_c", "dray_pu_pay_d", "dray_pu_pay_n", "dray_pu_pay_r", "dray_pu_payee", "dray_pu_xfer_dt", "eir1_no", "eir2_no", "est_tolls", "est_tolls_c", "est_tolls_d", "est_tolls_n", "est_tolls_r", "excise_disable_update", "excise_taxable", "excisetax_total", "excisetax_total_c", "excisetax_total_d", "excisetax_total_n", "excisetax_total_r", "force_assign", "forwd_location_id", "free_days", "freight_charge_c", "freight_charge_d", "freight_charge_r", "high_value", "hold_reason", "image_is_present", "import_export", "include_split_point", "intelliset", "invoice_recv_date", "is_autorate_dist", "is_container", "is_dedicated", "is_local_mile", "is_requested", "jag_carrier_id", "jag_cost_rate_id", "ldport_location_id", "linear_feet_avail", "loadboard", "ltl", "markup_flat", "markup_flat_c", "markup_flat_d", "markup_flat_n", "markup_flat_r", "markup_percent", "master_order_id", "master_sequence", "next_rebill", "nte_lp_num", "nte_lp_qual", "operational_status", "optiset", "optimize", "order_mode", "order_value_c", "order_value_d", "order_value_n", "order_value_r", "orig_dest_rate_id", "otherchargetotal_c", "otherchargetotal_d", "otherchargetotal_n", "otherchargetotal_r", "pallets_required", "pay_gross_d", "pay_gross_n", "pay_gross_r", "planning_comment", "pnn_callback", "pnn_comment", "pnn_comment2", "pnn_post_type", "pnn_rate", "pay_gross", "pay_gross_c", "pick_up_no", "pnn_rate_type", "pnn_trailer_length", "pnn_trailer_width", "ponum", "port", "port_of_discharge", "preload_trailer_id", "preloaded", "rate_currency_type", "rate_id", "rate_min_weight", "rate_min_weight_um", "rate_unit_desc", "recurring_order_id", "reply_transmitted", "requesting_company", "return_temp", "return_temp_um", "return_temp_var", "return_temp_var_um", "revenue_share_method", "sail_date", "seal_number", "seg_alloc_code", "setpoint_temp", "setpoint_temp_um", "setpoint_var", "setpoint_var_um", "ship_status_to_edi", "shipment_id", "shipstatus2edi_dt", "ss_location_id", "subject_order_status", "subject_order_void_date", "swap", "teams_required", "temperature_max_um", "temperature_min_um", "total_charge_c", "total_charge_d", "total_charge_n", "total_charge_r", "totalcharge_and_excisetax_c", "totalcharge_and_excisetax_d", "totalcharge_and_excisetax_n", "totalcharge_and_excisetax_r", "tractor_type", "vessel", "vessel_cutoff_date", "bill_distance_um", "billing_empty_distance", "billing_empty_distance_um", "billing_loaded_distance", "billing_loaded_distance_um", "bol_note", "bol_recv_date", "external_invoiceno", "freight_charge_n", "load_date", "ordered_by", "ordered_method", "placard_required", "rate", "rate_type", "rate_units", "ready_to_bill", "totalcharge_and_excisetax", "weight_um", "xferred2billing", "xferred2billing_dt", "lock_miles", "is_auto_tonu", "floor_loaded_freight", "equipment_type_options", "ic_movement_from", "ic_company_from", "is_intercompany", "rate_source", "ic_order_from", "ordered_by_id", "pnn_loadboard_user_id", "voided_load_transmitted_dt", "voided_load_transmitted", "total_charge"}),
		    #"Renamed Columns" = Table.RenameColumns(#"Removed Columns",{{"blnum", "customer_po"}, {"consignee_refno", "bol"}, {"ordered_date", "order_entered_date"}, {"otherchargetotal", "other_charges_total"}, {"salesperson", "salesperson_id"}}),
		    #"Inserted order_entered_time" = Table.AddColumn(#"Renamed Columns", "order_entered_time", each DateTime.Time([order_entered_date]), type time),
		    //End General Data Transformation
		    #"Changed Type" = Table.TransformColumnTypes(#"Inserted order_entered_time",{{"bill_date", type date}, {"freight_charge", Currency.Type}, {"order_entered_date", type date}, {"other_charges_total", Currency.Type}}),
		    #"Filtered Rows" = Table.SelectRows(#"Changed Type", each ([status] = "D" or [status] = "P")),
		    //Start add shipper and consignee data
		    #"Merged stop table shipper" = Table.NestedJoin(#"Filtered Rows", {"shipper_stop_id"}, stop, {"id"}, "stop", JoinKind.LeftOuter),
		    #"Expanded stop" = Table.ExpandTableColumn(#"Merged stop table shipper", "stop", {"city_name", "location_name", "sched_arrive_early", "sched_arrive_late", "state", "zip_code", "sched_arrive_early_time", "sched_arrive_late_time"}, {"stop.city_name", "stop.location_name", "stop.sched_arrive_early", "stop.sched_arrive_late", "stop.state", "stop.zip_code", "stop.sched_arrive_early_time", "stop.sched_arrive_late_time"}),
		    #"Renamed shipper data" = Table.RenameColumns(#"Expanded stop",{{"stop.city_name", "shipper_city_name"}, {"stop.location_name", "shipper_location_name"}, {"stop.sched_arrive_early", "shipper_sched_early_date"}, {"stop.sched_arrive_late", "shipper_sched_late_date"}, {"stop.state", "shipper_state"}, {"stop.zip_code", "shipper_zip_code"}, {"stop.sched_arrive_early_time", "shipper_sched_early_time"}, {"stop.sched_arrive_late_time", "shipper_sched_late_time"}}),
		    #"Merged stop table consignee" = Table.NestedJoin(#"Renamed shipper data", {"consignee_stop_id"}, stop, {"id"}, "stop", JoinKind.LeftOuter),
		    #"Expanded stop1" = Table.ExpandTableColumn(#"Merged stop table consignee", "stop", {"city_id", "city_name", "location_name", "sched_arrive_early", "sched_arrive_late", "state", "zip_code", "sched_arrive_early_time", "sched_arrive_late_time"}, {"stop.city_id", "stop.city_name", "stop.location_name", "stop.sched_arrive_early", "stop.sched_arrive_late", "stop.state", "stop.zip_code", "stop.sched_arrive_early_time", "stop.sched_arrive_late_time"}),
		    //End add shipper and consignee data
		    #"Renamed consignee data" = Table.RenameColumns(#"Expanded stop1",{{"stop.city_id", "consignee_city_id"}, {"stop.city_name", "consignee_city_name"}, {"stop.location_name", "consignee_location_name"}, {"stop.sched_arrive_early", "consignee_sched_early_date"}, {"stop.sched_arrive_late", "consignee_sched_late_date"}, {"stop.state", "consignee_state"}, {"stop.zip_code", "consignee_zip_code"}, {"stop.sched_arrive_early_time", "consignee_sched_early_time"}, {"stop.sched_arrive_late_time", "consignee_sched_late_time"}}),
		    #"Inserted First Characters" = Table.AddColumn(#"Renamed consignee data", "shipper_3_digit_zip_code", each Text.Start([shipper_zip_code], 3), type text),
		    #"Inserted First Characters1" = Table.AddColumn(#"Inserted First Characters", "consignee_3_digit_zip_code", each Text.Start([consignee_zip_code], 3), type text),
		    //Start Add Lane
		    #"Trimmed Text" = Table.TransformColumns(#"Inserted First Characters1",{{"shipper_city_name", Text.Trim, type text}, {"shipper_state", Text.Trim, type text}, {"consignee_city_name", Text.Trim, type text}, {"consignee_state", Text.Trim, type text}}),
		    #"Duplicated Column" = Table.DuplicateColumn(#"Trimmed Text", "shipper_city_name", "shipper_city_name - Copy"),
		    #"Duplicated Column1" = Table.DuplicateColumn(#"Duplicated Column", "shipper_state", "shipper_state - Copy"),
		    #"Duplicated Column2" = Table.DuplicateColumn(#"Duplicated Column1", "consignee_city_name", "consignee_city_name - Copy"),
		    #"Duplicated Column3" = Table.DuplicateColumn(#"Duplicated Column2", "consignee_state", "consignee_state - Copy"),
		    #"Merged Columns" = Table.CombineColumns(#"Duplicated Column3",{"shipper_city_name - Copy", "shipper_state - Copy"},Combiner.CombineTextByDelimiter(", ", QuoteStyle.None),"Shipper"),
		    #"Merged Columns1" = Table.CombineColumns(#"Merged Columns",{"consignee_city_name - Copy", "consignee_state - Copy"},Combiner.CombineTextByDelimiter(", ", QuoteStyle.None),"Consignee"),
		    //End Add Lane
		    #"Merged Columns2" = Table.CombineColumns(#"Merged Columns1",{"Shipper", "Consignee"},Combiner.CombineTextByDelimiter(" - ", QuoteStyle.None),"lane")
		in
		    #"Merged Columns2"
	lineageTag: ecc7d6f2-89e7-440c-8625-c2621e2e918e
	queryGroup: 'Historic Tables'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression RefreshCutOffDate = #datetime(2024, 9, 1, 0, 0, 0) meta [IsParameterQuery=true, Type="DateTime", IsParameterQueryRequired=true]
	lineageTag: af39c097-cda3-4307-8194-af7487559d9a
	queryGroup: Parameters

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = DateTime

expression MovementCutOffNumber = 147110 meta [IsParameterQuery=true, Type="Number", IsParameterQueryRequired=true]
	lineageTag: 7b1d95af-7d84-440e-87b8-e089fa08fe15
	queryGroup: Parameters

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Number

expression pcs_customers =
		let
		    Source = Sql.Databases("blsql"),
		    ExpData_A = Source{[Name="ExpData_A"]}[Data],
		    dbo_tblEntities = ExpData_A{[Schema="dbo",Item="tblEntities"]}[Data],
		    #"Filtered Rows" = Table.SelectRows(dbo_tblEntities, each ([EntType] = "Customer"))
		in
		    #"Filtered Rows"
	lineageTag: 6fb223ea-a1b1-4fd2-80a5-bd2e6b261197
	queryGroup: 'Historic Tables'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression custmers_pcs_sync =
		let
		    Source = customer,
		    #"Filtered Rows" = Table.SelectRows(Source, each ([prev_code] <> null)),
		    #"Trimmed Text" = Table.TransformColumns(#"Filtered Rows",{{"prev_code", Text.Trim, type text}})
		in
		    #"Trimmed Text"
	lineageTag: a4b6f7c8-ff94-4b99-86ff-1f06b522aaae
	queryGroup: 'Historic Tables'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression pcs_movements =
		let
		    Source = Sql.Databases("blsql"),
		    ExpData_A = Source{[Name="ExpData_A"]}[Data],
		    dbo_tblLoadDispatch = ExpData_A{[Schema="dbo",Item="tblLoadDispatch"]}[Data],
		    #"Removed Columns" = Table.RemoveColumns(dbo_tblLoadDispatch,{"TripID", "UnitID", "UnitNumber", "DriverID", "CoDriverID", "CoDriverName", "TruckID", "TruckNumber", "TrailerID1", "TrailerNumber1", "TrailerID2", "TrailerNumber2", "CarrierID", "CarrierName", "PayCode", "PayType", "TotalPay", "EMI", "EMO", "EmptyRate", "RevShare", "PUCus", "PUZone", "DropDate", "DropCus", "DropName", "DropAddress", "DropCity", "DropState", "DropZip", "DropZone", "DropTimeIn", "DropTimeOut", "DelCus", "DelZone", "AccTimeIn", "AccTimeOut", "CoDriverPay", "BackupDate", "BackupRecYN", "BatchID", "SelectedYN", "txtNotes", "EntCode", "PayMatrix", "InputUser", "InputDate", "InputTime", "Activity_ctr_Cont", "Activity_ctr_Chassis", "LoadClass", "PayUnits", "CarrierRef", "CarrierContact", "LastAction", "ChassisNo", "AccSplitID", "ContainerNo", "LoadAccID", "PUAddress", "DelAddress", "PaySource", "MainDispID", "DropRetDate", "DropRetTime", "AgentBatchID", "FuelMatrixID", "OwnerID", "CurCode", "DriverPayF", "ActDateO", "ActTimeInO", "ActTimeOutO", "ActDateD", "ActTimeInD", "ActTimeOutD", "DispHours", "TrailerID3", "TrailerNumber3", "DelOptions", "PullOptionC", "PullOptionX", "DPLocC", "DPLocX", "DPDateC", "DPDateX", "DPTimeInC", "DPTimeOutC", "DPTimeInX", "DPTimeOutX", "ActDPDateC", "ActDPDateX", "ActDPTimeInC", "ActDPTimeOutC", "ActDPTimeInX", "ActDPTimeOutX", "LinkedOutbound", "DPContainer", "DPChassis", "EmptyPullYN", "ChassisPULoc", "ChassisPUDate", "ChassisPUTimeIn", "ChassisPUTimeOut", "ChassisDelLoc", "ChassisDelDate", "ChassisDelTimeIn", "ChassisDelTimeOut", "ActChassisPUDate", "ActChassisPUTimeIn", "ActChassisPUTimeOut", "ActChassisDelDate", "ActChassisDelTimeIn", "ActChassisDelTimeOut", "ChassisOption", "IntEmptyPayType", "LateReason", "EDIStatusCode", "EDIPostBy", "EDIPostDate", "IntEmptyPayMatrix", "PrevVersionYN", "MacroPointOrderID", "DropTrailerID1", "DropTrailerID2", "TrailerCharge", "AllowRejectYN", "PreloadTrailer1YN", "PreloadTrailer2YN", "AutoDispatchYN", "AutoSendSatYN", "DropTrailer1YN", "DropTrailer2YN", "RejectedDT", "StreetTurnYN", "IMLHRate", "IMFuelRate", "IMInsRate", "IMLHAmt", "IMFuelAmt", "IMInsAmt", "PUName", "PUCity", "PUState", "PUZip", "PUTimeIn", "PUTimeOut", "DelName", "DelCity", "DelState", "DelZip", "DelDate", "DelTimeIn", "DelTimeOut", "Status", "PUDate", "DispatchDate", "DispatchTime", "DriverPay", "DispatchCode", "DriverName"}),
		    #"Added Prefix" = Table.TransformColumns(#"Removed Columns", {{"LoadID", each "PCS" & Text.From(_, "en-US"), type text}}),
		    #"Added Prefix1" = Table.TransformColumns(#"Added Prefix", {{"IDNo", each "PCS" & Text.From(_, "en-US"), type text}}),
		    #"Renamed Columns" = Table.RenameColumns(#"Added Prefix1",{{"LoadID", "order_id"}, {"IDNo", "id"}, {"PayRate", "override_pay_amt"}, {"Miles", "move_distance"}}),
		    #"Changed Type" = Table.TransformColumnTypes(#"Renamed Columns",{{"override_pay_amt", Currency.Type}}),
		    #"Merged Queries" = Table.NestedJoin(#"Changed Type", {"order_id"}, pcs_orders_dispatchers, {"LoadID"}, "pcs_orders_dispatchers", JoinKind.LeftOuter),
		    #"Expanded pcs_orders_dispatchers" = Table.ExpandTableColumn(#"Merged Queries", "pcs_orders_dispatchers", {"DispUser"}, {"DispUser"}),
		    #"Renamed Columns1" = Table.RenameColumns(#"Expanded pcs_orders_dispatchers",{{"DispUser", "dispatcher_user_id"}}),
		    #"Added Custom" = Table.AddColumn(#"Renamed Columns1", "status", each "D"),
		    #"Trimmed Text" = Table.TransformColumns(#"Added Custom",{{"dispatcher_user_id", Text.Trim, type text}}),
		    #"Uppercased Text" = Table.TransformColumns(#"Trimmed Text",{{"dispatcher_user_id", Text.Upper, type text}})
		in
		    #"Uppercased Text"
	lineageTag: 56cf4560-8d4b-40d6-953a-3445982b331f
	queryGroup: 'Historic Tables'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression mcleod_historic_movement =
		let
		    Source = Sql.Database("bl-appdb", "lme"),
		    dbo_movement = Source{[Schema="dbo",Item="movement"]}[Data],
		    #"Changed Type" = Table.TransformColumnTypes(dbo_movement,{{"id", type number}}),
		    #"filtered movements pre MovmentCuttOFfNumber" = Table.SelectRows(#"Changed Type", each [id] < MovementCutOffNumber),
		    #"Changed Type1" = Table.TransformColumnTypes(#"filtered movements pre MovmentCuttOFfNumber",{{"id", type text}}),
		    #"Removed Columns" = Table.RemoveColumns(#"Changed Type1",{"company_id", "authorized", "average_broker_rating", "booking_no", "br_details_link", "br_status_link", "br_track_interval", "br_track_status", "br_tracking_id", "br_vendor", "broker_avail_tract", "brokerage", "carrier_contact", "carrier_email", "carrier_fuel_pay_rate_id", "carrier_lane_rate_id", "carrier_override_user", "carrier_phone", "carrier_rate_id", "chassis", "checkcall_sched_id", "container", "container_returned", "container_status", "controlling_carrier_code", "dedicated_order_id", "est_tolls", "est_tolls_c", "est_tolls_d", "est_tolls_n", "est_tolls_r", "exclude_movement", "fleet_manager", "freight_matching_override", "fuel_distance_um", "fuel_tax_exempt", "hubtran_approved_inv_date", "hubtran_ok2pay_date", "integrated_carrier_search", "is_container", "is_dray", "is_local_mile", "linked_id", "linked_sequence", "loaded", "locked_user_id", "ltl", "ltl_staging_wrs_uid", "macropoint_status", "manifest_empty_distance", "manifest_estimated_arrival", "manifest_estimated_depart", "manifest_id", "manifest_loaded_distance", "manifest_reg_uid", "manifest_spots_capacity", "manifest_spots_consumed", "manifest_weight_capacity", "manifest_weight_consumed", "max_buy_c", "max_buy_d", "max_buy_n", "max_buy_r", "max_pay_method", "max_pay_units", "missed_call_sent", "fuel_distance", "move_distance_um", "movement_type", "must_respond_by", "next_sched_call", "operational_status", "operations_user", "override_crny_type", "override_driver_id", "override_driver_nm", "override_drvr_cell", "override_drvr_email", "override_max_pay", "override_max_pay_c", "override_max_pay_d", "override_max_pay_n", "override_max_pay_r", "override_pay_amt_c", "override_pay_amt_d", "override_pay_amt_n", "override_pay_amt_r", "override_paye_rate", "override_targetpay_c", "override_targetpay_d", "override_targetpay_n", "override_targetpay_r", "override_unit_desc", "override_units", "pay_distance", "pay_distance_um", "placard_required", "priority", "pro_nbr", "rate_alert_basis", "rate_alert_date", "rate_alert_days", "rate_alert_hours", "rate_alert_minutes", "rate_confirm_template", "rate_confirmation_sent_date", "rate_confirmation_status", "rate_expiration_basis", "rate_expiration_date", "rate_expiration_days", "rate_expiration_hours", "rate_expiration_minutes", "rdy_pickup_date", "recurring_movement_id", "reminder_sent", "required_vendor", "reserved", "return_date", "seg_alloc_code", "ss_location_id", "target_extra_stop_pay", "target_extra_stop_pay_c", "target_extra_stop_pay_d", "target_extra_stop_pay_n", "target_extra_stop_pay_r", "target_fuel_surcharge_pay", "target_pay_c", "target_pay_d", "target_pay_n", "target_pay_r", "target_pay_method", "target_pay_units", "target_rate_id", "time_to_send_msg", "tracking_request_status", "trailer_rent_pct", "trip_lease", "trip_mgt_recalc_datetime", "trip_mgt_tracking_id", "triumphpay_exclude", "trp_uid", "unlock_time", "waterfall_flood_time", "waterfall_in_progress", "xferred2fueltax", "xferred2fueltaxdt", "xmit_accepted", "xmitted2driver", "zmit_trip", "require_tracking", "ts_borrowing_company", "ts_commodity", "ts_movement_id", "tracking_duration_ext", "tracking_notify_email", "shpmt_ident_type", "shpmt_ident_value", "override_driver2_nm", "ic_company_to", "load_booking_source", "override_drvr2_email", "track_start_date", "br_track_vehicle_id", "br_track_status_desc", "pending_carrier_type", "shipper_email", "carrier_override_carrier", "pending_carrier_name", "override_driver2_id", "carrier_empty_from_city_id", "shipper_notify_frequency", "pending_carrier_nbr", "ic_order_to", "digital_booking", "is_intercompany", "override_drvr2_cell", "carrier_tractor", "carrier_trailer", "equipment_group_id", "empty2next_order", "eform_rate_confirmation", "override_pay_rate", "preassign_sequence", "carrier_trailer_type", "pending_payee_id"}),
		    #"Filtered Rows" = Table.SelectRows(#"Removed Columns", each ([status] <> "V")),
		    //start replacing teams with parade
		    #"Replaced Value" = Table.ReplaceValue(#"Filtered Rows","team17","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
		    #"Replaced Value1" = Table.ReplaceValue(#"Replaced Value","team16","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
		    #"Replaced Value2" = Table.ReplaceValue(#"Replaced Value1","team15","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
		    #"Replaced Value3" = Table.ReplaceValue(#"Replaced Value2","team14","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
		    #"Replaced Value4" = Table.ReplaceValue(#"Replaced Value3","team13","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
		    #"Replaced Value5" = Table.ReplaceValue(#"Replaced Value4","team12","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
		    #"Replaced Value6" = Table.ReplaceValue(#"Replaced Value5","team10","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
		    #"Replaced Value7" = Table.ReplaceValue(#"Replaced Value6","team9","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
		    #"Replaced Value8" = Table.ReplaceValue(#"Replaced Value7","team8","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
		    #"Replaced Value9" = Table.ReplaceValue(#"Replaced Value8","team7","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
		    #"Replaced Value10" = Table.ReplaceValue(#"Replaced Value9","team6","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
		    #"Replaced Value11" = Table.ReplaceValue(#"Replaced Value10","team5","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
		    #"Replaced Value12" = Table.ReplaceValue(#"Replaced Value11","team4","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
		    #"Replaced Value13" = Table.ReplaceValue(#"Replaced Value12","team3","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
		    #"Replaced Value14" = Table.ReplaceValue(#"Replaced Value13","team2","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
		    #"Replaced Value15" = Table.ReplaceValue(#"Replaced Value14","team1","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
		    #"Replaced Value16" = Table.ReplaceValue(#"Replaced Value15","cdispatch","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
		    //end replace teams with parade
		    #"Replaced Value17" = Table.ReplaceValue(#"Replaced Value16","cbt","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
		    #"Trimmed Text" = Table.TransformColumns(#"Replaced Value17",{{"dispatcher_user_id", Text.Trim, type text}}),
		    #"Uppercased Text" = Table.TransformColumns(#"Trimmed Text",{{"dispatcher_user_id", Text.Upper, type text}})
		in
		    #"Uppercased Text"
	lineageTag: 913af15e-8ef1-470b-a516-92c5e6d44a04
	queryGroup: 'Historic Tables'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression mcleod_historic_driver_extra_pay =
		let
		    Source = Sql.Database("bl-appdb", "lme"),
		    dbo_driver_extra_pay = Source{[Schema="dbo",Item="driver_extra_pay"]}[Data],
		    #"Filtered Pay pre RefreshCutOffDate" = Table.SelectRows(dbo_driver_extra_pay, each [amount_d] < RefreshCutOffDate),
		    #"Removed Columns" = Table.RemoveColumns(#"Filtered Pay pre RefreshCutOffDate",{"company_id", "amount_c", "amount_d", "amount_n", "amount_r", "carrier_rate_id", "descr", "detention_hist_pay_id", "driver_id", "fuel_surcharge_pay", "jag_rate_id", "order_id", "rate", "reference_no", "rev_uid", "transaction_date", "units"})
		in
		    #"Removed Columns"
	lineageTag: c2f81b9b-4fbb-45cc-baa7-0086b2f2998d
	queryGroup: 'Historic Tables'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression mcleod_historic_movement_order =
		let
		    Source = Sql.Database("bl-appdb", "lme"),
		    dbo_movement_order = Source{[Schema="dbo",Item="movement_order"]}[Data],
		    #"Changed Type" = Table.TransformColumnTypes(dbo_movement_order,{{"movement_id", type number}}),
		    #"Filtered Pre MovementCutOffNumber" = Table.SelectRows(#"Changed Type", each [movement_id] < MovementCutOffNumber),
		    #"Removed Columns" = Table.RemoveColumns(#"Filtered Pre MovementCutOffNumber",{"company_id", "id", "on_at_move_dest", "on_at_move_origin", "planned_manifest_id"})
		in
		    #"Removed Columns"
	lineageTag: 98afc80b-1ced-4813-84ff-49fa95dcea19
	queryGroup: 'Historic Tables'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression movement_order =
		let
		    Source = Sql.Database("bl-appdb", "lme"),
		    dbo_movement_order = Source{[Schema="dbo",Item="movement_order"]}[Data],
		    #"Changed Type" = Table.TransformColumnTypes(dbo_movement_order,{{"movement_id", type number}}),
		    #"Filtered >= MovementCutOffNumber" = Table.SelectRows(#"Changed Type", each [movement_id] >= MovementCutOffNumber),
		    #"Changed Type1" = Table.TransformColumnTypes(#"Filtered >= MovementCutOffNumber",{{"movement_id", type text}}),
		    #"Removed Columns" = Table.RemoveColumns(#"Changed Type1",{"company_id", "id", "on_at_move_dest", "on_at_move_origin", "planned_manifest_id"}),
		    #"Appended Query" = Table.Combine({#"Removed Columns", mcleod_historic_movement_order}),
		    #"Changed Type2" = Table.TransformColumnTypes(#"Appended Query",{{"movement_id", type text}}),
		    #"Trimmed Text" = Table.TransformColumns(#"Changed Type2",{{"movement_id", Text.Trim, type text}})
		in
		    #"Trimmed Text"
	lineageTag: 32c1816d-fe91-435a-8362-5ffc4dd06ca1
	queryGroup: 'Historic Tables'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression Parameter1 = #"Sample File" meta [IsParameterQuery=true, BinaryIdentifier=#"Sample File", Type="Binary", IsParameterQueryRequired=true]
	lineageTag: 59e49c03-a356-4cef-87fc-37914b4d1cd5
	queryGroup: 'Transform File from historic_parade_orders\Helper Queries'

	annotation PBI_ResultType = Binary

expression 'Transform Sample File' =
		let
		    Source = Excel.Workbook(Parameter1, null, true),
		    Sheet1_Sheet = Source{[Item="Sheet1",Kind="Sheet"]}[Data],
		    #"Promoted Headers" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true])
		in
		    #"Promoted Headers"
	lineageTag: 1fbdd36a-69da-4bdd-8d07-bdf16a9c249c
	queryGroup: 'Transform File from historic_parade_orders'

	annotation PBI_ResultType = Table

expression 'Sample File' =
		let
		    Source = SharePoint.Files("https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam", [ApiVersion = 15]),
		    #"Reordered Columns" = Table.ReorderColumns(Source,{"Content", "Name", "Extension", "Date accessed", "Date modified", "Date created", "Folder Path", "Attributes"}),
		    #"Filtered Rows" = Table.SelectRows(#"Reordered Columns", each Text.Contains([Folder Path], "02 BL-Areas/bridge_iq/Data Sets/Parade/parade_orders_api_files")),
		    Navigation1 = #"Filtered Rows"{0}[Content]
		in
		    Navigation1
	lineageTag: 3619b482-2bf8-4f12-915b-aab38357cf1f
	queryGroup: 'Transform File from historic_parade_orders\Helper Queries'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Binary

expression 'Transform File' =
		let
		    Source = (Parameter1 as binary) => let
		    Source = Excel.Workbook(Parameter1, null, true),
		    Sheet1_Sheet = Source{[Item="Sheet1",Kind="Sheet"]}[Data],
		    #"Promoted Headers" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true])
		in
		    #"Promoted Headers"
		in
		    Source
	mAttributes: [ FunctionQueryBinding = "{""exemplarFormulaName"":""Transform Sample File""}" ]
	lineageTag: 9bb2a554-9b20-411a-b1b6-ea04113e9d7c
	queryGroup: 'Transform File from historic_parade_orders\Helper Queries'

	annotation PBI_ResultType = Function

expression Parameter2 = #"Sample File (2)" meta [IsParameterQuery=true, BinaryIdentifier=#"Sample File (2)", Type="Binary", IsParameterQueryRequired=true]
	lineageTag: f0b8ebc3-304f-43e6-bbee-db250c156091
	queryGroup: 'Transform File from parade_orders\Helper Queries'

	annotation PBI_ResultType = Binary

expression 'Transform Sample File (2)' =
		let
		    Source = Excel.Workbook(Parameter2, null, true),
		    Sheet1_Sheet = Source{[Item="Sheet1",Kind="Sheet"]}[Data],
		    #"Promoted Headers" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true])
		in
		    #"Promoted Headers"
	lineageTag: b142244a-63e0-49ba-9f70-76864dbaf607
	queryGroup: 'Transform File from parade_orders'

	annotation PBI_ResultType = Table

expression 'Sample File (2)' =
		let
		    Source = SharePoint.Files("https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam", [ApiVersion = 15]),
		    #"Reordered Columns" = Table.ReorderColumns(Source,{"Content", "Name", "Extension", "Date accessed", "Date modified", "Date created", "Folder Path", "Attributes"}),
		    #"Filtered Rows" = Table.SelectRows(#"Reordered Columns", each Text.Contains([Folder Path], "02 BL-Areas/bridge_iq/Data Sets/Parade/parade_orders_api_files")),
		    #"Filtered Hidden Files1" = Table.SelectRows(#"Filtered Rows", each [Attributes]?[Hidden]? <> true),
		    Navigation1 = #"Filtered Hidden Files1"{0}[Content]
		in
		    Navigation1
	lineageTag: c286de1c-fe54-4fb7-9c49-86bf12c129db
	queryGroup: 'Transform File from parade_orders\Helper Queries'

	annotation PBI_ResultType = Binary

expression 'Transform File (2)' =
		let
		    Source = (Parameter2 as binary) => let
		    Source = Excel.Workbook(Parameter2, null, true),
		    Sheet1_Sheet = Source{[Item="Sheet1",Kind="Sheet"]}[Data],
		    #"Promoted Headers" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true])
		in
		    #"Promoted Headers"
		in
		    Source
	mAttributes: [ FunctionQueryBinding = "{""exemplarFormulaName"":""Transform Sample File (2)""}" ]
	lineageTag: bf0440a7-90f6-460f-9fbc-c2f0a8fce758
	queryGroup: 'Transform File from parade_orders\Helper Queries'

	annotation PBI_ResultType = Function

expression historic_parade_orders =
		let
		    Source = SharePoint.Files("https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam", [ApiVersion = 15]),
		    #"Reordered Columns" = Table.ReorderColumns(Source,{"Content", "Name", "Extension", "Date accessed", "Date modified", "Date created", "Folder Path", "Attributes"}),
		    #"Filtered Rows" = Table.SelectRows(#"Reordered Columns", each Text.Contains([Folder Path], "02 BL-Areas/bridge_iq/Data Sets/Parade/parade_orders_api_files")),
		    #"Filtered Hidden Files1" = Table.SelectRows(#"Filtered Rows", each [Attributes]?[Hidden]? <> true),
		    #"Invoke Custom Function1" = Table.AddColumn(#"Filtered Hidden Files1", "Transform File", each #"Transform File"([Content])),
		    #"Removed Other Columns1" = Table.SelectColumns(#"Invoke Custom Function1", {"Transform File"}),
		    #"Expanded Table Column1" = Table.ExpandTableColumn(#"Removed Other Columns1", "Transform File", Table.ColumnNames(#"Transform File"(#"Sample File"))),
		    #"Changed Type" = Table.TransformColumnTypes(#"Expanded Table Column1",{{"id", Int64.Type}, {"reference_id", type text}, {"created_at", type datetime}, {"archived_at", type datetime}, {"src_city", type text}, {"src_state", type text}, {"src_date", type date}, {"src_postal_code", type text}, {"dst_city", type text}, {"dst_state", type text}, {"dst_date", type date}, {"dst_postal_code", type text}, {"num_stops", Int64.Type}, {"equipment", type text}, {"trailer_type", type text}, {"rate_customer", type number}, {"first_load", type logical}, {"customer_id", type text}, {"revenue_code", Int64.Type}, {"team_name", type any}, {"rep_email", type text}, {"rep_name", type text}, {"carrier_manager", type text}, {"category", type text}, {"conversion_category", type text}, {"partner", type text}, {"margin_amount", type number}, {"margin_pct", type number}, {"carrier_name", type text}, {"dot_number", Int64.Type}, {"mc_number", Int64.Type}, {"carrier_rate", type number}}),
		    #"Changed Type1" = Table.TransformColumnTypes(#"Changed Type",{{"rate_customer", Currency.Type}, {"margin_amount", Currency.Type}}),
		    #"Sorted Rows" = Table.Sort(#"Changed Type1",{{"reference_id", Order.Ascending}}),
		    #"Extracted Text After Delimiter" = Table.TransformColumns(#"Sorted Rows", {{"reference_id", each Text.AfterDelimiter(_, "-"), type text}}),
		    #"Removed Blank Rows" = Table.SelectRows(#"Extracted Text After Delimiter", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {"", null}))),
		    #"Renamed Columns" = Table.RenameColumns(#"Removed Blank Rows",{{"reference_id", "movement_id"}}),
		    #"Filtered Rows1" = Table.SelectRows(#"Renamed Columns", each ([category] <> "outside_parade") and ([conversion_category] <> "Manually Assigned")),
		    #"Removed Duplicates" = Table.Distinct(#"Filtered Rows1", {"id"}),
		    #"Filtered orders before RefreshCutOffDate" = Table.SelectRows(#"Removed Duplicates", each [created_at] < RefreshCutOffDate)
		in
		    #"Filtered orders before RefreshCutOffDate"
	lineageTag: 95446394-12c9-44d4-bfbc-ea7f8fb2d92d
	queryGroup: 'Historic Tables'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression historic_callins =
		let
		    Source = Sql.Database("bl-appdb", "lme"),
		    dbo_callin = Source{[Schema="dbo",Item="callin"]}[Data],
		    #"Removed Other Columns" = Table.SelectColumns(dbo_callin,{"entered_by", "entered_date", "movement_status", "payee_id", "initiated_type", "movement_id"}),
		    #"Filtered callins before RefreshCutOffDate" = Table.SelectRows(#"Removed Other Columns", each [entered_date] < RefreshCutOffDate),
		    #"Inserted Time" = Table.AddColumn(#"Filtered callins before RefreshCutOffDate", "Time", each DateTime.Time([entered_date]), type time),
		    #"Renamed Columns" = Table.RenameColumns(#"Inserted Time",{{"Time", "entered_time"}}),
		    #"Extracted Date" = Table.TransformColumns(#"Renamed Columns",{{"entered_date", DateTime.Date, type date}}),
		    #"Calculated Start of Hour" = Table.TransformColumns(#"Extracted Date",{{"entered_time", Time.StartOfHour, type time}})
		in
		    #"Calculated Start of Hour"
	lineageTag: 56bd229e-e47a-4149-814e-6b72b080d909
	queryGroup: 'Historic Tables'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression parade_orders =
		let
		    Source = SharePoint.Files("https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam", [ApiVersion = 15]),
		    #"Reordered Columns" = Table.ReorderColumns(Source,{"Content", "Name", "Extension", "Date accessed", "Date modified", "Date created", "Folder Path", "Attributes"}),
		    #"Filtered Rows" = Table.SelectRows(#"Reordered Columns", each Text.Contains([Folder Path], "02 BL-Areas/bridge_iq/Data Sets/Parade/parade_orders_api_files")),
		    #"Filtered Hidden Files1" = Table.SelectRows(#"Filtered Rows", each [Attributes]?[Hidden]? <> true),
		    #"Filtered Hidden Files2" = Table.SelectRows(#"Filtered Hidden Files1", each [Attributes]?[Hidden]? <> true),
		    #"Invoke Custom Function1" = Table.AddColumn(#"Filtered Hidden Files2", "Transform File (2)", each #"Transform File (2)"([Content])),
		    #"Removed Other Columns1" = Table.SelectColumns(#"Invoke Custom Function1", {"Transform File (2)"}),
		    #"Expanded Table Column1" = Table.ExpandTableColumn(#"Removed Other Columns1", "Transform File (2)", Table.ColumnNames(#"Transform File (2)"(#"Sample File (2)"))),
		    #"Changed Type" = Table.TransformColumnTypes(#"Expanded Table Column1",{{"id", Int64.Type}, {"reference_id", type text}, {"created_at", type datetime}, {"archived_at", type datetime}, {"src_city", type text}, {"src_state", type text}, {"src_date", type date}, {"src_postal_code", type text}, {"dst_city", type text}, {"dst_state", type text}, {"dst_date", type date}, {"dst_postal_code", type text}, {"num_stops", Int64.Type}, {"equipment", type text}, {"trailer_type", type text}, {"rate_customer", type number}, {"first_load", type logical}, {"customer_id", type text}, {"revenue_code", Int64.Type}, {"team_name", type any}, {"rep_email", type text}, {"rep_name", type text}, {"carrier_manager", type text}, {"category", type text}, {"conversion_category", type text}, {"partner", type text}, {"margin_amount", type number}, {"margin_pct", type number}, {"carrier_name", type text}, {"dot_number", Int64.Type}, {"mc_number", Int64.Type}, {"carrier_rate", type number}}),
		    #"Changed Type1" = Table.TransformColumnTypes(#"Changed Type",{{"rate_customer", Currency.Type}, {"margin_amount", Currency.Type}}),
		    #"Sorted Rows" = Table.Sort(#"Changed Type1",{{"reference_id", Order.Ascending}}),
		    #"Extracted Text After Delimiter" = Table.TransformColumns(#"Sorted Rows", {{"reference_id", each Text.AfterDelimiter(_, "-"), type text}}),
		    #"Removed Blank Rows" = Table.SelectRows(#"Extracted Text After Delimiter", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {"", null}))),
		    #"Renamed Columns" = Table.RenameColumns(#"Removed Blank Rows",{{"reference_id", "movement_id"}}),
		    #"Filtered Rows1" = Table.SelectRows(#"Renamed Columns", each ([category] <> "outside_parade") and ([conversion_category] <> "Manually Assigned")),
		    #"Removed Duplicates" = Table.Distinct(#"Filtered Rows1", {"id"}),
		    #"Filtered Orders on or after RefreshCutOffDate" = Table.SelectRows(#"Removed Duplicates", each [created_at] >= RefreshCutOffDate),
		    #"Appended Query" = Table.Combine({#"Filtered Orders on or after RefreshCutOffDate", historic_parade_orders})
		in
		    #"Appended Query"
	lineageTag: 5688bae6-26cc-4f19-8378-f368a98c4b01

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression dnc =
		let
		    Source = Excel.Workbook(Web.Contents("https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared%20Documents/02%20BL-Areas/bridge_iq/Data%20Sets/DNC/DNC.xlsx"), null, true),
		    dnc_Table = Source{[Item="dnc",Kind="Table"]}[Data],
		    #"Changed Type" = Table.TransformColumnTypes(dnc_Table,{{"DNC", type text}}),
		    #"Removed Duplicates" = Table.Distinct(#"Changed Type")
		in
		    #"Removed Duplicates"
	lineageTag: 404f9e09-a9e5-41cf-8435-ee73acb35e66

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression Parameter3 = #"Sample File (3)" meta [IsParameterQuery=true, BinaryIdentifier=#"Sample File (3)", Type="Binary", IsParameterQueryRequired=true]
	lineageTag: c5b8bf0c-fa84-413d-a472-27c7814f3c56
	queryGroup: 'Transform File from behaviors\Helper Queries'

	annotation PBI_ResultType = Binary

expression 'Transform Sample File (3)' =
		let
		    Source = Excel.Workbook(Parameter3, null, true),
		    Sheet1_Sheet = Source{[Item="Sheet1",Kind="Sheet"]}[Data],
		    #"Promoted Headers" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true])
		in
		    #"Promoted Headers"
	lineageTag: 04305715-2431-48aa-84c3-4fffc150748a
	queryGroup: 'Transform File from behaviors'

	annotation PBI_ResultType = Table

expression 'Sample File (3)' =
		let
		    Source = SharePoint.Files("https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam", [ApiVersion = 15]),
		    #"Filtered Rows" = Table.SelectRows(Source, each Text.Contains([Folder Path], "https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared Documents/02 BL-Areas/bridge_iq/Data Sets/behaviors_api_files/")),
		    Navigation1 = #"Filtered Rows"{0}[Content]
		in
		    Navigation1
	lineageTag: fc6fe0e2-27aa-48a4-8d3b-f19ba57636e6
	queryGroup: 'Transform File from behaviors\Helper Queries'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Binary

expression 'Transform File (3)' =
		let
		    Source = (Parameter3 as binary) => let
		    Source = Excel.Workbook(Parameter3, null, true),
		    Sheet1_Sheet = Source{[Item="Sheet1",Kind="Sheet"]}[Data],
		    #"Promoted Headers" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true])
		in
		    #"Promoted Headers"
		in
		    Source
	mAttributes: [ FunctionQueryBinding = "{""exemplarFormulaName"":""Transform Sample File (3)""}" ]
	lineageTag: b594b25c-1827-4acd-ae47-d19aae6df491
	queryGroup: 'Transform File from behaviors\Helper Queries'

	annotation PBI_ResultType = Function

expression Parameter4 = #"Sample File (4)" meta [IsParameterQuery=true, BinaryIdentifier=#"Sample File (4)", Type="Binary", IsParameterQueryRequired=true]
	lineageTag: 50f5d478-8d0f-4752-923f-22e5b5b84184
	queryGroup: 'Transform File from historic_behaviors\Helper Queries'

	annotation PBI_ResultType = Binary

expression 'Transform Sample File (4)' =
		let
		    Source = Excel.Workbook(Parameter4, null, true),
		    Sheet1_Sheet = Source{[Item="Sheet1",Kind="Sheet"]}[Data],
		    #"Promoted Headers" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true])
		in
		    #"Promoted Headers"
	lineageTag: 40157f7e-dcc8-4409-9d8f-b835b60dc51f
	queryGroup: 'Transform File from historic_behaviors'

	annotation PBI_ResultType = Table

expression 'Sample File (4)' =
		let
		    Source = SharePoint.Files("https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam", [ApiVersion = 15]),
		    #"Filtered Rows" = Table.SelectRows(Source, each Text.Contains([Folder Path], "https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared Documents/02 BL-Areas/bridge_iq/Data Sets/behaviors_api_files/")),
		    #"Filtered Hidden Files1" = Table.SelectRows(#"Filtered Rows", each [Attributes]?[Hidden]? <> true),
		    Navigation1 = #"Filtered Hidden Files1"{0}[Content]
		in
		    Navigation1
	lineageTag: 6c753d56-0e08-4fa7-8bde-cdf69a56d0ac
	queryGroup: 'Transform File from historic_behaviors\Helper Queries'

	annotation PBI_ResultType = Binary

expression 'Transform File (4)' =
		let
		    Source = (Parameter4 as binary) => let
		    Source = Excel.Workbook(Parameter4, null, true),
		    Sheet1_Sheet = Source{[Item="Sheet1",Kind="Sheet"]}[Data],
		    #"Promoted Headers" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true])
		in
		    #"Promoted Headers"
		in
		    Source
	mAttributes: [ FunctionQueryBinding = "{""exemplarFormulaName"":""Transform Sample File (4)""}" ]
	lineageTag: 96187a1f-dd5c-48bf-9faa-843e6b5cd850
	queryGroup: 'Transform File from historic_behaviors\Helper Queries'

	annotation PBI_ResultType = Function

expression historic_behaviors =
		let
		    Source = SharePoint.Files("https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam", [ApiVersion = 15]),
		    #"Filtered Rows" = Table.SelectRows(Source, each Text.Contains([Folder Path], "https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared Documents/02 BL-Areas/bridge_iq/Data Sets/behaviors_api_files/")),
		    #"Filtered Hidden Files1" = Table.SelectRows(#"Filtered Rows", each [Attributes]?[Hidden]? <> true),
		    #"Filtered Hidden Files2" = Table.SelectRows(#"Filtered Hidden Files1", each [Attributes]?[Hidden]? <> true),
		    #"Invoke Custom Function1" = Table.AddColumn(#"Filtered Hidden Files2", "Transform File (4)", each #"Transform File (4)"([Content])),
		    #"Renamed Columns1" = Table.RenameColumns(#"Invoke Custom Function1", {"Name", "Source.Name"}),
		    #"Removed Other Columns1" = Table.SelectColumns(#"Renamed Columns1", {"Source.Name", "Transform File (4)"}),
		    #"Expanded Table Column1" = Table.ExpandTableColumn(#"Removed Other Columns1", "Transform File (4)", Table.ColumnNames(#"Transform File (4)"(#"Sample File (4)"))),
		    #"Changed Type" = Table.TransformColumnTypes(#"Expanded Table Column1",{{"Source.Name", type text}, {"id", Int64.Type}, {"date", type datetime}, {"author_id", type any}, {"mail_activity_type_id", type text}, {"model", type text}, {"res_id", Int64.Type}}),
		    #"Filtered Rows1" = Table.SelectRows(#"Changed Type", each true),
		    #"Removed Columns" = Table.RemoveColumns(#"Filtered Rows1",{"Source.Name"}),
		    #"Extracted Text Between Delimiters" = Table.TransformColumns(#"Removed Columns", {{"author_id", each Text.BetweenDelimiters(_, "'", "'"), type text}, {"mail_activity_type_id", each Text.BetweenDelimiters(_, "'", "'"), type text}}),
		    #"Replaced Errors" = Table.ReplaceErrorValues(#"Extracted Text Between Delimiters", {{"author_id", null}}),
		    #"Filtered Rows2" = Table.SelectRows(#"Replaced Errors", each ([model] <> "gamification.badge.user") and ([author_id] <> null and [author_id] <> "OdooBot" and [author_id] <> "Portal User Template")),
		    #"Inserted Time" = Table.AddColumn(#"Filtered Rows2", "Time", each DateTime.Time([date]), type time),
		    #"Renamed Columns2" = Table.RenameColumns(#"Inserted Time",{{"date", "Behavior Date"}, {"Time", "Behavior Time"}}),
		    #"Filtered Rows3" = Table.SelectRows(#"Renamed Columns2", each [Behavior Date] < RefreshCutOffDate),
		    #"Changed Type1" = Table.TransformColumnTypes(#"Filtered Rows3",{{"Behavior Date", type date}}),
		    #"Inserted Start of Month" = Table.AddColumn(#"Changed Type1", "Start of Month", each Date.StartOfMonth([Behavior Date]), type date)
		in
		    #"Inserted Start of Month"
	lineageTag: 797f4845-cadf-4720-8f56-c0abeae60b99
	queryGroup: 'Historic Tables'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression users =
		let
		    Source = Sql.Database("bl-appdb", "lme"),
		    dbo_users = Source{[Schema="dbo",Item="users"]}[Data],
		    #"Filtered Rows" = Table.SelectRows(dbo_users, each ([web_user_type] = "U")),
		    #"Removed Other Columns" = Table.SelectColumns(#"Filtered Rows",{"revenue_code_id", "id"}),
		    #"Uppercased Text" = Table.TransformColumns(#"Removed Other Columns",{{"id", Text.Upper, type text}}),
		    #"Trimmed Text" = Table.TransformColumns(#"Uppercased Text",{{"id", Text.Trim, type text}}),
		    #"Cleaned Text" = Table.TransformColumns(#"Trimmed Text",{{"id", Text.Clean, type text}})
		in
		    #"Cleaned Text"
	lineageTag: b0d9ea90-2639-4ad1-97d0-43f2699756a9

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

