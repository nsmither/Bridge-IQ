{
  "version": "1.0",
  "conceptualSchemaSettings": {},
  "queries": [
    {
      "name": "mcleod_historic_orders",
      "lineageTag": "ecc7d6f2-89e7-440c-8625-c2621e2e918e",
      "queryGroupId": "caaa80e5-0b68-49f7-8048-af185c067fb6",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Sql.Databases(\"bl-appdb\"),",
        "    lme = Source{[Name=\"lme\"]}[Data],",
        "    dbo_orders = lme{[Schema=\"dbo\",Item=\"orders\"]}[Data],",
        "    #\"Filtered Orders Pre RefreshCutOFfDate\" = Table.SelectRows(dbo_orders, each [ordered_date] < RefreshCutOffDate),",
        "    //Start General Data Transformation",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Filtered Orders Pre RefreshCutOFfDate\",{\"company_id\", \"actual_reefer_profile\", \"agency_id\", \"agent_payee_id\", \"allow_relay\", \"autorate_status\", \"booking_no\", \"booking_number\", \"brk_qual_profile\", \"broker_location_id\", \"brokerage_workflow_id\", \"cbp_crossing_date\", \"cbp_crossing_location_id\", \"cbp_crossing_reason\", \"cbsa_crossing_date\", \"cbsa_crossing_location_id\", \"cbsa_crossing_reason\", \"cc_fuel_revenue\", \"cc_fuel_revenue_c\", \"cc_fuel_revenue_d\", \"cc_fuel_revenue_n\", \"cc_fuel_revenue_r\", \"cc_net_revenue\", \"cc_net_revenue_c\", \"cc_net_revenue_d\", \"cc_net_revenue_n\", \"cc_net_revenue_r\", \"cc_pro_nbr\", \"cobroker_location_id\", \"collection_method\", \"com_setpnt_temp\", \"com_setpnt_temp_um\", \"commitment_id\", \"container\", \"container_planned\", \"container_type_id\", \"controlling_carrier_code\", \"copy_from_company\", \"copy_from_order_id\", \"copy_to_company\", \"copy_to_order_id\", \"ctrl_party_id\", \"cube\", \"curr_movement_id\", \"cust_order_no\", \"declared_val\", \"def_move_type\", \"default_match_id\", \"dim_height\", \"dim_length\", \"dim_surcharge\", \"dim_surcharge_c\", \"dim_surcharge_d\", \"dim_surcharge_n\", \"dim_surcharge_r\", \"dim_width\", \"dispatch_opt\", \"dl_team_reqd\", \"dray_del_date\", \"dray_del_pay\", \"dray_del_pay_c\", \"dray_del_pay_d\", \"dray_del_pay_n\", \"dray_del_pay_r\", \"dray_del_payee\", \"dray_del_xfer_dt\", \"dray_pu_date\", \"dray_pu_pay\", \"dray_pu_pay_c\", \"dray_pu_pay_d\", \"dray_pu_pay_n\", \"dray_pu_pay_r\", \"dray_pu_payee\", \"dray_pu_xfer_dt\", \"eir1_no\", \"eir2_no\", \"est_tolls\", \"est_tolls_c\", \"est_tolls_d\", \"est_tolls_n\", \"est_tolls_r\", \"excise_disable_update\", \"excise_taxable\", \"excisetax_total\", \"excisetax_total_c\", \"excisetax_total_d\", \"excisetax_total_n\", \"excisetax_total_r\", \"force_assign\", \"forwd_location_id\", \"free_days\", \"freight_charge_c\", \"freight_charge_d\", \"freight_charge_r\", \"high_value\", \"hold_reason\", \"image_is_present\", \"import_export\", \"include_split_point\", \"intelliset\", \"invoice_recv_date\", \"is_autorate_dist\", \"is_container\", \"is_dedicated\", \"is_local_mile\", \"is_requested\", \"jag_carrier_id\", \"jag_cost_rate_id\", \"ldport_location_id\", \"linear_feet_avail\", \"loadboard\", \"ltl\", \"markup_flat\", \"markup_flat_c\", \"markup_flat_d\", \"markup_flat_n\", \"markup_flat_r\", \"markup_percent\", \"master_order_id\", \"master_sequence\", \"next_rebill\", \"nte_lp_num\", \"nte_lp_qual\", \"operational_status\", \"optiset\", \"optimize\", \"order_mode\", \"order_value_c\", \"order_value_d\", \"order_value_n\", \"order_value_r\", \"orig_dest_rate_id\", \"otherchargetotal_c\", \"otherchargetotal_d\", \"otherchargetotal_n\", \"otherchargetotal_r\", \"pallets_required\", \"pay_gross_d\", \"pay_gross_n\", \"pay_gross_r\", \"planning_comment\", \"pnn_callback\", \"pnn_comment\", \"pnn_comment2\", \"pnn_post_type\", \"pnn_rate\", \"pay_gross\", \"pay_gross_c\", \"pick_up_no\", \"pnn_rate_type\", \"pnn_trailer_length\", \"pnn_trailer_width\", \"ponum\", \"port\", \"port_of_discharge\", \"preload_trailer_id\", \"preloaded\", \"rate_currency_type\", \"rate_id\", \"rate_min_weight\", \"rate_min_weight_um\", \"rate_unit_desc\", \"recurring_order_id\", \"reply_transmitted\", \"requesting_company\", \"return_temp\", \"return_temp_um\", \"return_temp_var\", \"return_temp_var_um\", \"revenue_share_method\", \"sail_date\", \"seal_number\", \"seg_alloc_code\", \"setpoint_temp\", \"setpoint_temp_um\", \"setpoint_var\", \"setpoint_var_um\", \"ship_status_to_edi\", \"shipment_id\", \"shipstatus2edi_dt\", \"ss_location_id\", \"subject_order_status\", \"subject_order_void_date\", \"swap\", \"teams_required\", \"temperature_max_um\", \"temperature_min_um\", \"total_charge_c\", \"total_charge_d\", \"total_charge_n\", \"total_charge_r\", \"totalcharge_and_excisetax_c\", \"totalcharge_and_excisetax_d\", \"totalcharge_and_excisetax_n\", \"totalcharge_and_excisetax_r\", \"tractor_type\", \"vessel\", \"vessel_cutoff_date\", \"bill_distance_um\", \"billing_empty_distance\", \"billing_empty_distance_um\", \"billing_loaded_distance\", \"billing_loaded_distance_um\", \"bol_note\", \"bol_recv_date\", \"external_invoiceno\", \"freight_charge_n\", \"load_date\", \"ordered_by\", \"ordered_method\", \"placard_required\", \"rate\", \"rate_type\", \"rate_units\", \"ready_to_bill\", \"totalcharge_and_excisetax\", \"weight_um\", \"xferred2billing\", \"xferred2billing_dt\", \"lock_miles\", \"is_auto_tonu\", \"floor_loaded_freight\", \"equipment_type_options\", \"ic_movement_from\", \"ic_company_from\", \"is_intercompany\", \"rate_source\", \"ic_order_from\", \"ordered_by_id\", \"pnn_loadboard_user_id\", \"voided_load_transmitted_dt\", \"voided_load_transmitted\", \"total_charge\"}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Columns\",{{\"blnum\", \"customer_po\"}, {\"consignee_refno\", \"bol\"}, {\"ordered_date\", \"order_entered_date\"}, {\"otherchargetotal\", \"other_charges_total\"}, {\"salesperson\", \"salesperson_id\"}}),",
        "    #\"Inserted order_entered_time\" = Table.AddColumn(#\"Renamed Columns\", \"order_entered_time\", each DateTime.Time([order_entered_date]), type time),",
        "    //End General Data Transformation",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Inserted order_entered_time\",{{\"bill_date\", type date}, {\"freight_charge\", Currency.Type}, {\"order_entered_date\", type date}, {\"other_charges_total\", Currency.Type}}),",
        "    #\"Filtered Rows\" = Table.SelectRows(#\"Changed Type\", each ([status] = \"D\" or [status] = \"P\")),",
        "    //Start add shipper and consignee data",
        "    #\"Merged stop table shipper\" = Table.NestedJoin(#\"Filtered Rows\", {\"shipper_stop_id\"}, stop, {\"id\"}, \"stop\", JoinKind.LeftOuter),",
        "    #\"Expanded stop\" = Table.ExpandTableColumn(#\"Merged stop table shipper\", \"stop\", {\"city_name\", \"location_name\", \"sched_arrive_early\", \"sched_arrive_late\", \"state\", \"zip_code\", \"sched_arrive_early_time\", \"sched_arrive_late_time\"}, {\"stop.city_name\", \"stop.location_name\", \"stop.sched_arrive_early\", \"stop.sched_arrive_late\", \"stop.state\", \"stop.zip_code\", \"stop.sched_arrive_early_time\", \"stop.sched_arrive_late_time\"}),",
        "    #\"Renamed shipper data\" = Table.RenameColumns(#\"Expanded stop\",{{\"stop.city_name\", \"shipper_city_name\"}, {\"stop.location_name\", \"shipper_location_name\"}, {\"stop.sched_arrive_early\", \"shipper_sched_early_date\"}, {\"stop.sched_arrive_late\", \"shipper_sched_late_date\"}, {\"stop.state\", \"shipper_state\"}, {\"stop.zip_code\", \"shipper_zip_code\"}, {\"stop.sched_arrive_early_time\", \"shipper_sched_early_time\"}, {\"stop.sched_arrive_late_time\", \"shipper_sched_late_time\"}}),",
        "    #\"Merged stop table consignee\" = Table.NestedJoin(#\"Renamed shipper data\", {\"consignee_stop_id\"}, stop, {\"id\"}, \"stop\", JoinKind.LeftOuter),",
        "    #\"Expanded stop1\" = Table.ExpandTableColumn(#\"Merged stop table consignee\", \"stop\", {\"city_id\", \"city_name\", \"location_name\", \"sched_arrive_early\", \"sched_arrive_late\", \"state\", \"zip_code\", \"sched_arrive_early_time\", \"sched_arrive_late_time\"}, {\"stop.city_id\", \"stop.city_name\", \"stop.location_name\", \"stop.sched_arrive_early\", \"stop.sched_arrive_late\", \"stop.state\", \"stop.zip_code\", \"stop.sched_arrive_early_time\", \"stop.sched_arrive_late_time\"}),",
        "    //End add shipper and consignee data",
        "    #\"Renamed consignee data\" = Table.RenameColumns(#\"Expanded stop1\",{{\"stop.city_id\", \"consignee_city_id\"}, {\"stop.city_name\", \"consignee_city_name\"}, {\"stop.location_name\", \"consignee_location_name\"}, {\"stop.sched_arrive_early\", \"consignee_sched_early_date\"}, {\"stop.sched_arrive_late\", \"consignee_sched_late_date\"}, {\"stop.state\", \"consignee_state\"}, {\"stop.zip_code\", \"consignee_zip_code\"}, {\"stop.sched_arrive_early_time\", \"consignee_sched_early_time\"}, {\"stop.sched_arrive_late_time\", \"consignee_sched_late_time\"}}),",
        "    #\"Inserted First Characters\" = Table.AddColumn(#\"Renamed consignee data\", \"shipper_3_digit_zip_code\", each Text.Start([shipper_zip_code], 3), type text),",
        "    #\"Inserted First Characters1\" = Table.AddColumn(#\"Inserted First Characters\", \"consignee_3_digit_zip_code\", each Text.Start([consignee_zip_code], 3), type text),",
        "    //Start Add Lane",
        "    #\"Trimmed Text\" = Table.TransformColumns(#\"Inserted First Characters1\",{{\"shipper_city_name\", Text.Trim, type text}, {\"shipper_state\", Text.Trim, type text}, {\"consignee_city_name\", Text.Trim, type text}, {\"consignee_state\", Text.Trim, type text}}),",
        "    #\"Duplicated Column\" = Table.DuplicateColumn(#\"Trimmed Text\", \"shipper_city_name\", \"shipper_city_name - Copy\"),",
        "    #\"Duplicated Column1\" = Table.DuplicateColumn(#\"Duplicated Column\", \"shipper_state\", \"shipper_state - Copy\"),",
        "    #\"Duplicated Column2\" = Table.DuplicateColumn(#\"Duplicated Column1\", \"consignee_city_name\", \"consignee_city_name - Copy\"),",
        "    #\"Duplicated Column3\" = Table.DuplicateColumn(#\"Duplicated Column2\", \"consignee_state\", \"consignee_state - Copy\"),",
        "    #\"Merged Columns\" = Table.CombineColumns(#\"Duplicated Column3\",{\"shipper_city_name - Copy\", \"shipper_state - Copy\"},Combiner.CombineTextByDelimiter(\", \", QuoteStyle.None),\"Shipper\"),",
        "    #\"Merged Columns1\" = Table.CombineColumns(#\"Merged Columns\",{\"consignee_city_name - Copy\", \"consignee_state - Copy\"},Combiner.CombineTextByDelimiter(\", \", QuoteStyle.None),\"Consignee\"),",
        "    //End Add Lane",
        "    #\"Merged Columns2\" = Table.CombineColumns(#\"Merged Columns1\",{\"Shipper\", \"Consignee\"},Combiner.CombineTextByDelimiter(\" - \", QuoteStyle.None),\"lane\")",
        "in",
        "    #\"Merged Columns2\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "pcs_orders",
      "lineageTag": "4f815021-5764-4bb3-8b46-a88a5802f2ae",
      "queryGroupId": "caaa80e5-0b68-49f7-8048-af185c067fb6",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Sql.Databases(\"blsql\"),",
        "    ExpData_A = Source{[Name=\"ExpData_A\"]}[Data],",
        "    dbo_tblLoads = ExpData_A{[Schema=\"dbo\",Item=\"tblLoads\"]}[Data],",
        "    #\"Filtered Rows\" = Table.SelectRows(dbo_tblLoads, each ([Status] = \"Arrived\")),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Filtered Rows\",{\"TotalSeats\", \"TotalTariff\", \"TotalAsWeight\", \"TotalSpace\", \"SealNo\", \"RateType\", \"RatingUnits\", \"RateDiscount\", \"DiscountAmt\", \"TotalAcc\", \"TotalCom\", \"Rate\", \"txtNotes\", \"SelectYN\", \"TripID\", \"MasterLoad\", \"TailgateYN\", \"UserName\", \"InvSelect\", \"InvUser\", \"InvoiceID\", \"InvoiceDate\", \"LoadClass\", \"OfficeCode\", \"IO\", \"Container\", \"Chassis\", \"Notify\", \"NotifyTime\", \"LFD\", \"RRP\", \"LE\", \"JobID\", \"ChassisPU\", \"ChassisDel\", \"BookingNo\", \"VesselName\", \"ShipperID\", \"ShipAddress\", \"ShipPhone\", \"ShipContact\", \"ShipRef\", \"ShipZone\", \"ConsigneeID\", \"ConsAddress\", \"ConsPhone\", \"ConsContact\", \"ConsRef\", \"ConsZone\", \"DropDate\", \"DropID\", \"DropName\", \"DropAddress\", \"DropCity\", \"DropSt\", \"DropZip\", \"XStopsYN\", \"RateMatrix\", \"RateMatrixAcc\", \"CarrierName\", \"UnitNumber\", \"TruckNumber\", \"TrailerNumber1\", \"TrailerNumber2\", \"ReqTemp\", \"Pallets\", \"PalletsPU\", \"PalletsPUDam\", \"PalletsPUVar\", \"PalletsDel\", \"PalletsDelDam\", \"PalletsDelVar\", \"PalletExchange\", \"HazardousYN\", \"FundsType\", \"DZone\", \"BillToName\", \"BillToRef\", \"LastTraceDate\", \"LastTracePos\", \"ETA\", \"FrtConYN\", \"VarianceYN\", \"SaveQuoteYN\", \"ReleaseNumber\", \"LdClearedYN\", \"EDI1\", \"EDI2\", \"EDI3\", \"EDI4\", \"EDI5\", \"AvailPU\", \"AvailDel\", \"ComValue\", \"BrokerageNotes\", \"PreBillYN\", \"MinRateYN\", \"LegTrackingYN\", \"WebPosted\", \"CarrierRate\", \"WebActiveLoad\", \"TotalComF\", \"TotalAccF\", \"TotalRevenueF\", \"DiscountAmtF\", \"RateF\", \"SatStatus\", \"ChargeVAT\", \"SteamshipLine\", \"PortOfDischarge\", \"ContainerTerm\", \"RejectYN\", \"RejectDate\", \"EquipmentX\", \"LFDX\", \"RateSource\", \"RateMatrixCom\", \"MileageSys\", \"MileageMeth\", \"DropRetDate\", \"DropRetTime\", \"CarrierComment\", \"SignedForBy\", \"ClosedBorderYN\", \"RBSentDT\", \"RBSentBy\", \"RBSentTo\", \"QuoteExpires\", \"SOID\", \"AgentBatchID\", \"EDIRefs\", \"DispSelect\", \"StartTrace\", \"EndTrace\", \"CarrierRateAcc\", \"CarrierRateAccName\", \"QRIDNo\", \"PendingYN\", \"ResponseType\", \"ResponseDT\", \"ResponseUser\", \"QRDocYN\", \"QREmail\", \"QRPhone\", \"QRContact\", \"QuoteID\", \"DelOptions\", \"TeamName\", \"ContainerTermLoc\", \"ChassisPULoc\", \"ChassisDelLoc\", \"IntOrigName\", \"IntOrigAddress\", \"IntOrigCity\", \"IntOrigSt\", \"IntOrigZip\", \"IntOrigZone\", \"IntOrigPhone\", \"IntOrigContact\", \"IntOrigRef\", \"IntDestName\", \"IntDestAddress\", \"IntDestCity\", \"IntDestSt\", \"IntDestZip\", \"IntDestZone\", \"IntDestPhone\", \"IntDestContact\", \"IntDestRef\", \"MacroPointOrderID\", \"DAT_AssetID\", \"WebPostedBy\", \"DropTrailerID1\", \"DropTrailerID2\", \"CarrierRev\", \"SatStatusDT\", \"CarrierPayType\", \"CarrierPayRate\", \"CarrierPayYN\", \"LastSendX6\", \"InvHoldYN\", \"SteamshipCode\", \"NextResID\", \"PreloadTrailerID1\", \"PreloadTrailerID2\", \"XTRemoveYN\", \"ContOwnerID\", \"ChasOwnerID\", \"RateWareYN\", \"LastX6Sent\", \"ContainerST\", \"ChassisST\", \"LastFTUpdate\", \"DistDateQ\", \"TimeRem\", \"LastSendFourKites\", \"TTYN\", \"Status\", \"LoadType\", \"DispUser\", \"DriverName\"}),",
        "    #\"Added Prefix\" = Table.TransformColumns(#\"Removed Columns\", {{\"LoadID\", each \"PCS\" & Text.From(_, \"en-US\"), type text}}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Added Prefix\",{{\"LoadID\", \"id\"}, {\"DateReceived\", \"order_entered_date\"}, {\"PickupDate\", \"shipper_sched_early_date\"}, {\"PickupTime\", \"shipper_sched_early_time\"}, {\"PUWindow\", \"shipper_sched_late_time\"}, {\"DeliveryDate\", \"consignee_sched_early_date\"}, {\"DeliveryTime\", \"consignee_sched_early_time\"}, {\"DelWindow\", \"consignee_sched_late_time\"}, {\"MilesBilled\", \"bill_distance\"}, {\"TotalPieces\", \"pieces\"}, {\"TotalWeight\", \"weight\"}, {\"TotalRevenue\", \"freight_charge\"}, {\"Equipment\", \"equipment_type_id\"}, {\"ShipName\", \"shipper_location_name\"}, {\"ShipCity\", \"shipper_city_name\"}, {\"ShipSt\", \"shipper_state\"}, {\"ShipZip\", \"shipper_zip_code\"}, {\"ConsName\", \"consignee_location_name\"}, {\"ConsCity\", \"consignee_city_name\"}, {\"ConsSt\", \"consignee_state\"}, {\"ConsZip\", \"consignee_zip_code\"}, {\"Salesperson\", \"salesperson_id\"}, {\"Commodity\", \"commodity\"}}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\",{{\"order_entered_date\", type date}, {\"shipper_sched_early_date\", type date}, {\"shipper_sched_early_time\", type time}, {\"shipper_sched_late_time\", type time}, {\"consignee_sched_early_date\", type date}, {\"consignee_sched_early_time\", type time}, {\"consignee_sched_late_time\", type time}, {\"freight_charge\", Currency.Type}, {\"salesperson_id\", type text}}),",
        "    #\"Merged Queries\" = Table.NestedJoin(#\"Changed Type\", {\"salesperson_id\"}, pcs_dispatchers, {\"EmpIDNo\"}, \"tblUserList\", JoinKind.LeftOuter),",
        "    #\"Expanded tblUserList\" = Table.ExpandTableColumn(#\"Merged Queries\", \"tblUserList\", {\"eMailAdd\"}, {\"tblUserList.eMailAdd\"}),",
        "    #\"Removed Columns1\" = Table.RemoveColumns(#\"Expanded tblUserList\",{\"salesperson_id\"}),",
        "    #\"Renamed Columns1\" = Table.RenameColumns(#\"Removed Columns1\",{{\"tblUserList.eMailAdd\", \"salesperson_id\"}}),",
        "    #\"Replaced Value\" = Table.ReplaceValue(#\"Renamed Columns1\",\"tcampbell@bridgelogisticsinc.com\",\"CAMPFAO1\",Replacer.ReplaceText,{\"salesperson_id\"}),",
        "    #\"Replaced Value1\" = Table.ReplaceValue(#\"Replaced Value\",\"BSOLORIA@BRIDGELOGISTICSINC.COM\",\"SOLOCLOH\",Replacer.ReplaceText,{\"salesperson_id\"}),",
        "    #\"Replaced Value2\" = Table.ReplaceValue(#\"Replaced Value1\",\"jmarot@bridgelogisticsinc.com\",\"MAROHAOH\",Replacer.ReplaceText,{\"salesperson_id\"}),",
        "    #\"Merged Queries1\" = Table.NestedJoin(#\"Replaced Value2\", {\"BillToID\"}, pcs_customers, {\"IDNo\"}, \"pcs_customers\", JoinKind.LeftOuter),",
        "    #\"Expanded pcs_customers\" = Table.ExpandTableColumn(#\"Merged Queries1\", \"pcs_customers\", {\"EntCode\"}, {\"pcs_customers.EntCode\"}),",
        "    #\"Trimmed Text\" = Table.TransformColumns(#\"Expanded pcs_customers\",{{\"pcs_customers.EntCode\", Text.Trim, type text}}),",
        "    //start merging entity codes for matching",
        "    #\"Replaced Value3\" = Table.ReplaceValue(#\"Trimmed Text\",\"V5978\",\"V6064\",Replacer.ReplaceText,{\"pcs_customers.EntCode\"}),",
        "    #\"Replaced Value4\" = Table.ReplaceValue(#\"Replaced Value3\",\"V37123\",\"V18661\",Replacer.ReplaceText,{\"pcs_customers.EntCode\"}),",
        "    #\"Replaced Value5\" = Table.ReplaceValue(#\"Replaced Value4\",\"V26458\",\"V18025\",Replacer.ReplaceText,{\"pcs_customers.EntCode\"}),",
        "    #\"Replaced Value6\" = Table.ReplaceValue(#\"Replaced Value5\",\"V24526\",\"V38482\",Replacer.ReplaceText,{\"pcs_customers.EntCode\"}),",
        "    #\"Replaced Value7\" = Table.ReplaceValue(#\"Replaced Value6\",\"V24303\",\"V20643\",Replacer.ReplaceText,{\"pcs_customers.EntCode\"}),",
        "    #\"Replaced Value8\" = Table.ReplaceValue(#\"Replaced Value7\",\"V18231\",\"V20643\",Replacer.ReplaceText,{\"pcs_customers.EntCode\"}),",
        "    #\"Replaced Value10\" = Table.ReplaceValue(#\"Replaced Value8\",\"V12320\",\"V6978\",Replacer.ReplaceText,{\"pcs_customers.EntCode\"}),",
        "    #\"Replaced Value12\" = Table.ReplaceValue(#\"Replaced Value10\",\"V10210\",\"V10208\",Replacer.ReplaceText,{\"pcs_customers.EntCode\"}),",
        "    #\"Replaced Value11\" = Table.ReplaceValue(#\"Replaced Value12\",\"v11634\",\"V7430\",Replacer.ReplaceText,{\"pcs_customers.EntCode\"}),",
        "    #\"Merged Queries2\" = Table.NestedJoin(#\"Replaced Value11\", {\"pcs_customers.EntCode\"}, custmers_pcs_sync, {\"prev_code\"}, \"customer\", JoinKind.LeftOuter),",
        "    #\"Replaced Value9\" = Table.ReplaceValue(#\"Merged Queries2\",\"V17061\",\"V11634\",Replacer.ReplaceText,{\"pcs_customers.EntCode\"}),",
        "    #\"Expanded customer\" = Table.ExpandTableColumn(#\"Replaced Value9\", \"customer\", {\"id\"}, {\"customer.id\"}),",
        "    #\"Renamed Columns2\" = Table.RenameColumns(#\"Expanded customer\",{{\"customer.id\", \"customer.id_old\"}}),",
        "    #\"Added Conditional Column\" = Table.AddColumn(#\"Renamed Columns2\", \"customer_id\", each if [pcs_customers.EntCode] = \"V11634\" then \"PARIDUIA\" else [customer.id_old]),",
        "    #\"Removed Columns2\" = Table.RemoveColumns(#\"Added Conditional Column\",{\"customer.id_old\", \"BillToID\", \"pcs_customers.EntCode\"}),",
        "    #\"Added Custom\" = Table.AddColumn(#\"Removed Columns2\", \"status\", each \"D\"),",
        "    #\"Inserted First Characters\" = Table.AddColumn(#\"Added Custom\", \"consignee_3_digit_zip_code\", each Text.Start([consignee_zip_code], 3), type text),",
        "    #\"Inserted First Characters1\" = Table.AddColumn(#\"Inserted First Characters\", \"shipper_3_digit_zip_code\", each Text.Start([shipper_zip_code], 3), type text),",
        "    //Start Add Lane",
        "    #\"Trimmed Text1\" = Table.TransformColumns(#\"Inserted First Characters1\",{{\"shipper_city_name\", Text.Trim, type text}, {\"shipper_state\", Text.Trim, type text}, {\"consignee_city_name\", Text.Trim, type text}, {\"consignee_state\", Text.Trim, type text}}),",
        "    #\"Duplicated Column\" = Table.DuplicateColumn(#\"Trimmed Text1\", \"shipper_city_name\", \"shipper_city_name - Copy\"),",
        "    #\"Duplicated Column1\" = Table.DuplicateColumn(#\"Duplicated Column\", \"shipper_state\", \"shipper_state - Copy\"),",
        "    #\"Duplicated Column2\" = Table.DuplicateColumn(#\"Duplicated Column1\", \"consignee_city_name\", \"consignee_city_name - Copy\"),",
        "    #\"Duplicated Column3\" = Table.DuplicateColumn(#\"Duplicated Column2\", \"consignee_state\", \"consignee_state - Copy\"),",
        "    #\"Merged Columns\" = Table.CombineColumns(#\"Duplicated Column3\",{\"shipper_city_name - Copy\", \"shipper_state - Copy\"},Combiner.CombineTextByDelimiter(\", \", QuoteStyle.None),\"Shipper\"),",
        "    #\"Merged Columns1\" = Table.CombineColumns(#\"Merged Columns\",{\"consignee_city_name - Copy\", \"consignee_state - Copy\"},Combiner.CombineTextByDelimiter(\", \", QuoteStyle.None),\"Consignee\"),",
        "    //End Add Lane",
        "    #\"Merged Columns2\" = Table.CombineColumns(#\"Merged Columns1\",{\"Shipper\", \"Consignee\"},Combiner.CombineTextByDelimiter(\" - \", QuoteStyle.None),\"lane\")",
        "in",
        "    #\"Merged Columns2\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "pcs_movements",
      "lineageTag": "56cf4560-8d4b-40d6-953a-3445982b331f",
      "queryGroupId": "caaa80e5-0b68-49f7-8048-af185c067fb6",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Sql.Databases(\"blsql\"),",
        "    ExpData_A = Source{[Name=\"ExpData_A\"]}[Data],",
        "    dbo_tblLoadDispatch = ExpData_A{[Schema=\"dbo\",Item=\"tblLoadDispatch\"]}[Data],",
        "    #\"Removed Columns\" = Table.RemoveColumns(dbo_tblLoadDispatch,{\"TripID\", \"UnitID\", \"UnitNumber\", \"DriverID\", \"CoDriverID\", \"CoDriverName\", \"TruckID\", \"TruckNumber\", \"TrailerID1\", \"TrailerNumber1\", \"TrailerID2\", \"TrailerNumber2\", \"CarrierID\", \"CarrierName\", \"PayCode\", \"PayType\", \"TotalPay\", \"EMI\", \"EMO\", \"EmptyRate\", \"RevShare\", \"PUCus\", \"PUZone\", \"DropDate\", \"DropCus\", \"DropName\", \"DropAddress\", \"DropCity\", \"DropState\", \"DropZip\", \"DropZone\", \"DropTimeIn\", \"DropTimeOut\", \"DelCus\", \"DelZone\", \"AccTimeIn\", \"AccTimeOut\", \"CoDriverPay\", \"BackupDate\", \"BackupRecYN\", \"BatchID\", \"SelectedYN\", \"txtNotes\", \"EntCode\", \"PayMatrix\", \"InputUser\", \"InputDate\", \"InputTime\", \"Activity_ctr_Cont\", \"Activity_ctr_Chassis\", \"LoadClass\", \"PayUnits\", \"CarrierRef\", \"CarrierContact\", \"LastAction\", \"ChassisNo\", \"AccSplitID\", \"ContainerNo\", \"LoadAccID\", \"PUAddress\", \"DelAddress\", \"PaySource\", \"MainDispID\", \"DropRetDate\", \"DropRetTime\", \"AgentBatchID\", \"FuelMatrixID\", \"OwnerID\", \"CurCode\", \"DriverPayF\", \"ActDateO\", \"ActTimeInO\", \"ActTimeOutO\", \"ActDateD\", \"ActTimeInD\", \"ActTimeOutD\", \"DispHours\", \"TrailerID3\", \"TrailerNumber3\", \"DelOptions\", \"PullOptionC\", \"PullOptionX\", \"DPLocC\", \"DPLocX\", \"DPDateC\", \"DPDateX\", \"DPTimeInC\", \"DPTimeOutC\", \"DPTimeInX\", \"DPTimeOutX\", \"ActDPDateC\", \"ActDPDateX\", \"ActDPTimeInC\", \"ActDPTimeOutC\", \"ActDPTimeInX\", \"ActDPTimeOutX\", \"LinkedOutbound\", \"DPContainer\", \"DPChassis\", \"EmptyPullYN\", \"ChassisPULoc\", \"ChassisPUDate\", \"ChassisPUTimeIn\", \"ChassisPUTimeOut\", \"ChassisDelLoc\", \"ChassisDelDate\", \"ChassisDelTimeIn\", \"ChassisDelTimeOut\", \"ActChassisPUDate\", \"ActChassisPUTimeIn\", \"ActChassisPUTimeOut\", \"ActChassisDelDate\", \"ActChassisDelTimeIn\", \"ActChassisDelTimeOut\", \"ChassisOption\", \"IntEmptyPayType\", \"LateReason\", \"EDIStatusCode\", \"EDIPostBy\", \"EDIPostDate\", \"IntEmptyPayMatrix\", \"PrevVersionYN\", \"MacroPointOrderID\", \"DropTrailerID1\", \"DropTrailerID2\", \"TrailerCharge\", \"AllowRejectYN\", \"PreloadTrailer1YN\", \"PreloadTrailer2YN\", \"AutoDispatchYN\", \"AutoSendSatYN\", \"DropTrailer1YN\", \"DropTrailer2YN\", \"RejectedDT\", \"StreetTurnYN\", \"IMLHRate\", \"IMFuelRate\", \"IMInsRate\", \"IMLHAmt\", \"IMFuelAmt\", \"IMInsAmt\", \"PUName\", \"PUCity\", \"PUState\", \"PUZip\", \"PUTimeIn\", \"PUTimeOut\", \"DelName\", \"DelCity\", \"DelState\", \"DelZip\", \"DelDate\", \"DelTimeIn\", \"DelTimeOut\", \"Status\", \"PUDate\", \"DispatchDate\", \"DispatchTime\", \"DriverPay\", \"DispatchCode\", \"DriverName\"}),",
        "    #\"Added Prefix\" = Table.TransformColumns(#\"Removed Columns\", {{\"LoadID\", each \"PCS\" & Text.From(_, \"en-US\"), type text}}),",
        "    #\"Added Prefix1\" = Table.TransformColumns(#\"Added Prefix\", {{\"IDNo\", each \"PCS\" & Text.From(_, \"en-US\"), type text}}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Added Prefix1\",{{\"LoadID\", \"order_id\"}, {\"IDNo\", \"id\"}, {\"PayRate\", \"override_pay_amt\"}, {\"Miles\", \"move_distance\"}}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\",{{\"override_pay_amt\", Currency.Type}}),",
        "    #\"Merged Queries\" = Table.NestedJoin(#\"Changed Type\", {\"order_id\"}, pcs_orders_dispatchers, {\"LoadID\"}, \"pcs_orders_dispatchers\", JoinKind.LeftOuter),",
        "    #\"Expanded pcs_orders_dispatchers\" = Table.ExpandTableColumn(#\"Merged Queries\", \"pcs_orders_dispatchers\", {\"DispUser\"}, {\"DispUser\"}),",
        "    #\"Renamed Columns1\" = Table.RenameColumns(#\"Expanded pcs_orders_dispatchers\",{{\"DispUser\", \"dispatcher_user_id\"}}),",
        "    #\"Added Custom\" = Table.AddColumn(#\"Renamed Columns1\", \"status\", each \"D\"),",
        "    #\"Trimmed Text\" = Table.TransformColumns(#\"Added Custom\",{{\"dispatcher_user_id\", Text.Trim, type text}}),",
        "    #\"Uppercased Text\" = Table.TransformColumns(#\"Trimmed Text\",{{\"dispatcher_user_id\", Text.Upper, type text}})",
        "in",
        "    #\"Uppercased Text\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "pcs_employees",
      "lineageTag": "39e8c686-36a5-4395-8f7d-7ba2923fe445",
      "queryGroupId": "caaa80e5-0b68-49f7-8048-af185c067fb6",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Sql.Databases(\"blsql\"),",
        "    ExpData_A = Source{[Name=\"ExpData_A\"]}[Data],",
        "    dbo_tblEntities = ExpData_A{[Schema=\"dbo\",Item=\"tblEntities\"]}[Data],",
        "    #\"Removed Other Columns\" = Table.SelectColumns(dbo_tblEntities,{\"EntCode\", \"IDNo\"})",
        "in",
        "    #\"Removed Other Columns\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "pcs_dispatchers",
      "lineageTag": "7263a1e3-ed95-495e-bb1f-ed2f6d3cddf4",
      "queryGroupId": "caaa80e5-0b68-49f7-8048-af185c067fb6",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Sql.Databases(\"blsql\"),",
        "    ExpData_A = Source{[Name=\"ExpData_A\"]}[Data],",
        "    dbo_tblUserList = ExpData_A{[Schema=\"dbo\",Item=\"tblUserList\"]}[Data],",
        "    #\"Removed Columns\" = Table.RemoveColumns(dbo_tblUserList,{\"UserPassword\", \"OffCode\", \"DefOff\", \"CatCode\", \"MsgInterval\", \"PollerYN\", \"NotifyCode\", \"LiveUpdateYN\", \"Registration\", \"AlertsA\", \"AlertsD\", \"AlertsM\", \"QCUserName\", \"QCPassword\", \"QCSubscriberID\", \"QCPollInterval\", \"ShowWelcomeYN\", \"DefChkPrt\", \"DefInvPrt\", \"DefBOLPrt\", \"SignPath\", \"DefDocPrt\", \"AgentYN\", \"AlertsCC\", \"MsgIntervalLoads\", \"MsgIntervalEntries\", \"RemoteYN\", \"BackgroundImg\", \"AutoRefreshScreensYN\", \"AutoRefreshReportsYN\", \"ReportStartRange\", \"ReportAllowInactivesYN\", \"DirectPhone\", \"DivCode\", \"DefDiv\", \"TeamName\", \"DefBOLStyle\", \"EmailServer\", \"EmailPassword\", \"EmailServerSSL\", \"EmailServerPort\", \"UseCompDefMailYN\", \"p2\", \"p3\", \"p4\", \"PWUpdate\", \"PWFailedAttempts\", \"TempPWIssued\", \"ITSIntegrationID\", \"DAT_UserName\", \"DAT_PW\", \"DAT_TokenPrimary\", \"DAT_TokenSecondary\", \"DAT_LastCall\", \"DisplayLargeFonts\", \"RestrictAdminYN\", \"DeptMgrYN\", \"SalespersonYN\", \"FBTokenID\", \"PowBI_OpYN\", \"PowBI_DispYN\", \"PowBI_FinYN\", \"CameraYN\", \"Cam_AccelYN\", \"Cam_TurnsYN\", \"Cam_ShockYN\", \"Cam_PanicYN\", \"Cam_BreaksYN\"}),",
        "    #\"Sorted Rows\" = Table.Sort(#\"Removed Columns\",{{\"EmpIDNo\", Order.Ascending}}),",
        "    #\"Merged Queries\" = Table.NestedJoin(#\"Sorted Rows\", {\"EmpIDNo\"}, pcs_employees, {\"IDNo\"}, \"PCS Employes\", JoinKind.LeftOuter),",
        "    #\"Expanded PCS Employes\" = Table.ExpandTableColumn(#\"Merged Queries\", \"PCS Employes\", {\"EntCode\"}, {\"EntCode\"}),",
        "    #\"Filtered Rows\" = Table.SelectRows(#\"Expanded PCS Employes\", each ([EntCode] <> null)),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Filtered Rows\",{{\"EmpIDNo\", type text}})",
        "in",
        "    #\"Changed Type\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "pcs_orders_dispatchers",
      "lineageTag": "eec84fe6-96ff-40d2-a66a-32cf38eb315b",
      "queryGroupId": "caaa80e5-0b68-49f7-8048-af185c067fb6",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Sql.Databases(\"blsql\"),",
        "    ExpData_A = Source{[Name=\"ExpData_A\"]}[Data],",
        "    dbo_tblLoads = ExpData_A{[Schema=\"dbo\",Item=\"tblLoads\"]}[Data],",
        "    #\"Filtered Rows\" = Table.SelectRows(dbo_tblLoads, each ([Status] = \"Arrived\")),",
        "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Filtered Rows\",{\"LoadID\", \"DispUser\"}),",
        "    #\"Added Prefix\" = Table.TransformColumns(#\"Removed Other Columns\", {{\"LoadID\", each \"PCS\" & Text.From(_, \"en-US\"), type text}})",
        "in",
        "    #\"Added Prefix\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "stop_historic",
      "lineageTag": "b3dd5e3a-6047-4487-aedf-02870170447d",
      "queryGroupId": "caaa80e5-0b68-49f7-8048-af185c067fb6",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Sql.Database(\"bl-appdb\", \"lme\"),",
        "    dbo_stop = Source{[Schema=\"dbo\",Item=\"stop\"]}[Data],",
        "    #\"Filtered Stops Pre RefreshCutOffDate\" = Table.SelectRows(dbo_stop, each [sched_arrive_early] < RefreshCutOffDate),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Filtered Stops Pre RefreshCutOffDate\",{\"company_id\", \"address2\", \"appointment_status_id\", \"appt_contact_name\", \"hub\", \"cases\", \"confirmed\", \"contact_name\", \"dist_from_prev\", \"dist_from_prev_um\", \"driver_load_unload\", \"edi_code\", \"edi_loc_code\", \"eta\", \"eta_distance\", \"eta_late\", \"eta_oor\", \"google_place_id\", \"inbound_status\", \"late_eta_colorcode\", \"late_route_status\", \"manifest_fgp_uid\", \"manifest_reg_uid\", \"move_dist_from_preassign\", \"move_dist_from_preassign_um\", \"move_dist_from_previous\", \"move_dist_from_previous_um\", \"operational_status\", \"orig_sched_early\", \"orig_sched_late\", \"pallets_dropped\", \"pallets_picked_up\", \"phone\", \"planned_arrival_time\", \"ponum\", \"prior_uncleared_stops\", \"projected_arrival\", \"rate_dist_from_previous\", \"rate_dist_from_previous_um\", \"refno\", \"requested_service\", \"seal\", \"service_date\", \"showas_address\", \"showas_address2\", \"showas_city_id\", \"showas_city_name\", \"showas_location_id\", \"showas_location_name\", \"showas_state\", \"showas_zip_code\", \"signed_for_name\", \"txl_uid\", \"volume\", \"volume_um\", \"weight\", \"weight_um\", \"ic_stop_id\", \"grouped_id\", \"payment_code_reviewed\", \"trimble_place_id\"}),",
        "    #\"Inserted actual_arrival_time\" = Table.AddColumn(#\"Removed Columns\", \"actual_arrival_time\", each DateTime.Time([actual_arrival]), type time),",
        "    #\"Inserted actual_departure_time\" = Table.AddColumn(#\"Inserted actual_arrival_time\", \"actual_departure_time\", each DateTime.Time([actual_departure]), type time),",
        "    #\"Inserted sched_arrive_early_time\" = Table.AddColumn(#\"Inserted actual_departure_time\", \"sched_arrive_early_time\", each DateTime.Time([sched_arrive_early]), type time),",
        "    #\"Inserted sched_arrive_late_time\" = Table.AddColumn(#\"Inserted sched_arrive_early_time\", \"sched_arrive_late_time\", each DateTime.Time([sched_arrive_late]), type time),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Inserted sched_arrive_late_time\",{{\"actual_arrival\", type date}, {\"actual_departure\", type date}, {\"sched_arrive_early\", type date}, {\"sched_arrive_late\", type date}})",
        "in",
        "    #\"Changed Type\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "users",
      "lineageTag": "b0d9ea90-2639-4ad1-97d0-43f2699756a9",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Sql.Database(\"bl-appdb\", \"lme\"),",
        "    dbo_users = Source{[Schema=\"dbo\",Item=\"users\"]}[Data],",
        "    #\"Filtered Rows\" = Table.SelectRows(dbo_users, each ([web_user_type] = \"U\")),",
        "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Filtered Rows\",{\"revenue_code_id\", \"id\"}),",
        "    #\"Uppercased Text\" = Table.TransformColumns(#\"Removed Other Columns\",{{\"id\", Text.Upper, type text}}),",
        "    #\"Trimmed Text\" = Table.TransformColumns(#\"Uppercased Text\",{{\"id\", Text.Trim, type text}}),",
        "    #\"Cleaned Text\" = Table.TransformColumns(#\"Trimmed Text\",{{\"id\", Text.Clean, type text}})",
        "in",
        "    #\"Cleaned Text\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "pay_schedule",
      "lineageTag": "443d23cd-1878-4ce2-b1f0-cb97d81400f1",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Excel.Workbook(Web.Contents(\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared%20Documents/02%20BL-Areas/bridge_iq/Data%20Sets/Commission%20Payroll%20Schedule.xlsx\"), null, true),",
        "    BasePlusCommissionNewStructure_Table = Source{[Item=\"BasePlusCommissionNewStructure\",Kind=\"Table\"]}[Data],",
        "    #\"Changed Type\" = Table.TransformColumnTypes(BasePlusCommissionNewStructure_Table,{{\"Pay Period\", Int64.Type}, {\"Commission Month\", type text}, {\"Pay Date\", type date}}),",
        "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Changed Type\",{{\"Commission Month\", type date}})",
        "in",
        "    #\"Changed Type1\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = Excel.Workbook(Web.Contents(\\\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared%20Documents/02%20BL-Areas/bridge_iq/Data%20Sets/Commission%20Payroll%20Schedule.xlsx\\\"), null, true),\\r\\n    BasePlusCommissionNewStructure_Table = Source{[Item=\\\"BasePlusCommissionNewStructure\\\",Kind=\\\"Table\\\"]}[Data],\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(BasePlusCommissionNewStructure_Table,{{\\\"Pay Period\\\", Int64.Type}, {\\\"Commission Month\\\", type text}, {\\\"Pay Date\\\", type date}}),\\r\\n    #\\\"Changed Type1\\\" = Table.TransformColumnTypes(#\\\"Changed Type\\\",{{\\\"Commission Month\\\", type date}})\\r\\nin\\r\\n    #\\\"Changed Type1\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "sop_issues",
      "lineageTag": "09e1a60e-cb2b-4eed-98f2-15161c3da2e7",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Excel.Workbook(Web.Contents(\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared%20Documents/02%20BL-Areas/bridge_iq/Data%20Sets/SOP%20Has%20Been%20Marked/SOP%20Has%20Been%20Marked.xlsx\"), null, true),",
        "    Sheet1_Sheet = Source{[Item=\"Sheet1\",Kind=\"Sheet\"]}[Data],",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Movement ID\", Int64.Type}, {\"SOP Type\", type text}, {\"Date_time\", type datetime}}),",
        "    #\"Inserted Time\" = Table.AddColumn(#\"Changed Type\", \"Time\", each DateTime.Time([Date_time]), type time),",
        "    #\"Extracted Date\" = Table.TransformColumns(#\"Inserted Time\",{{\"Date_time\", DateTime.Date, type date}}),",
        "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Extracted Date\",{{\"Movement ID\", type text}})",
        "in",
        "    #\"Changed Type1\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = Excel.Workbook(Web.Contents(\\\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared%20Documents/02%20BL-Areas/bridge_iq/Data%20Sets/SOP%20Has%20Been%20Marked/SOP%20Has%20Been%20Marked.xlsx\\\"), null, true),\\r\\n    Sheet1_Sheet = Source{[Item=\\\"Sheet1\\\",Kind=\\\"Sheet\\\"]}[Data],\\r\\n    #\\\"Promoted Headers\\\" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Promoted Headers\\\",{{\\\"Movement ID\\\", Int64.Type}, {\\\"SOP Type\\\", type text}, {\\\"Date_time\\\", type datetime}}),\\r\\n    #\\\"Inserted Time\\\" = Table.AddColumn(#\\\"Changed Type\\\", \\\"Time\\\", each DateTime.Time([Date_time]), type time),\\r\\n    #\\\"Extracted Date\\\" = Table.TransformColumns(#\\\"Inserted Time\\\",{{\\\"Date_time\\\", DateTime.Date, type date}}),\\r\\n    #\\\"Changed Type1\\\" = Table.TransformColumnTypes(#\\\"Extracted Date\\\",{{\\\"Movement ID\\\", type text}})\\r\\nin\\r\\n    #\\\"Changed Type1\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "behaviors",
      "lineageTag": "0efa026f-8530-438d-a169-afe186397b78",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = SharePoint.Files(\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam\", [ApiVersion = 15]),",
        "    #\"Filtered Rows\" = Table.SelectRows(Source, each Text.Contains([Folder Path], \"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared Documents/02 BL-Areas/bridge_iq/Data Sets/behaviors_api_files/\")),",
        "    #\"Filtered Hidden Files1\" = Table.SelectRows(#\"Filtered Rows\", each [Attributes]?[Hidden]? <> true),",
        "    #\"Invoke Custom Function1\" = Table.AddColumn(#\"Filtered Hidden Files1\", \"Transform File (3)\", each #\"Transform File (3)\"([Content])),",
        "    #\"Renamed Columns1\" = Table.RenameColumns(#\"Invoke Custom Function1\", {\"Name\", \"Source.Name\"}),",
        "    #\"Removed Other Columns1\" = Table.SelectColumns(#\"Renamed Columns1\", {\"Source.Name\", \"Transform File (3)\"}),",
        "    #\"Expanded Table Column1\" = Table.ExpandTableColumn(#\"Removed Other Columns1\", \"Transform File (3)\", Table.ColumnNames(#\"Transform File (3)\"(#\"Sample File (3)\"))),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Table Column1\",{{\"Source.Name\", type text}, {\"id\", Int64.Type}, {\"date\", type datetime}, {\"author_id\", type any}, {\"mail_activity_type_id\", type text}, {\"model\", type text}, {\"res_id\", Int64.Type}}),",
        "    #\"Filtered Rows1\" = Table.SelectRows(#\"Changed Type\", each true),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Filtered Rows1\",{\"Source.Name\"}),",
        "    #\"Extracted Text Between Delimiters\" = Table.TransformColumns(#\"Removed Columns\", {{\"author_id\", each Text.BetweenDelimiters(_, \"'\", \"'\"), type text}, {\"mail_activity_type_id\", each Text.BetweenDelimiters(_, \"'\", \"'\"), type text}}),",
        "    #\"Replaced Errors\" = Table.ReplaceErrorValues(#\"Extracted Text Between Delimiters\", {{\"author_id\", null}}),",
        "    #\"Filtered Rows2\" = Table.SelectRows(#\"Replaced Errors\", each ([model] <> \"gamification.badge.user\") and ([author_id] <> null and [author_id] <> \"OdooBot\" and [author_id] <> \"Portal User Template\")),",
        "    #\"Inserted Time\" = Table.AddColumn(#\"Filtered Rows2\", \"Time\", each DateTime.Time([date]), type time),",
        "    #\"Renamed Columns2\" = Table.RenameColumns(#\"Inserted Time\",{{\"date\", \"Behavior Date\"}, {\"Time\", \"Behavior Time\"}}),",
        "    #\"Filtered Rows3\" = Table.SelectRows(#\"Renamed Columns2\", each [Behavior Date] >= RefreshCutOffDate),",
        "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Filtered Rows3\",{{\"Behavior Date\", type date}}),",
        "    #\"Inserted Start of Month\" = Table.AddColumn(#\"Changed Type1\", \"Start of Month\", each Date.StartOfMonth([Behavior Date]), type date),",
        "    #\"Appended Query\" = Table.Combine({#\"Inserted Start of Month\", historic_behaviors})",
        "in",
        "    #\"Appended Query\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = SharePoint.Files(\\\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam\\\", [ApiVersion = 15]),\\r\\n    #\\\"Filtered Rows\\\" = Table.SelectRows(Source, each Text.Contains([Folder Path], \\\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared Documents/02 BL-Areas/bridge_iq/Data Sets/behaviors_api_files/\\\")),\\r\\n    #\\\"Filtered Hidden Files1\\\" = Table.SelectRows(#\\\"Filtered Rows\\\", each [Attributes]?[Hidden]? <> true),\\r\\n    #\\\"Invoke Custom Function1\\\" = Table.AddColumn(#\\\"Filtered Hidden Files1\\\", \\\"Transform File (3)\\\", each #\\\"Transform File (3)\\\"([Content])),\\r\\n    #\\\"Renamed Columns1\\\" = Table.RenameColumns(#\\\"Invoke Custom Function1\\\", {\\\"Name\\\", \\\"Source.Name\\\"}),\\r\\n    #\\\"Removed Other Columns1\\\" = Table.SelectColumns(#\\\"Renamed Columns1\\\", {\\\"Source.Name\\\", \\\"Transform File (3)\\\"}),\\r\\n    #\\\"Expanded Table Column1\\\" = Table.ExpandTableColumn(#\\\"Removed Other Columns1\\\", \\\"Transform File (3)\\\", Table.ColumnNames(#\\\"Transform File (3)\\\"(#\\\"Sample File (3)\\\"))),\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Expanded Table Column1\\\",{{\\\"Source.Name\\\", type text}, {\\\"id\\\", Int64.Type}, {\\\"date\\\", type datetime}, {\\\"author_id\\\", type any}, {\\\"mail_activity_type_id\\\", type text}, {\\\"model\\\", type text}, {\\\"res_id\\\", Int64.Type}}),\\r\\n    #\\\"Filtered Rows1\\\" = Table.SelectRows(#\\\"Changed Type\\\", each true),\\r\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(#\\\"Filtered Rows1\\\",{\\\"Source.Name\\\"}),\\r\\n    #\\\"Extracted Text Between Delimiters\\\" = Table.TransformColumns(#\\\"Removed Columns\\\", {{\\\"author_id\\\", each Text.BetweenDelimiters(_, \\\"'\\\", \\\"'\\\"), type text}, {\\\"mail_activity_type_id\\\", each Text.BetweenDelimiters(_, \\\"'\\\", \\\"'\\\"), type text}}),\\r\\n    #\\\"Replaced Errors\\\" = Table.ReplaceErrorValues(#\\\"Extracted Text Between Delimiters\\\", {{\\\"author_id\\\", null}}),\\r\\n    #\\\"Filtered Rows2\\\" = Table.SelectRows(#\\\"Replaced Errors\\\", each ([model] <> \\\"gamification.badge.user\\\") and ([author_id] <> null and [author_id] <> \\\"OdooBot\\\" and [author_id] <> \\\"Portal User Template\\\")),\\r\\n    #\\\"Inserted Time\\\" = Table.AddColumn(#\\\"Filtered Rows2\\\", \\\"Time\\\", each DateTime.Time([date]), type time),\\r\\n    #\\\"Renamed Columns2\\\" = Table.RenameColumns(#\\\"Inserted Time\\\",{{\\\"date\\\", \\\"Behavior Date\\\"}, {\\\"Time\\\", \\\"Behavior Time\\\"}}),\\r\\n    #\\\"Filtered Rows3\\\" = Table.SelectRows(#\\\"Renamed Columns2\\\", each [Behavior Date] >= RefreshCutOffDate),\\r\\n    #\\\"Changed Type1\\\" = Table.TransformColumnTypes(#\\\"Filtered Rows3\\\",{{\\\"Behavior Date\\\", type date}}),\\r\\n    #\\\"Inserted Start of Month\\\" = Table.AddColumn(#\\\"Changed Type1\\\", \\\"Start of Month\\\", each Date.StartOfMonth([Behavior Date]), type date),\\r\\n    #\\\"Appended Query\\\" = Table.Combine({#\\\"Inserted Start of Month\\\", historic_behaviors})\\r\\nin\\r\\n    #\\\"Appended Query\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "behavior_goals",
      "lineageTag": "e52fd5f3-a7fc-49f9-9be5-ddf09795ef92",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Excel.Workbook(Web.Contents(\"https://bridgelogisticsinc.sharepoint.com/sites/SalesGoals/Shared%20Documents/Sales%20Goals.xlsx\"), null, true),",
        "    BehaviorGoals_Sheet = Source{[Item=\"BehaviorGoals\",Kind=\"Sheet\"]}[Data],",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(BehaviorGoals_Sheet, [PromoteAllScalars=true]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Salesperson\", type text}, {\"Month\", type date}, {\"Behavior\", type text}, {\"Goal\", Int64.Type}}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"Behavior\", \"BehaviorID\"}}),",
        "    #\"Filtered Rows\" = Table.SelectRows(#\"Renamed Columns\", each true)",
        "in",
        "    #\"Filtered Rows\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = Excel.Workbook(Web.Contents(\\\"https://bridgelogisticsinc.sharepoint.com/sites/SalesGoals/Shared%20Documents/Sales%20Goals.xlsx\\\"), null, true),\\r\\n    BehaviorGoals_Sheet = Source{[Item=\\\"BehaviorGoals\\\",Kind=\\\"Sheet\\\"]}[Data],\\r\\n    #\\\"Promoted Headers\\\" = Table.PromoteHeaders(BehaviorGoals_Sheet, [PromoteAllScalars=true]),\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Promoted Headers\\\",{{\\\"Salesperson\\\", type text}, {\\\"Month\\\", type date}, {\\\"Behavior\\\", type text}, {\\\"Goal\\\", Int64.Type}}),\\r\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Changed Type\\\",{{\\\"Behavior\\\", \\\"BehaviorID\\\"}}),\\r\\n    #\\\"Filtered Rows\\\" = Table.SelectRows(#\\\"Renamed Columns\\\", each true)\\r\\nin\\r\\n    #\\\"Filtered Rows\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "margin_load_count_goals",
      "lineageTag": "9b67fda5-3b12-423b-9032-0dd4db6d6344",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Excel.Workbook(Web.Contents(\"https://bridgelogisticsinc.sharepoint.com/sites/SalesGoals/Shared%20Documents/Sales%20Goals.xlsx\"), null, true),",
        "    MarginLoadCountGoals_Sheet = Source{[Item=\"MarginLoadCountGoals\",Kind=\"Sheet\"]}[Data],",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(MarginLoadCountGoals_Sheet, [PromoteAllScalars=true]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"Salesperson Name\", type text}, {\"Month\", type date}, {\"Margin Goal\", Int64.Type}, {\"Load Count Goal\", Int64.Type}}),",
        "    #\"Uppercased Text\" = Table.TransformColumns(#\"Changed Type\",{{\"Salesperson Name\", Text.Upper, type text}}),",
        "    #\"Uppercased Text1\" = Table.TransformColumns(#\"Uppercased Text\",{{\"Salesperson Name\", Text.Upper, type text}}),",
        "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Uppercased Text1\",{{\"Margin Goal\", Currency.Type}, {\"Margin Per Order Goal\", Currency.Type}, {\"Margin % Goal\", Percentage.Type}})",
        "in",
        "    #\"Changed Type1\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = Excel.Workbook(Web.Contents(\\\"https://bridgelogisticsinc.sharepoint.com/sites/SalesGoals/Shared%20Documents/Sales%20Goals.xlsx\\\"), null, true),\\r\\n    MarginLoadCountGoals_Sheet = Source{[Item=\\\"MarginLoadCountGoals\\\",Kind=\\\"Sheet\\\"]}[Data],\\r\\n    #\\\"Promoted Headers\\\" = Table.PromoteHeaders(MarginLoadCountGoals_Sheet, [PromoteAllScalars=true]),\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Promoted Headers\\\",{{\\\"Salesperson Name\\\", type text}, {\\\"Month\\\", type date}, {\\\"Margin Goal\\\", Int64.Type}, {\\\"Load Count Goal\\\", Int64.Type}}),\\r\\n    #\\\"Uppercased Text\\\" = Table.TransformColumns(#\\\"Changed Type\\\",{{\\\"Salesperson Name\\\", Text.Upper, type text}}),\\r\\n    #\\\"Uppercased Text1\\\" = Table.TransformColumns(#\\\"Uppercased Text\\\",{{\\\"Salesperson Name\\\", Text.Upper, type text}}),\\r\\n    #\\\"Changed Type1\\\" = Table.TransformColumnTypes(#\\\"Uppercased Text1\\\",{{\\\"Margin Goal\\\", Currency.Type}, {\\\"Margin Per Order Goal\\\", Currency.Type}, {\\\"Margin % Goal\\\", Percentage.Type}})\\r\\nin\\r\\n    #\\\"Changed Type1\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "overdue_check_calls",
      "lineageTag": "73748e9d-e1aa-4e29-8ff2-44f74b188960",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Excel.Workbook(Web.Contents(\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared%20Documents/02%20BL-Areas/bridge_iq/Data%20Sets/Overdue%20Check%20Call/Overdue%20Check%20Calls.xlsx\"), null, true),",
        "    overdue_check_calls_Table = Source{[Item=\"overdue_check_calls\",Kind=\"Table\"]}[Data],",
        "    #\"Changed Type\" = Table.TransformColumnTypes(overdue_check_calls_Table,{{\"Movement ID\", type text}, {\"Check Call Time\", type datetime}, {\"Status\", type any}}),",
        "    #\"Removed Errors\" = Table.RemoveRowsWithErrors(#\"Changed Type\", {\"Check Call Time\"}),",
        "    #\"Inserted Time\" = Table.AddColumn(#\"Removed Errors\", \"Time\", each DateTime.Time([Check Call Time]), type time),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Inserted Time\",{{\"Check Call Time\", \"Check Call Date\"}, {\"Time\", \"Check Call Time\"}}),",
        "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Renamed Columns\",{{\"Check Call Date\", type date}}),",
        "    #\"Calculated Start of Hour\" = Table.TransformColumns(#\"Changed Type1\",{{\"Check Call Time\", Time.StartOfHour, type time}})",
        "in",
        "    #\"Calculated Start of Hour\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = Excel.Workbook(Web.Contents(\\\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared%20Documents/02%20BL-Areas/bridge_iq/Data%20Sets/Overdue%20Check%20Call/Overdue%20Check%20Calls.xlsx\\\"), null, true),\\r\\n    overdue_check_calls_Table = Source{[Item=\\\"overdue_check_calls\\\",Kind=\\\"Table\\\"]}[Data],\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(overdue_check_calls_Table,{{\\\"Movement ID\\\", type text}, {\\\"Check Call Time\\\", type datetime}, {\\\"Status\\\", type any}}),\\r\\n    #\\\"Removed Errors\\\" = Table.RemoveRowsWithErrors(#\\\"Changed Type\\\", {\\\"Check Call Time\\\"}),\\r\\n    #\\\"Inserted Time\\\" = Table.AddColumn(#\\\"Removed Errors\\\", \\\"Time\\\", each DateTime.Time([Check Call Time]), type time),\\r\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Inserted Time\\\",{{\\\"Check Call Time\\\", \\\"Check Call Date\\\"}, {\\\"Time\\\", \\\"Check Call Time\\\"}}),\\r\\n    #\\\"Changed Type1\\\" = Table.TransformColumnTypes(#\\\"Renamed Columns\\\",{{\\\"Check Call Date\\\", type date}}),\\r\\n    #\\\"Calculated Start of Hour\\\" = Table.TransformColumns(#\\\"Changed Type1\\\",{{\\\"Check Call Time\\\", Time.StartOfHour, type time}})\\r\\nin\\r\\n    #\\\"Calculated Start of Hour\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "dnc",
      "lineageTag": "404f9e09-a9e5-41cf-8435-ee73acb35e66",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Excel.Workbook(Web.Contents(\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared%20Documents/02%20BL-Areas/bridge_iq/Data%20Sets/DNC/DNC.xlsx\"), null, true),",
        "    dnc_Table = Source{[Item=\"dnc\",Kind=\"Table\"]}[Data],",
        "    #\"Changed Type\" = Table.TransformColumnTypes(dnc_Table,{{\"DNC\", type text}}),",
        "    #\"Removed Duplicates\" = Table.Distinct(#\"Changed Type\")",
        "in",
        "    #\"Removed Duplicates\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "stop",
      "lineageTag": "64234da3-1a77-453d-a2c0-eefc98a8f918",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Sql.Database(\"bl-appdb\", \"lme\"),",
        "    dbo_stop = Source{[Schema=\"dbo\",Item=\"stop\"]}[Data],",
        "    #\"Filtered Stops Post RefresshCutOffDate\" = Table.SelectRows(dbo_stop, each [sched_arrive_early] >= RefreshCutOffDate),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Filtered Stops Post RefresshCutOffDate\",{\"company_id\", \"address2\", \"appointment_status_id\", \"appt_contact_name\", \"hub\", \"cases\", \"confirmed\", \"contact_name\", \"dist_from_prev\", \"dist_from_prev_um\", \"driver_load_unload\", \"edi_code\", \"edi_loc_code\", \"eta\", \"eta_distance\", \"eta_late\", \"eta_oor\", \"google_place_id\", \"inbound_status\", \"late_eta_colorcode\", \"late_route_status\", \"manifest_fgp_uid\", \"manifest_reg_uid\", \"move_dist_from_preassign\", \"move_dist_from_preassign_um\", \"move_dist_from_previous\", \"move_dist_from_previous_um\", \"operational_status\", \"orig_sched_early\", \"orig_sched_late\", \"pallets_dropped\", \"pallets_picked_up\", \"phone\", \"planned_arrival_time\", \"ponum\", \"prior_uncleared_stops\", \"projected_arrival\", \"rate_dist_from_previous\", \"rate_dist_from_previous_um\", \"refno\", \"requested_service\", \"seal\", \"service_date\", \"showas_address\", \"showas_address2\", \"showas_city_id\", \"showas_city_name\", \"showas_location_id\", \"showas_location_name\", \"showas_state\", \"showas_zip_code\", \"signed_for_name\", \"txl_uid\", \"volume\", \"volume_um\", \"weight\", \"weight_um\", \"ic_stop_id\", \"grouped_id\", \"payment_code_reviewed\", \"trimble_place_id\"}),",
        "    #\"Inserted actual_arrival_time\" = Table.AddColumn(#\"Removed Columns\", \"actual_arrival_time\", each DateTime.Time([actual_arrival]), type time),",
        "    #\"Inserted actual_departure_time\" = Table.AddColumn(#\"Inserted actual_arrival_time\", \"actual_departure_time\", each DateTime.Time([actual_departure]), type time),",
        "    #\"Inserted sched_arrive_early_time\" = Table.AddColumn(#\"Inserted actual_departure_time\", \"sched_arrive_early_time\", each DateTime.Time([sched_arrive_early]), type time),",
        "    #\"Inserted sched_arrive_late_time\" = Table.AddColumn(#\"Inserted sched_arrive_early_time\", \"sched_arrive_late_time\", each DateTime.Time([sched_arrive_late]), type time),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Inserted sched_arrive_late_time\",{{\"actual_arrival\", type date}, {\"actual_departure\", type date}, {\"sched_arrive_early\", type date}, {\"sched_arrive_late\", type date}}),",
        "    #\"Appended Query\" = Table.Combine({#\"Changed Type\", stop_historic})",
        "in",
        "    #\"Appended Query\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = Sql.Database(\\\"bl-appdb\\\", \\\"lme\\\"),\\r\\n    dbo_stop = Source{[Schema=\\\"dbo\\\",Item=\\\"stop\\\"]}[Data],\\r\\n    #\\\"Filtered Stops Post RefresshCutOffDate\\\" = Table.SelectRows(dbo_stop, each [sched_arrive_early] >= RefreshCutOffDate),\\r\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(#\\\"Filtered Stops Post RefresshCutOffDate\\\",{\\\"company_id\\\", \\\"address2\\\", \\\"appointment_status_id\\\", \\\"appt_contact_name\\\", \\\"hub\\\", \\\"cases\\\", \\\"confirmed\\\", \\\"contact_name\\\", \\\"dist_from_prev\\\", \\\"dist_from_prev_um\\\", \\\"driver_load_unload\\\", \\\"edi_code\\\", \\\"edi_loc_code\\\", \\\"eta\\\", \\\"eta_distance\\\", \\\"eta_late\\\", \\\"eta_oor\\\", \\\"google_place_id\\\", \\\"inbound_status\\\", \\\"late_eta_colorcode\\\", \\\"late_route_status\\\", \\\"manifest_fgp_uid\\\", \\\"manifest_reg_uid\\\", \\\"move_dist_from_preassign\\\", \\\"move_dist_from_preassign_um\\\", \\\"move_dist_from_previous\\\", \\\"move_dist_from_previous_um\\\", \\\"operational_status\\\", \\\"orig_sched_early\\\", \\\"orig_sched_late\\\", \\\"pallets_dropped\\\", \\\"pallets_picked_up\\\", \\\"phone\\\", \\\"planned_arrival_time\\\", \\\"ponum\\\", \\\"prior_uncleared_stops\\\", \\\"projected_arrival\\\", \\\"rate_dist_from_previous\\\", \\\"rate_dist_from_previous_um\\\", \\\"refno\\\", \\\"requested_service\\\", \\\"seal\\\", \\\"service_date\\\", \\\"showas_address\\\", \\\"showas_address2\\\", \\\"showas_city_id\\\", \\\"showas_city_name\\\", \\\"showas_location_id\\\", \\\"showas_location_name\\\", \\\"showas_state\\\", \\\"showas_zip_code\\\", \\\"signed_for_name\\\", \\\"txl_uid\\\", \\\"volume\\\", \\\"volume_um\\\", \\\"weight\\\", \\\"weight_um\\\", \\\"ic_stop_id\\\", \\\"grouped_id\\\", \\\"payment_code_reviewed\\\", \\\"trimble_place_id\\\"}),\\r\\n    #\\\"Inserted actual_arrival_time\\\" = Table.AddColumn(#\\\"Removed Columns\\\", \\\"actual_arrival_time\\\", each DateTime.Time([actual_arrival]), type time),\\r\\n    #\\\"Inserted actual_departure_time\\\" = Table.AddColumn(#\\\"Inserted actual_arrival_time\\\", \\\"actual_departure_time\\\", each DateTime.Time([actual_departure]), type time),\\r\\n    #\\\"Inserted sched_arrive_early_time\\\" = Table.AddColumn(#\\\"Inserted actual_departure_time\\\", \\\"sched_arrive_early_time\\\", each DateTime.Time([sched_arrive_early]), type time),\\r\\n    #\\\"Inserted sched_arrive_late_time\\\" = Table.AddColumn(#\\\"Inserted sched_arrive_early_time\\\", \\\"sched_arrive_late_time\\\", each DateTime.Time([sched_arrive_late]), type time),\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Inserted sched_arrive_late_time\\\",{{\\\"actual_arrival\\\", type date}, {\\\"actual_departure\\\", type date}, {\\\"sched_arrive_early\\\", type date}, {\\\"sched_arrive_late\\\", type date}}),\\r\\n    #\\\"Appended Query\\\" = Table.Combine({#\\\"Changed Type\\\", stop_historic})\\r\\nin\\r\\n    #\\\"Appended Query\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "rev_codes",
      "lineageTag": "3cdc5a80-c6b4-41b3-9dbd-2c2e43274b14",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Excel.Workbook(Web.Contents(\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared%20Documents/02%20BL-Areas/bridge_iq/Data%20Sets/Teams.xlsx\"), null, true),",
        "    rev_codes_Table = Source{[Item=\"rev_codes\",Kind=\"Table\"]}[Data],",
        "    #\"Changed Type\" = Table.TransformColumnTypes(rev_codes_Table,{{\"rev_code_id\", Int64.Type}, {\"account_rep\", type text}, {\"wolf_pack\", type text}})",
        "in",
        "    #\"Changed Type\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = Excel.Workbook(Web.Contents(\\\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared%20Documents/02%20BL-Areas/bridge_iq/Data%20Sets/Teams.xlsx\\\"), null, true),\\r\\n    rev_codes_Table = Source{[Item=\\\"rev_codes\\\",Kind=\\\"Table\\\"]}[Data],\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(rev_codes_Table,{{\\\"rev_code_id\\\", Int64.Type}, {\\\"account_rep\\\", type text}, {\\\"wolf_pack\\\", type text}})\\r\\nin\\r\\n    #\\\"Changed Type\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "customer_margin_goal",
      "lineageTag": "0f9a6602-f51b-4faf-8f34-4c900a783ae6",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Excel.Workbook(Web.Contents(\"https://bridgelogisticsinc.sharepoint.com/sites/SalesGoals/Shared%20Documents/Sales%20Goals.xlsx\"), null, true),",
        "    customer_margin_goal_Table = Source{[Item=\"customer_margin_goal\",Kind=\"Table\"]}[Data],",
        "    #\"Changed Type\" = Table.TransformColumnTypes(customer_margin_goal_Table,{{\"Customer\", type text}, {\"Salesperson\", type text}, {\"Month\", type date}, {\"Margin Goal\", Int64.Type}, {\"Margin % Goal\", type number}}),",
        "    #\"Split Column by Delimiter\" = Table.SplitColumn(#\"Changed Type\", \"Customer\", Splitter.SplitTextByEachDelimiter({\":\"}, QuoteStyle.Csv, false), {\"Customer.1\", \"Customer.2\"}),",
        "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Split Column by Delimiter\",{{\"Customer.1\", type text}, {\"Customer.2\", type text}}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type1\",{{\"Customer.1\", \"Customer Name\"}, {\"Customer.2\", \"Customer Code\"}})",
        "in",
        "    #\"Renamed Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = Excel.Workbook(Web.Contents(\\\"https://bridgelogisticsinc.sharepoint.com/sites/SalesGoals/Shared%20Documents/Sales%20Goals.xlsx\\\"), null, true),\\r\\n    customer_margin_goal_Table = Source{[Item=\\\"customer_margin_goal\\\",Kind=\\\"Table\\\"]}[Data],\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(customer_margin_goal_Table,{{\\\"Customer\\\", type text}, {\\\"Salesperson\\\", type text}, {\\\"Month\\\", type date}, {\\\"Margin Goal\\\", Int64.Type}, {\\\"Margin % Goal\\\", type number}}),\\r\\n    #\\\"Split Column by Delimiter\\\" = Table.SplitColumn(#\\\"Changed Type\\\", \\\"Customer\\\", Splitter.SplitTextByEachDelimiter({\\\":\\\"}, QuoteStyle.Csv, false), {\\\"Customer.1\\\", \\\"Customer.2\\\"}),\\r\\n    #\\\"Changed Type1\\\" = Table.TransformColumnTypes(#\\\"Split Column by Delimiter\\\",{{\\\"Customer.1\\\", type text}, {\\\"Customer.2\\\", type text}}),\\r\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Changed Type1\\\",{{\\\"Customer.1\\\", \\\"Customer Name\\\"}, {\\\"Customer.2\\\", \\\"Customer Code\\\"}})\\r\\nin\\r\\n    #\\\"Renamed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "customer",
      "lineageTag": "ac556894-2d76-4b17-a7fb-97f07f433a0e",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Sql.Database(\"bl-appdb\", \"lme\"),",
        "    dbo_customer = Source{[Schema=\"dbo\",Item=\"customer\"]}[Data],",
        "    #\"Removed Columns\" = Table.RemoveColumns(dbo_customer,{\"company_id\", \"activity_count\", \"activity_start_date\", \"add_empty_distance_occ\", \"add_finance_charge\", \"address2\", \"allow_inc_in_frt\", \"auto_rate\", \"available_template\", \"average_bill\", \"average_bill_c\", \"average_bill_d\", \"average_bill_n\", \"average_bill_r\", \"balance\", \"balance_c\", \"balance_d\", \"balance_n\", \"balance_r\", \"benchmark_ctg_uid\", \"benchmark_tar_uid\", \"bill_format_flag\", \"bill_template\", \"bill_transfer_when\", \"billed_loads\", \"blanket_buy_tariff_id\", \"blanket_sell_tariff_id\", \"bl_logo\", \"bl_logo_name\", \"bridge_id\", \"brokerage_filter\", \"business_hours\", \"business_number\", \"buy_tariff_id\", \"category\", \"cert_of_ins_date\", \"charge_detention\", \"chassis_chargeby\", \"chassis_freedays\", \"chassis_rate\", \"chassis_rate_c\", \"chassis_rate_d\", \"chassis_rate_n\", \"chassis_rate_r\", \"coll_thresh_pd1\", \"coll_thresh_pd1_c\", \"coll_thresh_pd1_d\", \"coll_thresh_pd1_n\", \"coll_thresh_pd1_r\", \"coll_thresh_pd2\", \"coll_thresh_pd2_c\", \"coll_thresh_pd2_d\", \"coll_thresh_pd2_n\", \"coll_thresh_pd2_r\", \"coll_thresh_pd3\", \"coll_thresh_pd3_c\", \"coll_thresh_pd3_d\", \"coll_thresh_pd3_n\", \"coll_thresh_pd3_r\", \"coll_thresh_pd4\", \"coll_thresh_pd4_c\", \"coll_thresh_pd4_d\", \"coll_thresh_pd4_n\", \"coll_thresh_pd4_r\", \"collections_id\", \"collections_ok\", \"confidence_level\", \"container_chargeby\", \"container_freedays\", \"container_rate\", \"container_rate_c\", \"container_rate_d\", \"container_rate_n\", \"container_rate_r\", \"contract_cbc\", \"contract_ccc\", \"contract_gbc\", \"contract_gcc\", \"contract_sbc\", \"contract_scc\", \"controlling_carrier_code\", \"conversion_date\", \"cost_ctg_uid\", \"cost_tar_uid\", \"covered_template\", \"cp_logo\", \"cp_logo_name\", \"credit_application\", \"credit_check_date\", \"credit_limit_c\", \"credit_limit_d\", \"credit_limit_n\", \"credit_limit_r\", \"credit_warning_pct\", \"ctg_uid\", \"currency_type\", \"cust_stmt_template\", \"d_and_b_date\", \"days_between_calls\", \"deadhead_target\", \"ded_last_fixed_cost_billdt\", \"dedicated_cycle\", \"dedicated_revenue_code_id\", \"dedicated_seg_alloc_code\", \"dedicated_start_day\", \"dedicated_template\", \"def_rate_confirm_temp\", \"delivered_template\", \"departure_date_at\", \"distance_method\", \"distance_profile\", \"distance_source\", \"distance_type\", \"driver_load\", \"empty_distance_charge_id\", \"empty_distance_rate\", \"enable_notifications\", \"enforce_dep_dates\", \"excise_taxable\", \"expected_close\", \"extend_rates\", \"factor_percent\", \"factor_receivables\", \"factoring_id\", \"fak_profile_id\", \"fourkites_customer_id\", \"fuel_amount\", \"fuel_base_price\", \"fuel_credit\", \"fuel_method\", \"fuel_percent\", \"fuel_price_region\", \"fuel_surcharge_id\", \"fuel_surchg_enddt\", \"fuel_surchg_strtdt\", \"fuel_variance\", \"global_detention\", \"google_place_id\", \"gp_exclude\", \"gp_exported\", \"grace_period\", \"high_balance\", \"high_balance_c\", \"high_balance_d\", \"high_balance_n\", \"high_balance_r\", \"include_by_date\", \"include_empty_distance\", \"include_fuel_surcharge\", \"include_split_point\", \"is_consignee\", \"is_distribution_center\", \"is_drop_yard\", \"is_geocoded\", \"is_pallets_required\", \"is_shipper\", \"is_trailer_pool_required\", \"jaguar_id\", \"last_bill_date\", \"last_fin_charge_dt\", \"last_pay_date\", \"last_ship_date\", \"location_id\", \"macropoint_requestor_id\", \"main_phone\", \"manual_exchange\", \"mark_plan_id\", \"max_pay_percent\", \"misc_bill_template\", \"monthly_order_goal\", \"motor_carrier_id\", \"next_call_date\", \"next_rec_call\", \"nxt_action_code_id\", \"nxt_action_date\", \"operations_user\", \"order_count\", \"order_detail_at\", \"order_start_date\", \"p44_profile_id\", \"paid_loads\", \"pay_days_date\", \"pay_days_orders\", \"payee_id\", \"pd0_alert\", \"pd1_np_auto\", \"pd1_sp_auto\", \"pd1_sp_thresh\", \"pd1_sp_thresh_c\", \"pd1_sp_thresh_d\", \"pd1_sp_thresh_n\", \"pd1_sp_thresh_r\", \"pd2_np_auto\", \"pd2_sp_auto\", \"pd2_sp_thresh\", \"pd2_sp_thresh_c\", \"pd2_sp_thresh_d\", \"pd2_sp_thresh_n\", \"pd2_sp_thresh_r\", \"pd3_np_auto\", \"pd3_sp_auto\", \"pd3_sp_thresh\", \"pd3_sp_thresh_c\", \"pd3_sp_thresh_d\", \"pd3_sp_thresh_n\", \"pd3_sp_thresh_r\", \"pd4_np_auto\", \"pd4_sp_auto\", \"pd4_sp_thresh\", \"pd4_sp_thresh_c\", \"pd4_sp_thresh_d\", \"pd4_sp_thresh_n\", \"pd4_sp_thresh_r\", \"plc_uid\", \"post_summary_dtl\", \"potential\", \"potential_c\", \"potential_d\", \"potential_n\", \"potential_r\", \"primary_agency\", \"primary_commodity_id\", \"primary_contact\", \"primary_sort\", \"primary_trailer_type\", \"print_containers\", \"progress_template\", \"prospect_type_id\", \"quebec_number\", \"quote_days_to_expire\", \"rate_override_nmfc_code\", \"reassign_profile_id\", \"rec_call_days\", \"remarks\", \"revenue\", \"revenue_c\", \"revenue_d\", \"revenue_n\", \"revenue_r\", \"revenue_start_date\", \"sales_manager_id\", \"sales_status_id\", \"search_city\", \"search_state_id\", \"search_zip_code\", \"secondary_sort\", \"sell_tariff_id\", \"service_fail_cons\", \"service_fail_drop\", \"service_fail_pick\", \"service_fail_ship\", \"service_failures\", \"service_failures_review\", \"sic_code\", \"start_date\", \"summary_billing\", \"summary_template\", \"tar_uid\", \"target_profit\", \"tenfour_customer_id\", \"type_of\", \"use_local_mile\", \"vm_part_update\", \"waterfall_lead_time\", \"waterfall_notify_email\", \"waterfall_process\", \"website_url\", \"wf_queue\", \"require_tracking\", \"required_vendor\", \"disable_automatic_tracking\", \"tracking_hours_prior\", \"bankyacct\", \"bankyname\", \"bankyphone\", \"bankycsz\", \"bankyadd\", \"wf_bwop\", \"wf_auto_renbill\", \"wf_autobill\", \"wf_ab_po_chk\", \"display_ysplit_stops\", \"waterfall_auto_route_guides\", \"display_eta\", \"cust_requestor_load_id\", \"trimble_place_id\", \"is_intercompany\", \"ic_company_id\", \"shipment_ident_type\"}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Columns\",{{\"dot_number\", \"tax_id\"}}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\",{{\"entered_date\", type date}})",
        "in",
        "    #\"Changed Type\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = Sql.Database(\\\"bl-appdb\\\", \\\"lme\\\"),\\r\\n    dbo_customer = Source{[Schema=\\\"dbo\\\",Item=\\\"customer\\\"]}[Data],\\r\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(dbo_customer,{\\\"company_id\\\", \\\"activity_count\\\", \\\"activity_start_date\\\", \\\"add_empty_distance_occ\\\", \\\"add_finance_charge\\\", \\\"address2\\\", \\\"allow_inc_in_frt\\\", \\\"auto_rate\\\", \\\"available_template\\\", \\\"average_bill\\\", \\\"average_bill_c\\\", \\\"average_bill_d\\\", \\\"average_bill_n\\\", \\\"average_bill_r\\\", \\\"balance\\\", \\\"balance_c\\\", \\\"balance_d\\\", \\\"balance_n\\\", \\\"balance_r\\\", \\\"benchmark_ctg_uid\\\", \\\"benchmark_tar_uid\\\", \\\"bill_format_flag\\\", \\\"bill_template\\\", \\\"bill_transfer_when\\\", \\\"billed_loads\\\", \\\"blanket_buy_tariff_id\\\", \\\"blanket_sell_tariff_id\\\", \\\"bl_logo\\\", \\\"bl_logo_name\\\", \\\"bridge_id\\\", \\\"brokerage_filter\\\", \\\"business_hours\\\", \\\"business_number\\\", \\\"buy_tariff_id\\\", \\\"category\\\", \\\"cert_of_ins_date\\\", \\\"charge_detention\\\", \\\"chassis_chargeby\\\", \\\"chassis_freedays\\\", \\\"chassis_rate\\\", \\\"chassis_rate_c\\\", \\\"chassis_rate_d\\\", \\\"chassis_rate_n\\\", \\\"chassis_rate_r\\\", \\\"coll_thresh_pd1\\\", \\\"coll_thresh_pd1_c\\\", \\\"coll_thresh_pd1_d\\\", \\\"coll_thresh_pd1_n\\\", \\\"coll_thresh_pd1_r\\\", \\\"coll_thresh_pd2\\\", \\\"coll_thresh_pd2_c\\\", \\\"coll_thresh_pd2_d\\\", \\\"coll_thresh_pd2_n\\\", \\\"coll_thresh_pd2_r\\\", \\\"coll_thresh_pd3\\\", \\\"coll_thresh_pd3_c\\\", \\\"coll_thresh_pd3_d\\\", \\\"coll_thresh_pd3_n\\\", \\\"coll_thresh_pd3_r\\\", \\\"coll_thresh_pd4\\\", \\\"coll_thresh_pd4_c\\\", \\\"coll_thresh_pd4_d\\\", \\\"coll_thresh_pd4_n\\\", \\\"coll_thresh_pd4_r\\\", \\\"collections_id\\\", \\\"collections_ok\\\", \\\"confidence_level\\\", \\\"container_chargeby\\\", \\\"container_freedays\\\", \\\"container_rate\\\", \\\"container_rate_c\\\", \\\"container_rate_d\\\", \\\"container_rate_n\\\", \\\"container_rate_r\\\", \\\"contract_cbc\\\", \\\"contract_ccc\\\", \\\"contract_gbc\\\", \\\"contract_gcc\\\", \\\"contract_sbc\\\", \\\"contract_scc\\\", \\\"controlling_carrier_code\\\", \\\"conversion_date\\\", \\\"cost_ctg_uid\\\", \\\"cost_tar_uid\\\", \\\"covered_template\\\", \\\"cp_logo\\\", \\\"cp_logo_name\\\", \\\"credit_application\\\", \\\"credit_check_date\\\", \\\"credit_limit_c\\\", \\\"credit_limit_d\\\", \\\"credit_limit_n\\\", \\\"credit_limit_r\\\", \\\"credit_warning_pct\\\", \\\"ctg_uid\\\", \\\"currency_type\\\", \\\"cust_stmt_template\\\", \\\"d_and_b_date\\\", \\\"days_between_calls\\\", \\\"deadhead_target\\\", \\\"ded_last_fixed_cost_billdt\\\", \\\"dedicated_cycle\\\", \\\"dedicated_revenue_code_id\\\", \\\"dedicated_seg_alloc_code\\\", \\\"dedicated_start_day\\\", \\\"dedicated_template\\\", \\\"def_rate_confirm_temp\\\", \\\"delivered_template\\\", \\\"departure_date_at\\\", \\\"distance_method\\\", \\\"distance_profile\\\", \\\"distance_source\\\", \\\"distance_type\\\", \\\"driver_load\\\", \\\"empty_distance_charge_id\\\", \\\"empty_distance_rate\\\", \\\"enable_notifications\\\", \\\"enforce_dep_dates\\\", \\\"excise_taxable\\\", \\\"expected_close\\\", \\\"extend_rates\\\", \\\"factor_percent\\\", \\\"factor_receivables\\\", \\\"factoring_id\\\", \\\"fak_profile_id\\\", \\\"fourkites_customer_id\\\", \\\"fuel_amount\\\", \\\"fuel_base_price\\\", \\\"fuel_credit\\\", \\\"fuel_method\\\", \\\"fuel_percent\\\", \\\"fuel_price_region\\\", \\\"fuel_surcharge_id\\\", \\\"fuel_surchg_enddt\\\", \\\"fuel_surchg_strtdt\\\", \\\"fuel_variance\\\", \\\"global_detention\\\", \\\"google_place_id\\\", \\\"gp_exclude\\\", \\\"gp_exported\\\", \\\"grace_period\\\", \\\"high_balance\\\", \\\"high_balance_c\\\", \\\"high_balance_d\\\", \\\"high_balance_n\\\", \\\"high_balance_r\\\", \\\"include_by_date\\\", \\\"include_empty_distance\\\", \\\"include_fuel_surcharge\\\", \\\"include_split_point\\\", \\\"is_consignee\\\", \\\"is_distribution_center\\\", \\\"is_drop_yard\\\", \\\"is_geocoded\\\", \\\"is_pallets_required\\\", \\\"is_shipper\\\", \\\"is_trailer_pool_required\\\", \\\"jaguar_id\\\", \\\"last_bill_date\\\", \\\"last_fin_charge_dt\\\", \\\"last_pay_date\\\", \\\"last_ship_date\\\", \\\"location_id\\\", \\\"macropoint_requestor_id\\\", \\\"main_phone\\\", \\\"manual_exchange\\\", \\\"mark_plan_id\\\", \\\"max_pay_percent\\\", \\\"misc_bill_template\\\", \\\"monthly_order_goal\\\", \\\"motor_carrier_id\\\", \\\"next_call_date\\\", \\\"next_rec_call\\\", \\\"nxt_action_code_id\\\", \\\"nxt_action_date\\\", \\\"operations_user\\\", \\\"order_count\\\", \\\"order_detail_at\\\", \\\"order_start_date\\\", \\\"p44_profile_id\\\", \\\"paid_loads\\\", \\\"pay_days_date\\\", \\\"pay_days_orders\\\", \\\"payee_id\\\", \\\"pd0_alert\\\", \\\"pd1_np_auto\\\", \\\"pd1_sp_auto\\\", \\\"pd1_sp_thresh\\\", \\\"pd1_sp_thresh_c\\\", \\\"pd1_sp_thresh_d\\\", \\\"pd1_sp_thresh_n\\\", \\\"pd1_sp_thresh_r\\\", \\\"pd2_np_auto\\\", \\\"pd2_sp_auto\\\", \\\"pd2_sp_thresh\\\", \\\"pd2_sp_thresh_c\\\", \\\"pd2_sp_thresh_d\\\", \\\"pd2_sp_thresh_n\\\", \\\"pd2_sp_thresh_r\\\", \\\"pd3_np_auto\\\", \\\"pd3_sp_auto\\\", \\\"pd3_sp_thresh\\\", \\\"pd3_sp_thresh_c\\\", \\\"pd3_sp_thresh_d\\\", \\\"pd3_sp_thresh_n\\\", \\\"pd3_sp_thresh_r\\\", \\\"pd4_np_auto\\\", \\\"pd4_sp_auto\\\", \\\"pd4_sp_thresh\\\", \\\"pd4_sp_thresh_c\\\", \\\"pd4_sp_thresh_d\\\", \\\"pd4_sp_thresh_n\\\", \\\"pd4_sp_thresh_r\\\", \\\"plc_uid\\\", \\\"post_summary_dtl\\\", \\\"potential\\\", \\\"potential_c\\\", \\\"potential_d\\\", \\\"potential_n\\\", \\\"potential_r\\\", \\\"primary_agency\\\", \\\"primary_commodity_id\\\", \\\"primary_contact\\\", \\\"primary_sort\\\", \\\"primary_trailer_type\\\", \\\"print_containers\\\", \\\"progress_template\\\", \\\"prospect_type_id\\\", \\\"quebec_number\\\", \\\"quote_days_to_expire\\\", \\\"rate_override_nmfc_code\\\", \\\"reassign_profile_id\\\", \\\"rec_call_days\\\", \\\"remarks\\\", \\\"revenue\\\", \\\"revenue_c\\\", \\\"revenue_d\\\", \\\"revenue_n\\\", \\\"revenue_r\\\", \\\"revenue_start_date\\\", \\\"sales_manager_id\\\", \\\"sales_status_id\\\", \\\"search_city\\\", \\\"search_state_id\\\", \\\"search_zip_code\\\", \\\"secondary_sort\\\", \\\"sell_tariff_id\\\", \\\"service_fail_cons\\\", \\\"service_fail_drop\\\", \\\"service_fail_pick\\\", \\\"service_fail_ship\\\", \\\"service_failures\\\", \\\"service_failures_review\\\", \\\"sic_code\\\", \\\"start_date\\\", \\\"summary_billing\\\", \\\"summary_template\\\", \\\"tar_uid\\\", \\\"target_profit\\\", \\\"tenfour_customer_id\\\", \\\"type_of\\\", \\\"use_local_mile\\\", \\\"vm_part_update\\\", \\\"waterfall_lead_time\\\", \\\"waterfall_notify_email\\\", \\\"waterfall_process\\\", \\\"website_url\\\", \\\"wf_queue\\\", \\\"require_tracking\\\", \\\"required_vendor\\\", \\\"disable_automatic_tracking\\\", \\\"tracking_hours_prior\\\", \\\"bankyacct\\\", \\\"bankyname\\\", \\\"bankyphone\\\", \\\"bankycsz\\\", \\\"bankyadd\\\", \\\"wf_bwop\\\", \\\"wf_auto_renbill\\\", \\\"wf_autobill\\\", \\\"wf_ab_po_chk\\\", \\\"display_ysplit_stops\\\", \\\"waterfall_auto_route_guides\\\", \\\"display_eta\\\", \\\"cust_requestor_load_id\\\", \\\"trimble_place_id\\\", \\\"is_intercompany\\\", \\\"ic_company_id\\\", \\\"shipment_ident_type\\\"}),\\r\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Removed Columns\\\",{{\\\"dot_number\\\", \\\"tax_id\\\"}}),\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Renamed Columns\\\",{{\\\"entered_date\\\", type date}})\\r\\nin\\r\\n    #\\\"Changed Type\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "healthy_pipeline_goals",
      "lineageTag": "cb9522ca-5231-4a40-836b-34657a1cbc76",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Excel.Workbook(Web.Contents(\"https://bridgelogisticsinc.sharepoint.com/sites/SalesGoals/Shared%20Documents/Sales%20Goals.xlsx\"), null, true),",
        "    HealthyPipelineGoals_Table = Source{[Item=\"HealthyPipelineGoals\",Kind=\"Table\"]}[Data],",
        "    #\"Changed Type\" = Table.TransformColumnTypes(HealthyPipelineGoals_Table,{{\"Saleperson Name\", type text}, {\"Stage\", type text}, {\"Healthy #\", Int64.Type}})",
        "in",
        "    #\"Changed Type\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = Excel.Workbook(Web.Contents(\\\"https://bridgelogisticsinc.sharepoint.com/sites/SalesGoals/Shared%20Documents/Sales%20Goals.xlsx\\\"), null, true),\\r\\n    HealthyPipelineGoals_Table = Source{[Item=\\\"HealthyPipelineGoals\\\",Kind=\\\"Table\\\"]}[Data],\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(HealthyPipelineGoals_Table,{{\\\"Saleperson Name\\\", type text}, {\\\"Stage\\\", type text}, {\\\"Healthy #\\\", Int64.Type}})\\r\\nin\\r\\n    #\\\"Changed Type\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "pcs_customers",
      "lineageTag": "6fb223ea-a1b1-4fd2-80a5-bd2e6b261197",
      "queryGroupId": "caaa80e5-0b68-49f7-8048-af185c067fb6",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Sql.Databases(\"blsql\"),",
        "    ExpData_A = Source{[Name=\"ExpData_A\"]}[Data],",
        "    dbo_tblEntities = ExpData_A{[Schema=\"dbo\",Item=\"tblEntities\"]}[Data],",
        "    #\"Filtered Rows\" = Table.SelectRows(dbo_tblEntities, each ([EntType] = \"Customer\"))",
        "in",
        "    #\"Filtered Rows\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "custmers_pcs_sync",
      "lineageTag": "a4b6f7c8-ff94-4b99-86ff-1f06b522aaae",
      "queryGroupId": "caaa80e5-0b68-49f7-8048-af185c067fb6",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = customer,",
        "    #\"Filtered Rows\" = Table.SelectRows(Source, each ([prev_code] <> null)),",
        "    #\"Trimmed Text\" = Table.TransformColumns(#\"Filtered Rows\",{{\"prev_code\", Text.Trim, type text}})",
        "in",
        "    #\"Trimmed Text\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "RefreshCutOffDate",
      "lineageTag": "af39c097-cda3-4307-8194-af7487559d9a",
      "queryGroupId": "2beb8cee-e196-4d77-9b9d-fd2eeec8aa3e",
      "navigationStepName": "Navigation",
      "text": [
        "#datetime(2024, 9, 1, 0, 0, 0) meta [IsParameterQuery=true, Type=\"DateTime\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "DateTime",
      "isHidden": false
    },
    {
      "name": "orders",
      "lineageTag": "616850d9-b6a2-4b0e-99f2-f3ebcab5b217",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Sql.Databases(\"bl-appdb\"),",
        "    lme = Source{[Name=\"lme\"]}[Data],",
        "    dbo_orders = lme{[Schema=\"dbo\",Item=\"orders\"]}[Data],",
        "    #\"Filtered Orders on or after RefreshCutOFfDate\" = Table.SelectRows(dbo_orders, each [ordered_date] >= RefreshCutOffDate),",
        "    //Start General Data Transformation",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Filtered Orders on or after RefreshCutOFfDate\",{\"company_id\", \"actual_reefer_profile\", \"agency_id\", \"agent_payee_id\", \"allow_relay\", \"autorate_status\", \"booking_no\", \"booking_number\", \"brk_qual_profile\", \"broker_location_id\", \"brokerage_workflow_id\", \"cbp_crossing_date\", \"cbp_crossing_location_id\", \"cbp_crossing_reason\", \"cbsa_crossing_date\", \"cbsa_crossing_location_id\", \"cbsa_crossing_reason\", \"cc_fuel_revenue\", \"cc_fuel_revenue_c\", \"cc_fuel_revenue_d\", \"cc_fuel_revenue_n\", \"cc_fuel_revenue_r\", \"cc_net_revenue\", \"cc_net_revenue_c\", \"cc_net_revenue_d\", \"cc_net_revenue_n\", \"cc_net_revenue_r\", \"cc_pro_nbr\", \"cobroker_location_id\", \"collection_method\", \"com_setpnt_temp\", \"com_setpnt_temp_um\", \"commitment_id\", \"container\", \"container_planned\", \"container_type_id\", \"controlling_carrier_code\", \"copy_from_company\", \"copy_from_order_id\", \"copy_to_company\", \"copy_to_order_id\", \"ctrl_party_id\", \"cube\", \"curr_movement_id\", \"cust_order_no\", \"declared_val\", \"def_move_type\", \"default_match_id\", \"dim_height\", \"dim_length\", \"dim_surcharge\", \"dim_surcharge_c\", \"dim_surcharge_d\", \"dim_surcharge_n\", \"dim_surcharge_r\", \"dim_width\", \"dispatch_opt\", \"dl_team_reqd\", \"dray_del_date\", \"dray_del_pay\", \"dray_del_pay_c\", \"dray_del_pay_d\", \"dray_del_pay_n\", \"dray_del_pay_r\", \"dray_del_payee\", \"dray_del_xfer_dt\", \"dray_pu_date\", \"dray_pu_pay\", \"dray_pu_pay_c\", \"dray_pu_pay_d\", \"dray_pu_pay_n\", \"dray_pu_pay_r\", \"dray_pu_payee\", \"dray_pu_xfer_dt\", \"eir1_no\", \"eir2_no\", \"est_tolls\", \"est_tolls_c\", \"est_tolls_d\", \"est_tolls_n\", \"est_tolls_r\", \"excise_disable_update\", \"excise_taxable\", \"excisetax_total\", \"excisetax_total_c\", \"excisetax_total_d\", \"excisetax_total_n\", \"excisetax_total_r\", \"force_assign\", \"forwd_location_id\", \"free_days\", \"freight_charge_c\", \"freight_charge_d\", \"freight_charge_r\", \"high_value\", \"hold_reason\", \"image_is_present\", \"import_export\", \"include_split_point\", \"intelliset\", \"invoice_recv_date\", \"is_autorate_dist\", \"is_container\", \"is_dedicated\", \"is_local_mile\", \"is_requested\", \"jag_carrier_id\", \"jag_cost_rate_id\", \"ldport_location_id\", \"linear_feet_avail\", \"loadboard\", \"ltl\", \"markup_flat\", \"markup_flat_c\", \"markup_flat_d\", \"markup_flat_n\", \"markup_flat_r\", \"markup_percent\", \"master_order_id\", \"master_sequence\", \"next_rebill\", \"nte_lp_num\", \"nte_lp_qual\", \"operational_status\", \"optiset\", \"optimize\", \"order_mode\", \"order_value_c\", \"order_value_d\", \"order_value_n\", \"order_value_r\", \"orig_dest_rate_id\", \"otherchargetotal_c\", \"otherchargetotal_d\", \"otherchargetotal_n\", \"otherchargetotal_r\", \"pallets_required\", \"pay_gross_d\", \"pay_gross_n\", \"pay_gross_r\", \"planning_comment\", \"pnn_callback\", \"pnn_comment\", \"pnn_comment2\", \"pnn_post_type\", \"pnn_rate\", \"pay_gross\", \"pay_gross_c\", \"pick_up_no\", \"pnn_rate_type\", \"pnn_trailer_length\", \"pnn_trailer_width\", \"ponum\", \"port\", \"port_of_discharge\", \"preload_trailer_id\", \"preloaded\", \"rate_currency_type\", \"rate_id\", \"rate_min_weight\", \"rate_min_weight_um\", \"rate_unit_desc\", \"recurring_order_id\", \"reply_transmitted\", \"requesting_company\", \"return_temp\", \"return_temp_um\", \"return_temp_var\", \"return_temp_var_um\", \"revenue_share_method\", \"sail_date\", \"seal_number\", \"seg_alloc_code\", \"setpoint_temp\", \"setpoint_temp_um\", \"setpoint_var\", \"setpoint_var_um\", \"ship_status_to_edi\", \"shipment_id\", \"shipstatus2edi_dt\", \"ss_location_id\", \"subject_order_status\", \"subject_order_void_date\", \"swap\", \"teams_required\", \"temperature_max_um\", \"temperature_min_um\", \"total_charge_c\", \"total_charge_d\", \"total_charge_n\", \"total_charge_r\", \"totalcharge_and_excisetax_c\", \"totalcharge_and_excisetax_d\", \"totalcharge_and_excisetax_n\", \"totalcharge_and_excisetax_r\", \"tractor_type\", \"vessel\", \"vessel_cutoff_date\", \"bill_distance_um\", \"billing_empty_distance\", \"billing_empty_distance_um\", \"billing_loaded_distance\", \"billing_loaded_distance_um\", \"bol_note\", \"bol_recv_date\", \"external_invoiceno\", \"freight_charge_n\", \"load_date\", \"ordered_by\", \"ordered_method\", \"placard_required\", \"rate\", \"rate_type\", \"rate_units\", \"ready_to_bill\", \"totalcharge_and_excisetax\", \"weight_um\", \"xferred2billing\", \"xferred2billing_dt\", \"lock_miles\", \"is_auto_tonu\", \"floor_loaded_freight\", \"equipment_type_options\", \"ic_movement_from\", \"ic_company_from\", \"is_intercompany\", \"rate_source\", \"ic_order_from\", \"ordered_by_id\", \"pnn_loadboard_user_id\", \"voided_load_transmitted_dt\", \"voided_load_transmitted\", \"total_charge\"}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Columns\",{{\"blnum\", \"customer_po\"}, {\"consignee_refno\", \"bol\"}, {\"ordered_date\", \"order_entered_date\"}, {\"otherchargetotal\", \"other_charges_total\"}, {\"salesperson\", \"salesperson_id\"}}),",
        "    #\"Inserted order_entered_time\" = Table.AddColumn(#\"Renamed Columns\", \"order_entered_time\", each DateTime.Time([order_entered_date]), type time),",
        "    //End General Data Transformation",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Inserted order_entered_time\",{{\"bill_date\", type date}, {\"freight_charge\", Currency.Type}, {\"order_entered_date\", type date}, {\"other_charges_total\", Currency.Type}}),",
        "    //Start add shipper and consignee data",
        "    #\"Merged stop table shipper\" = Table.NestedJoin(#\"Changed Type\", {\"shipper_stop_id\"}, stop, {\"id\"}, \"stop\", JoinKind.LeftOuter),",
        "    #\"Expanded stop\" = Table.ExpandTableColumn(#\"Merged stop table shipper\", \"stop\", {\"city_name\", \"location_name\", \"sched_arrive_early\", \"sched_arrive_late\", \"state\", \"zip_code\", \"sched_arrive_early_time\", \"sched_arrive_late_time\"}, {\"stop.city_name\", \"stop.location_name\", \"stop.sched_arrive_early\", \"stop.sched_arrive_late\", \"stop.state\", \"stop.zip_code\", \"stop.sched_arrive_early_time\", \"stop.sched_arrive_late_time\"}),",
        "    #\"Renamed shipper data\" = Table.RenameColumns(#\"Expanded stop\",{{\"stop.city_name\", \"shipper_city_name\"}, {\"stop.location_name\", \"shipper_location_name\"}, {\"stop.sched_arrive_early\", \"shipper_sched_early_date\"}, {\"stop.sched_arrive_late\", \"shipper_sched_late_date\"}, {\"stop.state\", \"shipper_state\"}, {\"stop.zip_code\", \"shipper_zip_code\"}, {\"stop.sched_arrive_early_time\", \"shipper_sched_early_time\"}, {\"stop.sched_arrive_late_time\", \"shipper_sched_late_time\"}}),",
        "    #\"Filtered Rows\" = Table.SelectRows(#\"Renamed shipper data\", each ([status] <> \"V\")),",
        "    #\"Merged stop table consignee\" = Table.NestedJoin(#\"Filtered Rows\", {\"consignee_stop_id\"}, stop, {\"id\"}, \"stop\", JoinKind.LeftOuter),",
        "    #\"Expanded stop1\" = Table.ExpandTableColumn(#\"Merged stop table consignee\", \"stop\", {\"city_id\", \"city_name\", \"location_name\", \"sched_arrive_early\", \"sched_arrive_late\", \"state\", \"zip_code\", \"sched_arrive_early_time\", \"sched_arrive_late_time\"}, {\"stop.city_id\", \"stop.city_name\", \"stop.location_name\", \"stop.sched_arrive_early\", \"stop.sched_arrive_late\", \"stop.state\", \"stop.zip_code\", \"stop.sched_arrive_early_time\", \"stop.sched_arrive_late_time\"}),",
        "    //End add shipper and consignee data",
        "    #\"Renamed consignee data\" = Table.RenameColumns(#\"Expanded stop1\",{{\"stop.city_id\", \"consignee_city_id\"}, {\"stop.city_name\", \"consignee_city_name\"}, {\"stop.location_name\", \"consignee_location_name\"}, {\"stop.sched_arrive_early\", \"consignee_sched_early_date\"}, {\"stop.sched_arrive_late\", \"consignee_sched_late_date\"}, {\"stop.state\", \"consignee_state\"}, {\"stop.zip_code\", \"consignee_zip_code\"}, {\"stop.sched_arrive_early_time\", \"consignee_sched_early_time\"}, {\"stop.sched_arrive_late_time\", \"consignee_sched_late_time\"}}),",
        "    //Start add 3 digit zip",
        "    #\"Inserted First Characters\" = Table.AddColumn(#\"Renamed consignee data\", \"shipper_3_digit_zip_code\", each Text.Start([shipper_zip_code], 3), type text),",
        "    //End add 3 digit zip",
        "    #\"Inserted First Characters1\" = Table.AddColumn(#\"Inserted First Characters\", \"consignee_3_digit_zip_code\", each Text.Start([consignee_zip_code], 3), type text),",
        "    //Start Add Lane",
        "    #\"Trimmed Text\" = Table.TransformColumns(#\"Inserted First Characters1\",{{\"shipper_city_name\", Text.Trim, type text}, {\"shipper_state\", Text.Trim, type text}, {\"consignee_city_name\", Text.Trim, type text}, {\"consignee_state\", Text.Trim, type text}}),",
        "    #\"Duplicated Column\" = Table.DuplicateColumn(#\"Trimmed Text\", \"shipper_city_name\", \"shipper_city_name - Copy\"),",
        "    #\"Duplicated Column1\" = Table.DuplicateColumn(#\"Duplicated Column\", \"shipper_state\", \"shipper_state - Copy\"),",
        "    #\"Duplicated Column2\" = Table.DuplicateColumn(#\"Duplicated Column1\", \"consignee_city_name\", \"consignee_city_name - Copy\"),",
        "    #\"Duplicated Column3\" = Table.DuplicateColumn(#\"Duplicated Column2\", \"consignee_state\", \"consignee_state - Copy\"),",
        "    #\"Merged Columns\" = Table.CombineColumns(#\"Duplicated Column3\",{\"shipper_city_name - Copy\", \"shipper_state - Copy\"},Combiner.CombineTextByDelimiter(\", \", QuoteStyle.None),\"Shipper\"),",
        "    #\"Merged Columns1\" = Table.CombineColumns(#\"Merged Columns\",{\"consignee_city_name - Copy\", \"consignee_state - Copy\"},Combiner.CombineTextByDelimiter(\", \", QuoteStyle.None),\"Consignee\"),",
        "    //End Add Lane",
        "    #\"Merged Columns2\" = Table.CombineColumns(#\"Merged Columns1\",{\"Shipper\", \"Consignee\"},Combiner.CombineTextByDelimiter(\" - \", QuoteStyle.None),\"lane\"),",
        "    ",
        "    #\"Appended Query\" = Table.Combine({#\"Merged Columns2\", mcleod_historic_orders, pcs_orders})",
        "in",
        "    #\"Appended Query\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = Sql.Databases(\\\"bl-appdb\\\"),\\r\\n    lme = Source{[Name=\\\"lme\\\"]}[Data],\\r\\n    dbo_orders = lme{[Schema=\\\"dbo\\\",Item=\\\"orders\\\"]}[Data],\\r\\n    #\\\"Filtered Orders on or after RefreshCutOFfDate\\\" = Table.SelectRows(dbo_orders, each [ordered_date] >= RefreshCutOffDate),\\r\\n    //Start General Data Transformation\\r\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(#\\\"Filtered Orders on or after RefreshCutOFfDate\\\",{\\\"company_id\\\", \\\"actual_reefer_profile\\\", \\\"agency_id\\\", \\\"agent_payee_id\\\", \\\"allow_relay\\\", \\\"autorate_status\\\", \\\"booking_no\\\", \\\"booking_number\\\", \\\"brk_qual_profile\\\", \\\"broker_location_id\\\", \\\"brokerage_workflow_id\\\", \\\"cbp_crossing_date\\\", \\\"cbp_crossing_location_id\\\", \\\"cbp_crossing_reason\\\", \\\"cbsa_crossing_date\\\", \\\"cbsa_crossing_location_id\\\", \\\"cbsa_crossing_reason\\\", \\\"cc_fuel_revenue\\\", \\\"cc_fuel_revenue_c\\\", \\\"cc_fuel_revenue_d\\\", \\\"cc_fuel_revenue_n\\\", \\\"cc_fuel_revenue_r\\\", \\\"cc_net_revenue\\\", \\\"cc_net_revenue_c\\\", \\\"cc_net_revenue_d\\\", \\\"cc_net_revenue_n\\\", \\\"cc_net_revenue_r\\\", \\\"cc_pro_nbr\\\", \\\"cobroker_location_id\\\", \\\"collection_method\\\", \\\"com_setpnt_temp\\\", \\\"com_setpnt_temp_um\\\", \\\"commitment_id\\\", \\\"container\\\", \\\"container_planned\\\", \\\"container_type_id\\\", \\\"controlling_carrier_code\\\", \\\"copy_from_company\\\", \\\"copy_from_order_id\\\", \\\"copy_to_company\\\", \\\"copy_to_order_id\\\", \\\"ctrl_party_id\\\", \\\"cube\\\", \\\"curr_movement_id\\\", \\\"cust_order_no\\\", \\\"declared_val\\\", \\\"def_move_type\\\", \\\"default_match_id\\\", \\\"dim_height\\\", \\\"dim_length\\\", \\\"dim_surcharge\\\", \\\"dim_surcharge_c\\\", \\\"dim_surcharge_d\\\", \\\"dim_surcharge_n\\\", \\\"dim_surcharge_r\\\", \\\"dim_width\\\", \\\"dispatch_opt\\\", \\\"dl_team_reqd\\\", \\\"dray_del_date\\\", \\\"dray_del_pay\\\", \\\"dray_del_pay_c\\\", \\\"dray_del_pay_d\\\", \\\"dray_del_pay_n\\\", \\\"dray_del_pay_r\\\", \\\"dray_del_payee\\\", \\\"dray_del_xfer_dt\\\", \\\"dray_pu_date\\\", \\\"dray_pu_pay\\\", \\\"dray_pu_pay_c\\\", \\\"dray_pu_pay_d\\\", \\\"dray_pu_pay_n\\\", \\\"dray_pu_pay_r\\\", \\\"dray_pu_payee\\\", \\\"dray_pu_xfer_dt\\\", \\\"eir1_no\\\", \\\"eir2_no\\\", \\\"est_tolls\\\", \\\"est_tolls_c\\\", \\\"est_tolls_d\\\", \\\"est_tolls_n\\\", \\\"est_tolls_r\\\", \\\"excise_disable_update\\\", \\\"excise_taxable\\\", \\\"excisetax_total\\\", \\\"excisetax_total_c\\\", \\\"excisetax_total_d\\\", \\\"excisetax_total_n\\\", \\\"excisetax_total_r\\\", \\\"force_assign\\\", \\\"forwd_location_id\\\", \\\"free_days\\\", \\\"freight_charge_c\\\", \\\"freight_charge_d\\\", \\\"freight_charge_r\\\", \\\"high_value\\\", \\\"hold_reason\\\", \\\"image_is_present\\\", \\\"import_export\\\", \\\"include_split_point\\\", \\\"intelliset\\\", \\\"invoice_recv_date\\\", \\\"is_autorate_dist\\\", \\\"is_container\\\", \\\"is_dedicated\\\", \\\"is_local_mile\\\", \\\"is_requested\\\", \\\"jag_carrier_id\\\", \\\"jag_cost_rate_id\\\", \\\"ldport_location_id\\\", \\\"linear_feet_avail\\\", \\\"loadboard\\\", \\\"ltl\\\", \\\"markup_flat\\\", \\\"markup_flat_c\\\", \\\"markup_flat_d\\\", \\\"markup_flat_n\\\", \\\"markup_flat_r\\\", \\\"markup_percent\\\", \\\"master_order_id\\\", \\\"master_sequence\\\", \\\"next_rebill\\\", \\\"nte_lp_num\\\", \\\"nte_lp_qual\\\", \\\"operational_status\\\", \\\"optiset\\\", \\\"optimize\\\", \\\"order_mode\\\", \\\"order_value_c\\\", \\\"order_value_d\\\", \\\"order_value_n\\\", \\\"order_value_r\\\", \\\"orig_dest_rate_id\\\", \\\"otherchargetotal_c\\\", \\\"otherchargetotal_d\\\", \\\"otherchargetotal_n\\\", \\\"otherchargetotal_r\\\", \\\"pallets_required\\\", \\\"pay_gross_d\\\", \\\"pay_gross_n\\\", \\\"pay_gross_r\\\", \\\"planning_comment\\\", \\\"pnn_callback\\\", \\\"pnn_comment\\\", \\\"pnn_comment2\\\", \\\"pnn_post_type\\\", \\\"pnn_rate\\\", \\\"pay_gross\\\", \\\"pay_gross_c\\\", \\\"pick_up_no\\\", \\\"pnn_rate_type\\\", \\\"pnn_trailer_length\\\", \\\"pnn_trailer_width\\\", \\\"ponum\\\", \\\"port\\\", \\\"port_of_discharge\\\", \\\"preload_trailer_id\\\", \\\"preloaded\\\", \\\"rate_currency_type\\\", \\\"rate_id\\\", \\\"rate_min_weight\\\", \\\"rate_min_weight_um\\\", \\\"rate_unit_desc\\\", \\\"recurring_order_id\\\", \\\"reply_transmitted\\\", \\\"requesting_company\\\", \\\"return_temp\\\", \\\"return_temp_um\\\", \\\"return_temp_var\\\", \\\"return_temp_var_um\\\", \\\"revenue_share_method\\\", \\\"sail_date\\\", \\\"seal_number\\\", \\\"seg_alloc_code\\\", \\\"setpoint_temp\\\", \\\"setpoint_temp_um\\\", \\\"setpoint_var\\\", \\\"setpoint_var_um\\\", \\\"ship_status_to_edi\\\", \\\"shipment_id\\\", \\\"shipstatus2edi_dt\\\", \\\"ss_location_id\\\", \\\"subject_order_status\\\", \\\"subject_order_void_date\\\", \\\"swap\\\", \\\"teams_required\\\", \\\"temperature_max_um\\\", \\\"temperature_min_um\\\", \\\"total_charge_c\\\", \\\"total_charge_d\\\", \\\"total_charge_n\\\", \\\"total_charge_r\\\", \\\"totalcharge_and_excisetax_c\\\", \\\"totalcharge_and_excisetax_d\\\", \\\"totalcharge_and_excisetax_n\\\", \\\"totalcharge_and_excisetax_r\\\", \\\"tractor_type\\\", \\\"vessel\\\", \\\"vessel_cutoff_date\\\", \\\"bill_distance_um\\\", \\\"billing_empty_distance\\\", \\\"billing_empty_distance_um\\\", \\\"billing_loaded_distance\\\", \\\"billing_loaded_distance_um\\\", \\\"bol_note\\\", \\\"bol_recv_date\\\", \\\"external_invoiceno\\\", \\\"freight_charge_n\\\", \\\"load_date\\\", \\\"ordered_by\\\", \\\"ordered_method\\\", \\\"placard_required\\\", \\\"rate\\\", \\\"rate_type\\\", \\\"rate_units\\\", \\\"ready_to_bill\\\", \\\"totalcharge_and_excisetax\\\", \\\"weight_um\\\", \\\"xferred2billing\\\", \\\"xferred2billing_dt\\\", \\\"lock_miles\\\", \\\"is_auto_tonu\\\", \\\"floor_loaded_freight\\\", \\\"equipment_type_options\\\", \\\"ic_movement_from\\\", \\\"ic_company_from\\\", \\\"is_intercompany\\\", \\\"rate_source\\\", \\\"ic_order_from\\\", \\\"ordered_by_id\\\", \\\"pnn_loadboard_user_id\\\", \\\"voided_load_transmitted_dt\\\", \\\"voided_load_transmitted\\\", \\\"total_charge\\\"}),\\r\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Removed Columns\\\",{{\\\"blnum\\\", \\\"customer_po\\\"}, {\\\"consignee_refno\\\", \\\"bol\\\"}, {\\\"ordered_date\\\", \\\"order_entered_date\\\"}, {\\\"otherchargetotal\\\", \\\"other_charges_total\\\"}, {\\\"salesperson\\\", \\\"salesperson_id\\\"}}),\\r\\n    #\\\"Inserted order_entered_time\\\" = Table.AddColumn(#\\\"Renamed Columns\\\", \\\"order_entered_time\\\", each DateTime.Time([order_entered_date]), type time),\\r\\n    //End General Data Transformation\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Inserted order_entered_time\\\",{{\\\"bill_date\\\", type date}, {\\\"freight_charge\\\", Currency.Type}, {\\\"order_entered_date\\\", type date}, {\\\"other_charges_total\\\", Currency.Type}}),\\r\\n    //Start add shipper and consignee data\\r\\n    #\\\"Merged stop table shipper\\\" = Table.NestedJoin(#\\\"Changed Type\\\", {\\\"shipper_stop_id\\\"}, stop, {\\\"id\\\"}, \\\"stop\\\", JoinKind.LeftOuter),\\r\\n    #\\\"Expanded stop\\\" = Table.ExpandTableColumn(#\\\"Merged stop table shipper\\\", \\\"stop\\\", {\\\"city_name\\\", \\\"location_name\\\", \\\"sched_arrive_early\\\", \\\"sched_arrive_late\\\", \\\"state\\\", \\\"zip_code\\\", \\\"sched_arrive_early_time\\\", \\\"sched_arrive_late_time\\\"}, {\\\"stop.city_name\\\", \\\"stop.location_name\\\", \\\"stop.sched_arrive_early\\\", \\\"stop.sched_arrive_late\\\", \\\"stop.state\\\", \\\"stop.zip_code\\\", \\\"stop.sched_arrive_early_time\\\", \\\"stop.sched_arrive_late_time\\\"}),\\r\\n    #\\\"Renamed shipper data\\\" = Table.RenameColumns(#\\\"Expanded stop\\\",{{\\\"stop.city_name\\\", \\\"shipper_city_name\\\"}, {\\\"stop.location_name\\\", \\\"shipper_location_name\\\"}, {\\\"stop.sched_arrive_early\\\", \\\"shipper_sched_early_date\\\"}, {\\\"stop.sched_arrive_late\\\", \\\"shipper_sched_late_date\\\"}, {\\\"stop.state\\\", \\\"shipper_state\\\"}, {\\\"stop.zip_code\\\", \\\"shipper_zip_code\\\"}, {\\\"stop.sched_arrive_early_time\\\", \\\"shipper_sched_early_time\\\"}, {\\\"stop.sched_arrive_late_time\\\", \\\"shipper_sched_late_time\\\"}}),\\r\\n    #\\\"Filtered Rows\\\" = Table.SelectRows(#\\\"Renamed shipper data\\\", each ([status] <> \\\"V\\\")),\\r\\n    #\\\"Merged stop table consignee\\\" = Table.NestedJoin(#\\\"Filtered Rows\\\", {\\\"consignee_stop_id\\\"}, stop, {\\\"id\\\"}, \\\"stop\\\", JoinKind.LeftOuter),\\r\\n    #\\\"Expanded stop1\\\" = Table.ExpandTableColumn(#\\\"Merged stop table consignee\\\", \\\"stop\\\", {\\\"city_id\\\", \\\"city_name\\\", \\\"location_name\\\", \\\"sched_arrive_early\\\", \\\"sched_arrive_late\\\", \\\"state\\\", \\\"zip_code\\\", \\\"sched_arrive_early_time\\\", \\\"sched_arrive_late_time\\\"}, {\\\"stop.city_id\\\", \\\"stop.city_name\\\", \\\"stop.location_name\\\", \\\"stop.sched_arrive_early\\\", \\\"stop.sched_arrive_late\\\", \\\"stop.state\\\", \\\"stop.zip_code\\\", \\\"stop.sched_arrive_early_time\\\", \\\"stop.sched_arrive_late_time\\\"}),\\r\\n    //End add shipper and consignee data\\r\\n    #\\\"Renamed consignee data\\\" = Table.RenameColumns(#\\\"Expanded stop1\\\",{{\\\"stop.city_id\\\", \\\"consignee_city_id\\\"}, {\\\"stop.city_name\\\", \\\"consignee_city_name\\\"}, {\\\"stop.location_name\\\", \\\"consignee_location_name\\\"}, {\\\"stop.sched_arrive_early\\\", \\\"consignee_sched_early_date\\\"}, {\\\"stop.sched_arrive_late\\\", \\\"consignee_sched_late_date\\\"}, {\\\"stop.state\\\", \\\"consignee_state\\\"}, {\\\"stop.zip_code\\\", \\\"consignee_zip_code\\\"}, {\\\"stop.sched_arrive_early_time\\\", \\\"consignee_sched_early_time\\\"}, {\\\"stop.sched_arrive_late_time\\\", \\\"consignee_sched_late_time\\\"}}),\\r\\n    //Start add 3 digit zip\\r\\n    #\\\"Inserted First Characters\\\" = Table.AddColumn(#\\\"Renamed consignee data\\\", \\\"shipper_3_digit_zip_code\\\", each Text.Start([shipper_zip_code], 3), type text),\\r\\n    //End add 3 digit zip\\r\\n    #\\\"Inserted First Characters1\\\" = Table.AddColumn(#\\\"Inserted First Characters\\\", \\\"consignee_3_digit_zip_code\\\", each Text.Start([consignee_zip_code], 3), type text),\\r\\n    //Start Add Lane\\r\\n    #\\\"Trimmed Text\\\" = Table.TransformColumns(#\\\"Inserted First Characters1\\\",{{\\\"shipper_city_name\\\", Text.Trim, type text}, {\\\"shipper_state\\\", Text.Trim, type text}, {\\\"consignee_city_name\\\", Text.Trim, type text}, {\\\"consignee_state\\\", Text.Trim, type text}}),\\r\\n    #\\\"Duplicated Column\\\" = Table.DuplicateColumn(#\\\"Trimmed Text\\\", \\\"shipper_city_name\\\", \\\"shipper_city_name - Copy\\\"),\\r\\n    #\\\"Duplicated Column1\\\" = Table.DuplicateColumn(#\\\"Duplicated Column\\\", \\\"shipper_state\\\", \\\"shipper_state - Copy\\\"),\\r\\n    #\\\"Duplicated Column2\\\" = Table.DuplicateColumn(#\\\"Duplicated Column1\\\", \\\"consignee_city_name\\\", \\\"consignee_city_name - Copy\\\"),\\r\\n    #\\\"Duplicated Column3\\\" = Table.DuplicateColumn(#\\\"Duplicated Column2\\\", \\\"consignee_state\\\", \\\"consignee_state - Copy\\\"),\\r\\n    #\\\"Merged Columns\\\" = Table.CombineColumns(#\\\"Duplicated Column3\\\",{\\\"shipper_city_name - Copy\\\", \\\"shipper_state - Copy\\\"},Combiner.CombineTextByDelimiter(\\\", \\\", QuoteStyle.None),\\\"Shipper\\\"),\\r\\n    #\\\"Merged Columns1\\\" = Table.CombineColumns(#\\\"Merged Columns\\\",{\\\"consignee_city_name - Copy\\\", \\\"consignee_state - Copy\\\"},Combiner.CombineTextByDelimiter(\\\", \\\", QuoteStyle.None),\\\"Consignee\\\"),\\r\\n    //End Add Lane\\r\\n    #\\\"Merged Columns2\\\" = Table.CombineColumns(#\\\"Merged Columns1\\\",{\\\"Shipper\\\", \\\"Consignee\\\"},Combiner.CombineTextByDelimiter(\\\" - \\\", QuoteStyle.None),\\\"lane\\\"),\\r\\n    \\r\\n    #\\\"Appended Query\\\" = Table.Combine({#\\\"Merged Columns2\\\", mcleod_historic_orders, pcs_orders})\\r\\nin\\r\\n    #\\\"Appended Query\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "mcleod_historic_movement",
      "lineageTag": "913af15e-8ef1-470b-a516-92c5e6d44a04",
      "queryGroupId": "caaa80e5-0b68-49f7-8048-af185c067fb6",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Sql.Database(\"bl-appdb\", \"lme\"),",
        "    dbo_movement = Source{[Schema=\"dbo\",Item=\"movement\"]}[Data],",
        "    #\"Changed Type\" = Table.TransformColumnTypes(dbo_movement,{{\"id\", type number}}),",
        "    #\"filtered movements pre MovmentCuttOFfNumber\" = Table.SelectRows(#\"Changed Type\", each [id] < MovementCutOffNumber),",
        "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"filtered movements pre MovmentCuttOFfNumber\",{{\"id\", type text}}),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type1\",{\"company_id\", \"authorized\", \"average_broker_rating\", \"booking_no\", \"br_details_link\", \"br_status_link\", \"br_track_interval\", \"br_track_status\", \"br_tracking_id\", \"br_vendor\", \"broker_avail_tract\", \"brokerage\", \"carrier_contact\", \"carrier_email\", \"carrier_fuel_pay_rate_id\", \"carrier_lane_rate_id\", \"carrier_override_user\", \"carrier_phone\", \"carrier_rate_id\", \"chassis\", \"checkcall_sched_id\", \"container\", \"container_returned\", \"container_status\", \"controlling_carrier_code\", \"dedicated_order_id\", \"est_tolls\", \"est_tolls_c\", \"est_tolls_d\", \"est_tolls_n\", \"est_tolls_r\", \"exclude_movement\", \"fleet_manager\", \"freight_matching_override\", \"fuel_distance_um\", \"fuel_tax_exempt\", \"hubtran_approved_inv_date\", \"hubtran_ok2pay_date\", \"integrated_carrier_search\", \"is_container\", \"is_dray\", \"is_local_mile\", \"linked_id\", \"linked_sequence\", \"loaded\", \"locked_user_id\", \"ltl\", \"ltl_staging_wrs_uid\", \"macropoint_status\", \"manifest_empty_distance\", \"manifest_estimated_arrival\", \"manifest_estimated_depart\", \"manifest_id\", \"manifest_loaded_distance\", \"manifest_reg_uid\", \"manifest_spots_capacity\", \"manifest_spots_consumed\", \"manifest_weight_capacity\", \"manifest_weight_consumed\", \"max_buy_c\", \"max_buy_d\", \"max_buy_n\", \"max_buy_r\", \"max_pay_method\", \"max_pay_units\", \"missed_call_sent\", \"fuel_distance\", \"move_distance_um\", \"movement_type\", \"must_respond_by\", \"next_sched_call\", \"operational_status\", \"operations_user\", \"override_crny_type\", \"override_driver_id\", \"override_driver_nm\", \"override_drvr_cell\", \"override_drvr_email\", \"override_max_pay\", \"override_max_pay_c\", \"override_max_pay_d\", \"override_max_pay_n\", \"override_max_pay_r\", \"override_pay_amt_c\", \"override_pay_amt_d\", \"override_pay_amt_n\", \"override_pay_amt_r\", \"override_paye_rate\", \"override_targetpay_c\", \"override_targetpay_d\", \"override_targetpay_n\", \"override_targetpay_r\", \"override_unit_desc\", \"override_units\", \"pay_distance\", \"pay_distance_um\", \"placard_required\", \"priority\", \"pro_nbr\", \"rate_alert_basis\", \"rate_alert_date\", \"rate_alert_days\", \"rate_alert_hours\", \"rate_alert_minutes\", \"rate_confirm_template\", \"rate_confirmation_sent_date\", \"rate_confirmation_status\", \"rate_expiration_basis\", \"rate_expiration_date\", \"rate_expiration_days\", \"rate_expiration_hours\", \"rate_expiration_minutes\", \"rdy_pickup_date\", \"recurring_movement_id\", \"reminder_sent\", \"required_vendor\", \"reserved\", \"return_date\", \"seg_alloc_code\", \"ss_location_id\", \"target_extra_stop_pay\", \"target_extra_stop_pay_c\", \"target_extra_stop_pay_d\", \"target_extra_stop_pay_n\", \"target_extra_stop_pay_r\", \"target_fuel_surcharge_pay\", \"target_pay_c\", \"target_pay_d\", \"target_pay_n\", \"target_pay_r\", \"target_pay_method\", \"target_pay_units\", \"target_rate_id\", \"time_to_send_msg\", \"tracking_request_status\", \"trailer_rent_pct\", \"trip_lease\", \"trip_mgt_recalc_datetime\", \"trip_mgt_tracking_id\", \"triumphpay_exclude\", \"trp_uid\", \"unlock_time\", \"waterfall_flood_time\", \"waterfall_in_progress\", \"xferred2fueltax\", \"xferred2fueltaxdt\", \"xmit_accepted\", \"xmitted2driver\", \"zmit_trip\", \"require_tracking\", \"ts_borrowing_company\", \"ts_commodity\", \"ts_movement_id\", \"tracking_duration_ext\", \"tracking_notify_email\", \"shpmt_ident_type\", \"shpmt_ident_value\", \"override_driver2_nm\", \"ic_company_to\", \"load_booking_source\", \"override_drvr2_email\", \"track_start_date\", \"br_track_vehicle_id\", \"br_track_status_desc\", \"pending_carrier_type\", \"shipper_email\", \"carrier_override_carrier\", \"pending_carrier_name\", \"override_driver2_id\", \"carrier_empty_from_city_id\", \"shipper_notify_frequency\", \"pending_carrier_nbr\", \"ic_order_to\", \"digital_booking\", \"is_intercompany\", \"override_drvr2_cell\", \"carrier_tractor\", \"carrier_trailer\", \"equipment_group_id\", \"empty2next_order\", \"eform_rate_confirmation\", \"override_pay_rate\", \"preassign_sequence\", \"carrier_trailer_type\", \"pending_payee_id\"}),",
        "    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each ([status] <> \"V\")),",
        "    //start replacing teams with parade",
        "    #\"Replaced Value\" = Table.ReplaceValue(#\"Filtered Rows\",\"team17\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value1\" = Table.ReplaceValue(#\"Replaced Value\",\"team16\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value2\" = Table.ReplaceValue(#\"Replaced Value1\",\"team15\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value3\" = Table.ReplaceValue(#\"Replaced Value2\",\"team14\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value4\" = Table.ReplaceValue(#\"Replaced Value3\",\"team13\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value5\" = Table.ReplaceValue(#\"Replaced Value4\",\"team12\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value6\" = Table.ReplaceValue(#\"Replaced Value5\",\"team10\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value7\" = Table.ReplaceValue(#\"Replaced Value6\",\"team9\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value8\" = Table.ReplaceValue(#\"Replaced Value7\",\"team8\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value9\" = Table.ReplaceValue(#\"Replaced Value8\",\"team7\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value10\" = Table.ReplaceValue(#\"Replaced Value9\",\"team6\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value11\" = Table.ReplaceValue(#\"Replaced Value10\",\"team5\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value12\" = Table.ReplaceValue(#\"Replaced Value11\",\"team4\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value13\" = Table.ReplaceValue(#\"Replaced Value12\",\"team3\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value14\" = Table.ReplaceValue(#\"Replaced Value13\",\"team2\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value15\" = Table.ReplaceValue(#\"Replaced Value14\",\"team1\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value16\" = Table.ReplaceValue(#\"Replaced Value15\",\"cdispatch\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    //end replace teams with parade",
        "    #\"Replaced Value17\" = Table.ReplaceValue(#\"Replaced Value16\",\"cbt\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Trimmed Text\" = Table.TransformColumns(#\"Replaced Value17\",{{\"dispatcher_user_id\", Text.Trim, type text}}),",
        "    #\"Uppercased Text\" = Table.TransformColumns(#\"Trimmed Text\",{{\"dispatcher_user_id\", Text.Upper, type text}})",
        "in",
        "    #\"Uppercased Text\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "MovementCutOffNumber",
      "lineageTag": "7b1d95af-7d84-440e-87b8-e089fa08fe15",
      "queryGroupId": "2beb8cee-e196-4d77-9b9d-fd2eeec8aa3e",
      "navigationStepName": "Navigation",
      "text": [
        "147110 meta [IsParameterQuery=true, Type=\"Number\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Number",
      "isHidden": false
    },
    {
      "name": "mcleod_historic_driver_extra_pay",
      "lineageTag": "c2f81b9b-4fbb-45cc-baa7-0086b2f2998d",
      "queryGroupId": "caaa80e5-0b68-49f7-8048-af185c067fb6",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Sql.Database(\"bl-appdb\", \"lme\"),",
        "    dbo_driver_extra_pay = Source{[Schema=\"dbo\",Item=\"driver_extra_pay\"]}[Data],",
        "    #\"Filtered Pay pre RefreshCutOffDate\" = Table.SelectRows(dbo_driver_extra_pay, each [amount_d] < RefreshCutOffDate),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Filtered Pay pre RefreshCutOffDate\",{\"company_id\", \"amount_c\", \"amount_d\", \"amount_n\", \"amount_r\", \"carrier_rate_id\", \"descr\", \"detention_hist_pay_id\", \"driver_id\", \"fuel_surcharge_pay\", \"jag_rate_id\", \"order_id\", \"rate\", \"reference_no\", \"rev_uid\", \"transaction_date\", \"units\"})",
        "in",
        "    #\"Removed Columns\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "mcleod_historic_movement_order",
      "lineageTag": "98afc80b-1ced-4813-84ff-49fa95dcea19",
      "queryGroupId": "caaa80e5-0b68-49f7-8048-af185c067fb6",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Sql.Database(\"bl-appdb\", \"lme\"),",
        "    dbo_movement_order = Source{[Schema=\"dbo\",Item=\"movement_order\"]}[Data],",
        "    #\"Changed Type\" = Table.TransformColumnTypes(dbo_movement_order,{{\"movement_id\", type number}}),",
        "    #\"Filtered Pre MovementCutOffNumber\" = Table.SelectRows(#\"Changed Type\", each [movement_id] < MovementCutOffNumber),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Filtered Pre MovementCutOffNumber\",{\"company_id\", \"id\", \"on_at_move_dest\", \"on_at_move_origin\", \"planned_manifest_id\"})",
        "in",
        "    #\"Removed Columns\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "movement_order",
      "lineageTag": "32c1816d-fe91-435a-8362-5ffc4dd06ca1",
      "queryGroupId": "caaa80e5-0b68-49f7-8048-af185c067fb6",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Sql.Database(\"bl-appdb\", \"lme\"),",
        "    dbo_movement_order = Source{[Schema=\"dbo\",Item=\"movement_order\"]}[Data],",
        "    #\"Changed Type\" = Table.TransformColumnTypes(dbo_movement_order,{{\"movement_id\", type number}}),",
        "    #\"Filtered >= MovementCutOffNumber\" = Table.SelectRows(#\"Changed Type\", each [movement_id] >= MovementCutOffNumber),",
        "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Filtered >= MovementCutOffNumber\",{{\"movement_id\", type text}}),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type1\",{\"company_id\", \"id\", \"on_at_move_dest\", \"on_at_move_origin\", \"planned_manifest_id\"}),",
        "    #\"Appended Query\" = Table.Combine({#\"Removed Columns\", mcleod_historic_movement_order}),",
        "    #\"Changed Type2\" = Table.TransformColumnTypes(#\"Appended Query\",{{\"movement_id\", type text}}),",
        "    #\"Trimmed Text\" = Table.TransformColumns(#\"Changed Type2\",{{\"movement_id\", Text.Trim, type text}})",
        "in",
        "    #\"Trimmed Text\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "historic_parade_orders",
      "lineageTag": "95446394-12c9-44d4-bfbc-ea7f8fb2d92d",
      "queryGroupId": "caaa80e5-0b68-49f7-8048-af185c067fb6",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = SharePoint.Files(\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam\", [ApiVersion = 15]),",
        "    #\"Reordered Columns\" = Table.ReorderColumns(Source,{\"Content\", \"Name\", \"Extension\", \"Date accessed\", \"Date modified\", \"Date created\", \"Folder Path\", \"Attributes\"}),",
        "    #\"Filtered Rows\" = Table.SelectRows(#\"Reordered Columns\", each Text.Contains([Folder Path], \"02 BL-Areas/bridge_iq/Data Sets/Parade/parade_orders_api_files\")),",
        "    #\"Filtered Hidden Files1\" = Table.SelectRows(#\"Filtered Rows\", each [Attributes]?[Hidden]? <> true),",
        "    #\"Invoke Custom Function1\" = Table.AddColumn(#\"Filtered Hidden Files1\", \"Transform File\", each #\"Transform File\"([Content])),",
        "    #\"Removed Other Columns1\" = Table.SelectColumns(#\"Invoke Custom Function1\", {\"Transform File\"}),",
        "    #\"Expanded Table Column1\" = Table.ExpandTableColumn(#\"Removed Other Columns1\", \"Transform File\", Table.ColumnNames(#\"Transform File\"(#\"Sample File\"))),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Table Column1\",{{\"id\", Int64.Type}, {\"reference_id\", type text}, {\"created_at\", type datetime}, {\"archived_at\", type datetime}, {\"src_city\", type text}, {\"src_state\", type text}, {\"src_date\", type date}, {\"src_postal_code\", type text}, {\"dst_city\", type text}, {\"dst_state\", type text}, {\"dst_date\", type date}, {\"dst_postal_code\", type text}, {\"num_stops\", Int64.Type}, {\"equipment\", type text}, {\"trailer_type\", type text}, {\"rate_customer\", type number}, {\"first_load\", type logical}, {\"customer_id\", type text}, {\"revenue_code\", Int64.Type}, {\"team_name\", type any}, {\"rep_email\", type text}, {\"rep_name\", type text}, {\"carrier_manager\", type text}, {\"category\", type text}, {\"conversion_category\", type text}, {\"partner\", type text}, {\"margin_amount\", type number}, {\"margin_pct\", type number}, {\"carrier_name\", type text}, {\"dot_number\", Int64.Type}, {\"mc_number\", Int64.Type}, {\"carrier_rate\", type number}}),",
        "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Changed Type\",{{\"rate_customer\", Currency.Type}, {\"margin_amount\", Currency.Type}}),",
        "    #\"Sorted Rows\" = Table.Sort(#\"Changed Type1\",{{\"reference_id\", Order.Ascending}}),",
        "    #\"Extracted Text After Delimiter\" = Table.TransformColumns(#\"Sorted Rows\", {{\"reference_id\", each Text.AfterDelimiter(_, \"-\"), type text}}),",
        "    #\"Removed Blank Rows\" = Table.SelectRows(#\"Extracted Text After Delimiter\", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {\"\", null}))),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Blank Rows\",{{\"reference_id\", \"movement_id\"}}),",
        "    #\"Filtered Rows1\" = Table.SelectRows(#\"Renamed Columns\", each ([category] <> \"outside_parade\") and ([conversion_category] <> \"Manually Assigned\")),",
        "    #\"Removed Duplicates\" = Table.Distinct(#\"Filtered Rows1\", {\"id\"}),",
        "    #\"Filtered orders before RefreshCutOffDate\" = Table.SelectRows(#\"Removed Duplicates\", each [created_at] < RefreshCutOffDate),",
        "    #\"Filtered Rows2\" = Table.SelectRows(#\"Filtered orders before RefreshCutOffDate\", each [conversion_category] <> null and [conversion_category] <> \"\")",
        "in",
        "    #\"Filtered Rows2\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "historic_behaviors",
      "lineageTag": "797f4845-cadf-4720-8f56-c0abeae60b99",
      "queryGroupId": "caaa80e5-0b68-49f7-8048-af185c067fb6",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = SharePoint.Files(\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam\", [ApiVersion = 15]),",
        "    #\"Filtered Rows\" = Table.SelectRows(Source, each Text.Contains([Folder Path], \"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared Documents/02 BL-Areas/bridge_iq/Data Sets/behaviors_api_files/\")),",
        "    #\"Filtered Hidden Files1\" = Table.SelectRows(#\"Filtered Rows\", each [Attributes]?[Hidden]? <> true),",
        "    #\"Filtered Hidden Files2\" = Table.SelectRows(#\"Filtered Hidden Files1\", each [Attributes]?[Hidden]? <> true),",
        "    #\"Invoke Custom Function1\" = Table.AddColumn(#\"Filtered Hidden Files2\", \"Transform File (4)\", each #\"Transform File (4)\"([Content])),",
        "    #\"Renamed Columns1\" = Table.RenameColumns(#\"Invoke Custom Function1\", {\"Name\", \"Source.Name\"}),",
        "    #\"Removed Other Columns1\" = Table.SelectColumns(#\"Renamed Columns1\", {\"Source.Name\", \"Transform File (4)\"}),",
        "    #\"Expanded Table Column1\" = Table.ExpandTableColumn(#\"Removed Other Columns1\", \"Transform File (4)\", Table.ColumnNames(#\"Transform File (4)\"(#\"Sample File (4)\"))),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Table Column1\",{{\"Source.Name\", type text}, {\"id\", Int64.Type}, {\"date\", type datetime}, {\"author_id\", type any}, {\"mail_activity_type_id\", type text}, {\"model\", type text}, {\"res_id\", Int64.Type}}),",
        "    #\"Filtered Rows1\" = Table.SelectRows(#\"Changed Type\", each true),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Filtered Rows1\",{\"Source.Name\"}),",
        "    #\"Extracted Text Between Delimiters\" = Table.TransformColumns(#\"Removed Columns\", {{\"author_id\", each Text.BetweenDelimiters(_, \"'\", \"'\"), type text}, {\"mail_activity_type_id\", each Text.BetweenDelimiters(_, \"'\", \"'\"), type text}}),",
        "    #\"Replaced Errors\" = Table.ReplaceErrorValues(#\"Extracted Text Between Delimiters\", {{\"author_id\", null}}),",
        "    #\"Filtered Rows2\" = Table.SelectRows(#\"Replaced Errors\", each ([model] <> \"gamification.badge.user\") and ([author_id] <> null and [author_id] <> \"OdooBot\" and [author_id] <> \"Portal User Template\")),",
        "    #\"Inserted Time\" = Table.AddColumn(#\"Filtered Rows2\", \"Time\", each DateTime.Time([date]), type time),",
        "    #\"Renamed Columns2\" = Table.RenameColumns(#\"Inserted Time\",{{\"date\", \"Behavior Date\"}, {\"Time\", \"Behavior Time\"}}),",
        "    #\"Filtered Rows3\" = Table.SelectRows(#\"Renamed Columns2\", each [Behavior Date] < RefreshCutOffDate),",
        "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Filtered Rows3\",{{\"Behavior Date\", type date}}),",
        "    #\"Inserted Start of Month\" = Table.AddColumn(#\"Changed Type1\", \"Start of Month\", each Date.StartOfMonth([Behavior Date]), type date)",
        "in",
        "    #\"Inserted Start of Month\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "historic_callins",
      "lineageTag": "56bd229e-e47a-4149-814e-6b72b080d909",
      "queryGroupId": "caaa80e5-0b68-49f7-8048-af185c067fb6",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Sql.Database(\"bl-appdb\", \"lme\"),",
        "    dbo_callin = Source{[Schema=\"dbo\",Item=\"callin\"]}[Data],",
        "    #\"Removed Other Columns\" = Table.SelectColumns(dbo_callin,{\"entered_by\", \"entered_date\", \"movement_status\", \"payee_id\", \"initiated_type\", \"movement_id\"}),",
        "    #\"Filtered callins before RefreshCutOffDate\" = Table.SelectRows(#\"Removed Other Columns\", each [entered_date] < RefreshCutOffDate),",
        "    #\"Inserted Time\" = Table.AddColumn(#\"Filtered callins before RefreshCutOffDate\", \"Time\", each DateTime.Time([entered_date]), type time),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Inserted Time\",{{\"Time\", \"entered_time\"}}),",
        "    #\"Extracted Date\" = Table.TransformColumns(#\"Renamed Columns\",{{\"entered_date\", DateTime.Date, type date}}),",
        "    #\"Calculated Start of Hour\" = Table.TransformColumns(#\"Extracted Date\",{{\"entered_time\", Time.StartOfHour, type time}})",
        "in",
        "    #\"Calculated Start of Hour\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "movements",
      "lineageTag": "4d68b890-a71e-49b5-b4ab-a9a72c28eef7",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Sql.Database(\"bl-appdb\", \"lme\"),",
        "    dbo_movement = Source{[Schema=\"dbo\",Item=\"movement\"]}[Data],",
        "    #\"Changed Type\" = Table.TransformColumnTypes(dbo_movement,{{\"id\", type number}}),",
        "    #\"filtered movements >= MovmentCuttOFfNumber\" = Table.SelectRows(#\"Changed Type\", each [id] >= MovementCutOffNumber),",
        "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"filtered movements >= MovmentCuttOFfNumber\",{{\"id\", type text}}),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type1\",{\"company_id\", \"authorized\", \"average_broker_rating\", \"booking_no\", \"br_details_link\", \"br_status_link\", \"br_track_interval\", \"br_track_status\", \"br_tracking_id\", \"br_vendor\", \"broker_avail_tract\", \"brokerage\", \"carrier_contact\", \"carrier_email\", \"carrier_fuel_pay_rate_id\", \"carrier_lane_rate_id\", \"carrier_override_user\", \"carrier_phone\", \"carrier_rate_id\", \"chassis\", \"checkcall_sched_id\", \"container\", \"container_returned\", \"container_status\", \"controlling_carrier_code\", \"dedicated_order_id\", \"est_tolls\", \"est_tolls_c\", \"est_tolls_d\", \"est_tolls_n\", \"est_tolls_r\", \"exclude_movement\", \"fleet_manager\", \"freight_matching_override\", \"fuel_distance_um\", \"fuel_tax_exempt\", \"hubtran_approved_inv_date\", \"hubtran_ok2pay_date\", \"integrated_carrier_search\", \"is_container\", \"is_dray\", \"is_local_mile\", \"linked_id\", \"linked_sequence\", \"loaded\", \"locked_user_id\", \"ltl\", \"ltl_staging_wrs_uid\", \"macropoint_status\", \"manifest_empty_distance\", \"manifest_estimated_arrival\", \"manifest_estimated_depart\", \"manifest_id\", \"manifest_loaded_distance\", \"manifest_reg_uid\", \"manifest_spots_capacity\", \"manifest_spots_consumed\", \"manifest_weight_capacity\", \"manifest_weight_consumed\", \"max_buy_c\", \"max_buy_d\", \"max_buy_n\", \"max_buy_r\", \"max_pay_method\", \"max_pay_units\", \"missed_call_sent\", \"fuel_distance\", \"move_distance_um\", \"movement_type\", \"must_respond_by\", \"next_sched_call\", \"operational_status\", \"operations_user\", \"override_crny_type\", \"override_driver_id\", \"override_driver_nm\", \"override_drvr_cell\", \"override_drvr_email\", \"override_max_pay\", \"override_max_pay_c\", \"override_max_pay_d\", \"override_max_pay_n\", \"override_max_pay_r\", \"override_pay_amt_c\", \"override_pay_amt_d\", \"override_pay_amt_n\", \"override_pay_amt_r\", \"override_paye_rate\", \"override_targetpay_c\", \"override_targetpay_d\", \"override_targetpay_n\", \"override_targetpay_r\", \"override_unit_desc\", \"override_units\", \"pay_distance\", \"pay_distance_um\", \"placard_required\", \"priority\", \"pro_nbr\", \"rate_alert_basis\", \"rate_alert_date\", \"rate_alert_days\", \"rate_alert_hours\", \"rate_alert_minutes\", \"rate_confirm_template\", \"rate_confirmation_sent_date\", \"rate_confirmation_status\", \"rate_expiration_basis\", \"rate_expiration_date\", \"rate_expiration_days\", \"rate_expiration_hours\", \"rate_expiration_minutes\", \"rdy_pickup_date\", \"recurring_movement_id\", \"reminder_sent\", \"required_vendor\", \"reserved\", \"return_date\", \"seg_alloc_code\", \"ss_location_id\", \"target_extra_stop_pay\", \"target_extra_stop_pay_c\", \"target_extra_stop_pay_d\", \"target_extra_stop_pay_n\", \"target_extra_stop_pay_r\", \"target_fuel_surcharge_pay\", \"target_pay_c\", \"target_pay_d\", \"target_pay_n\", \"target_pay_r\", \"target_pay_method\", \"target_pay_units\", \"target_rate_id\", \"time_to_send_msg\", \"tracking_request_status\", \"trailer_rent_pct\", \"trip_lease\", \"trip_mgt_recalc_datetime\", \"trip_mgt_tracking_id\", \"triumphpay_exclude\", \"trp_uid\", \"unlock_time\", \"waterfall_flood_time\", \"waterfall_in_progress\", \"xferred2fueltax\", \"xferred2fueltaxdt\", \"xmit_accepted\", \"xmitted2driver\", \"zmit_trip\", \"require_tracking\", \"ts_borrowing_company\", \"ts_commodity\", \"ts_movement_id\", \"tracking_duration_ext\", \"tracking_notify_email\", \"shpmt_ident_type\", \"shpmt_ident_value\", \"override_driver2_nm\", \"ic_company_to\", \"load_booking_source\", \"override_drvr2_email\", \"track_start_date\", \"br_track_vehicle_id\", \"br_track_status_desc\", \"pending_carrier_type\", \"shipper_email\", \"carrier_override_carrier\", \"pending_carrier_name\", \"override_driver2_id\", \"carrier_empty_from_city_id\", \"shipper_notify_frequency\", \"pending_carrier_nbr\", \"ic_order_to\", \"digital_booking\", \"is_intercompany\", \"override_drvr2_cell\", \"carrier_tractor\", \"carrier_trailer\", \"equipment_group_id\", \"empty2next_order\", \"eform_rate_confirmation\", \"override_pay_rate\", \"preassign_sequence\", \"carrier_trailer_type\", \"pending_payee_id\"}),",
        "    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Columns\", each ([status] <> \"V\")),",
        "   //start replacing teams with parade",
        "    #\"Replaced Value\" = Table.ReplaceValue(#\"Filtered Rows\",\"team17\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value1\" = Table.ReplaceValue(#\"Replaced Value\",\"team16\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value2\" = Table.ReplaceValue(#\"Replaced Value1\",\"team15\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value3\" = Table.ReplaceValue(#\"Replaced Value2\",\"team14\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value4\" = Table.ReplaceValue(#\"Replaced Value3\",\"team13\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value5\" = Table.ReplaceValue(#\"Replaced Value4\",\"team12\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value6\" = Table.ReplaceValue(#\"Replaced Value5\",\"team10\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value7\" = Table.ReplaceValue(#\"Replaced Value6\",\"team9\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value8\" = Table.ReplaceValue(#\"Replaced Value7\",\"team8\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value9\" = Table.ReplaceValue(#\"Replaced Value8\",\"team7\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value10\" = Table.ReplaceValue(#\"Replaced Value9\",\"team6\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value11\" = Table.ReplaceValue(#\"Replaced Value10\",\"team5\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value12\" = Table.ReplaceValue(#\"Replaced Value11\",\"team4\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value13\" = Table.ReplaceValue(#\"Replaced Value12\",\"team3\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value14\" = Table.ReplaceValue(#\"Replaced Value13\",\"team2\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value15\" = Table.ReplaceValue(#\"Replaced Value14\",\"team1\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Replaced Value16\" = Table.ReplaceValue(#\"Replaced Value15\",\"cdispatch\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    //end replace teams with parade",
        "    #\"Replaced Value17\" = Table.ReplaceValue(#\"Replaced Value16\",\"cbt\",\"parade\",Replacer.ReplaceText,{\"dispatcher_user_id\"}),",
        "    #\"Trimmed Text1\" = Table.TransformColumns(#\"Replaced Value17\",{{\"dispatcher_user_id\", Text.Trim, type text}}),",
        "    #\"Uppercased Text\" = Table.TransformColumns(#\"Trimmed Text1\",{{\"dispatcher_user_id\", Text.Upper, type text}}),",
        "    #\"Appended Query\" = Table.Combine({#\"Uppercased Text\", mcleod_historic_movement}),",
        "    #\"Trimmed Text\" = Table.TransformColumns(#\"Appended Query\",{{\"id\", Text.Trim, type text}}),",
        "    #\"Merged Queries\" = Table.NestedJoin(#\"Trimmed Text\", {\"id\"}, movement_order, {\"movement_id\"}, \"movement_order\", JoinKind.LeftOuter),",
        "    #\"Expanded movement_order\" = Table.ExpandTableColumn(#\"Merged Queries\", \"movement_order\", {\"order_id\", \"sequence\"}, {\"order_id\", \"sequence\"}),",
        "    #\"Appended Query1\" = Table.Combine({#\"Expanded movement_order\", pcs_movements}),",
        "    #\"Changed Type2\" = Table.TransformColumnTypes(#\"Appended Query1\",{{\"invoice_recv_date\", type date}, {\"xfer2settle_date\", type date}, {\"target_pay\", Currency.Type}, {\"override_targetpay\", Currency.Type}, {\"override_pay_amt\", Currency.Type}, {\"max_buy\", Currency.Type}}),",
        "    #\"Merged Queries1\" = Table.NestedJoin(#\"Changed Type2\", {\"id\"}, parade_orders, {\"movement_id\"}, \"parade_orders\", JoinKind.LeftOuter),",
        "    #\"Expanded parade_orders\" = Table.ExpandTableColumn(#\"Merged Queries1\", \"parade_orders\", {\"id\"}, {\"parade_orders.id\"}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Expanded parade_orders\",{{\"dispatcher_user_id\", \"dispatcher_user_id_old\"}}),",
        "    #\"Added Conditional Column\" = Table.AddColumn(#\"Renamed Columns\", \"dispatcher_user_id\", each if [parade_orders.id] = null then [dispatcher_user_id_old] else \"parade\"),",
        "    #\"Removed Columns1\" = Table.RemoveColumns(#\"Added Conditional Column\",{\"parade_orders.id\", \"dispatcher_user_id_old\"}),",
        "    #\"Merged Queries2\" = Table.NestedJoin(#\"Removed Columns1\", {\"id\"}, dnc, {\"DNC\"}, \"dnc\", JoinKind.LeftOuter),",
        "    #\"Expanded dnc\" = Table.ExpandTableColumn(#\"Merged Queries2\", \"dnc\", {\"DNC\"}, {\"dnc.DNC\"}),",
        "    #\"Added Conditional Column1\" = Table.AddColumn(#\"Expanded dnc\", \"dnc\", each if [dnc.DNC] = null then false else true),",
        "    #\"Changed Type3\" = Table.TransformColumnTypes(#\"Added Conditional Column1\",{{\"dnc\", type logical}}),",
        "    #\"Removed Columns2\" = Table.RemoveColumns(#\"Changed Type3\",{\"dnc.DNC\"})",
        "in",
        "    #\"Removed Columns2\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = Sql.Database(\\\"bl-appdb\\\", \\\"lme\\\"),\\r\\n    dbo_movement = Source{[Schema=\\\"dbo\\\",Item=\\\"movement\\\"]}[Data],\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(dbo_movement,{{\\\"id\\\", type number}}),\\r\\n    #\\\"filtered movements >= MovmentCuttOFfNumber\\\" = Table.SelectRows(#\\\"Changed Type\\\", each [id] >= MovementCutOffNumber),\\r\\n    #\\\"Changed Type1\\\" = Table.TransformColumnTypes(#\\\"filtered movements >= MovmentCuttOFfNumber\\\",{{\\\"id\\\", type text}}),\\r\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(#\\\"Changed Type1\\\",{\\\"company_id\\\", \\\"authorized\\\", \\\"average_broker_rating\\\", \\\"booking_no\\\", \\\"br_details_link\\\", \\\"br_status_link\\\", \\\"br_track_interval\\\", \\\"br_track_status\\\", \\\"br_tracking_id\\\", \\\"br_vendor\\\", \\\"broker_avail_tract\\\", \\\"brokerage\\\", \\\"carrier_contact\\\", \\\"carrier_email\\\", \\\"carrier_fuel_pay_rate_id\\\", \\\"carrier_lane_rate_id\\\", \\\"carrier_override_user\\\", \\\"carrier_phone\\\", \\\"carrier_rate_id\\\", \\\"chassis\\\", \\\"checkcall_sched_id\\\", \\\"container\\\", \\\"container_returned\\\", \\\"container_status\\\", \\\"controlling_carrier_code\\\", \\\"dedicated_order_id\\\", \\\"est_tolls\\\", \\\"est_tolls_c\\\", \\\"est_tolls_d\\\", \\\"est_tolls_n\\\", \\\"est_tolls_r\\\", \\\"exclude_movement\\\", \\\"fleet_manager\\\", \\\"freight_matching_override\\\", \\\"fuel_distance_um\\\", \\\"fuel_tax_exempt\\\", \\\"hubtran_approved_inv_date\\\", \\\"hubtran_ok2pay_date\\\", \\\"integrated_carrier_search\\\", \\\"is_container\\\", \\\"is_dray\\\", \\\"is_local_mile\\\", \\\"linked_id\\\", \\\"linked_sequence\\\", \\\"loaded\\\", \\\"locked_user_id\\\", \\\"ltl\\\", \\\"ltl_staging_wrs_uid\\\", \\\"macropoint_status\\\", \\\"manifest_empty_distance\\\", \\\"manifest_estimated_arrival\\\", \\\"manifest_estimated_depart\\\", \\\"manifest_id\\\", \\\"manifest_loaded_distance\\\", \\\"manifest_reg_uid\\\", \\\"manifest_spots_capacity\\\", \\\"manifest_spots_consumed\\\", \\\"manifest_weight_capacity\\\", \\\"manifest_weight_consumed\\\", \\\"max_buy_c\\\", \\\"max_buy_d\\\", \\\"max_buy_n\\\", \\\"max_buy_r\\\", \\\"max_pay_method\\\", \\\"max_pay_units\\\", \\\"missed_call_sent\\\", \\\"fuel_distance\\\", \\\"move_distance_um\\\", \\\"movement_type\\\", \\\"must_respond_by\\\", \\\"next_sched_call\\\", \\\"operational_status\\\", \\\"operations_user\\\", \\\"override_crny_type\\\", \\\"override_driver_id\\\", \\\"override_driver_nm\\\", \\\"override_drvr_cell\\\", \\\"override_drvr_email\\\", \\\"override_max_pay\\\", \\\"override_max_pay_c\\\", \\\"override_max_pay_d\\\", \\\"override_max_pay_n\\\", \\\"override_max_pay_r\\\", \\\"override_pay_amt_c\\\", \\\"override_pay_amt_d\\\", \\\"override_pay_amt_n\\\", \\\"override_pay_amt_r\\\", \\\"override_paye_rate\\\", \\\"override_targetpay_c\\\", \\\"override_targetpay_d\\\", \\\"override_targetpay_n\\\", \\\"override_targetpay_r\\\", \\\"override_unit_desc\\\", \\\"override_units\\\", \\\"pay_distance\\\", \\\"pay_distance_um\\\", \\\"placard_required\\\", \\\"priority\\\", \\\"pro_nbr\\\", \\\"rate_alert_basis\\\", \\\"rate_alert_date\\\", \\\"rate_alert_days\\\", \\\"rate_alert_hours\\\", \\\"rate_alert_minutes\\\", \\\"rate_confirm_template\\\", \\\"rate_confirmation_sent_date\\\", \\\"rate_confirmation_status\\\", \\\"rate_expiration_basis\\\", \\\"rate_expiration_date\\\", \\\"rate_expiration_days\\\", \\\"rate_expiration_hours\\\", \\\"rate_expiration_minutes\\\", \\\"rdy_pickup_date\\\", \\\"recurring_movement_id\\\", \\\"reminder_sent\\\", \\\"required_vendor\\\", \\\"reserved\\\", \\\"return_date\\\", \\\"seg_alloc_code\\\", \\\"ss_location_id\\\", \\\"target_extra_stop_pay\\\", \\\"target_extra_stop_pay_c\\\", \\\"target_extra_stop_pay_d\\\", \\\"target_extra_stop_pay_n\\\", \\\"target_extra_stop_pay_r\\\", \\\"target_fuel_surcharge_pay\\\", \\\"target_pay_c\\\", \\\"target_pay_d\\\", \\\"target_pay_n\\\", \\\"target_pay_r\\\", \\\"target_pay_method\\\", \\\"target_pay_units\\\", \\\"target_rate_id\\\", \\\"time_to_send_msg\\\", \\\"tracking_request_status\\\", \\\"trailer_rent_pct\\\", \\\"trip_lease\\\", \\\"trip_mgt_recalc_datetime\\\", \\\"trip_mgt_tracking_id\\\", \\\"triumphpay_exclude\\\", \\\"trp_uid\\\", \\\"unlock_time\\\", \\\"waterfall_flood_time\\\", \\\"waterfall_in_progress\\\", \\\"xferred2fueltax\\\", \\\"xferred2fueltaxdt\\\", \\\"xmit_accepted\\\", \\\"xmitted2driver\\\", \\\"zmit_trip\\\", \\\"require_tracking\\\", \\\"ts_borrowing_company\\\", \\\"ts_commodity\\\", \\\"ts_movement_id\\\", \\\"tracking_duration_ext\\\", \\\"tracking_notify_email\\\", \\\"shpmt_ident_type\\\", \\\"shpmt_ident_value\\\", \\\"override_driver2_nm\\\", \\\"ic_company_to\\\", \\\"load_booking_source\\\", \\\"override_drvr2_email\\\", \\\"track_start_date\\\", \\\"br_track_vehicle_id\\\", \\\"br_track_status_desc\\\", \\\"pending_carrier_type\\\", \\\"shipper_email\\\", \\\"carrier_override_carrier\\\", \\\"pending_carrier_name\\\", \\\"override_driver2_id\\\", \\\"carrier_empty_from_city_id\\\", \\\"shipper_notify_frequency\\\", \\\"pending_carrier_nbr\\\", \\\"ic_order_to\\\", \\\"digital_booking\\\", \\\"is_intercompany\\\", \\\"override_drvr2_cell\\\", \\\"carrier_tractor\\\", \\\"carrier_trailer\\\", \\\"equipment_group_id\\\", \\\"empty2next_order\\\", \\\"eform_rate_confirmation\\\", \\\"override_pay_rate\\\", \\\"preassign_sequence\\\", \\\"carrier_trailer_type\\\", \\\"pending_payee_id\\\"}),\\r\\n    #\\\"Filtered Rows\\\" = Table.SelectRows(#\\\"Removed Columns\\\", each ([status] <> \\\"V\\\")),\\r\\n   //start replacing teams with parade\\r\\n    #\\\"Replaced Value\\\" = Table.ReplaceValue(#\\\"Filtered Rows\\\",\\\"team17\\\",\\\"parade\\\",Replacer.ReplaceText,{\\\"dispatcher_user_id\\\"}),\\r\\n    #\\\"Replaced Value1\\\" = Table.ReplaceValue(#\\\"Replaced Value\\\",\\\"team16\\\",\\\"parade\\\",Replacer.ReplaceText,{\\\"dispatcher_user_id\\\"}),\\r\\n    #\\\"Replaced Value2\\\" = Table.ReplaceValue(#\\\"Replaced Value1\\\",\\\"team15\\\",\\\"parade\\\",Replacer.ReplaceText,{\\\"dispatcher_user_id\\\"}),\\r\\n    #\\\"Replaced Value3\\\" = Table.ReplaceValue(#\\\"Replaced Value2\\\",\\\"team14\\\",\\\"parade\\\",Replacer.ReplaceText,{\\\"dispatcher_user_id\\\"}),\\r\\n    #\\\"Replaced Value4\\\" = Table.ReplaceValue(#\\\"Replaced Value3\\\",\\\"team13\\\",\\\"parade\\\",Replacer.ReplaceText,{\\\"dispatcher_user_id\\\"}),\\r\\n    #\\\"Replaced Value5\\\" = Table.ReplaceValue(#\\\"Replaced Value4\\\",\\\"team12\\\",\\\"parade\\\",Replacer.ReplaceText,{\\\"dispatcher_user_id\\\"}),\\r\\n    #\\\"Replaced Value6\\\" = Table.ReplaceValue(#\\\"Replaced Value5\\\",\\\"team10\\\",\\\"parade\\\",Replacer.ReplaceText,{\\\"dispatcher_user_id\\\"}),\\r\\n    #\\\"Replaced Value7\\\" = Table.ReplaceValue(#\\\"Replaced Value6\\\",\\\"team9\\\",\\\"parade\\\",Replacer.ReplaceText,{\\\"dispatcher_user_id\\\"}),\\r\\n    #\\\"Replaced Value8\\\" = Table.ReplaceValue(#\\\"Replaced Value7\\\",\\\"team8\\\",\\\"parade\\\",Replacer.ReplaceText,{\\\"dispatcher_user_id\\\"}),\\r\\n    #\\\"Replaced Value9\\\" = Table.ReplaceValue(#\\\"Replaced Value8\\\",\\\"team7\\\",\\\"parade\\\",Replacer.ReplaceText,{\\\"dispatcher_user_id\\\"}),\\r\\n    #\\\"Replaced Value10\\\" = Table.ReplaceValue(#\\\"Replaced Value9\\\",\\\"team6\\\",\\\"parade\\\",Replacer.ReplaceText,{\\\"dispatcher_user_id\\\"}),\\r\\n    #\\\"Replaced Value11\\\" = Table.ReplaceValue(#\\\"Replaced Value10\\\",\\\"team5\\\",\\\"parade\\\",Replacer.ReplaceText,{\\\"dispatcher_user_id\\\"}),\\r\\n    #\\\"Replaced Value12\\\" = Table.ReplaceValue(#\\\"Replaced Value11\\\",\\\"team4\\\",\\\"parade\\\",Replacer.ReplaceText,{\\\"dispatcher_user_id\\\"}),\\r\\n    #\\\"Replaced Value13\\\" = Table.ReplaceValue(#\\\"Replaced Value12\\\",\\\"team3\\\",\\\"parade\\\",Replacer.ReplaceText,{\\\"dispatcher_user_id\\\"}),\\r\\n    #\\\"Replaced Value14\\\" = Table.ReplaceValue(#\\\"Replaced Value13\\\",\\\"team2\\\",\\\"parade\\\",Replacer.ReplaceText,{\\\"dispatcher_user_id\\\"}),\\r\\n    #\\\"Replaced Value15\\\" = Table.ReplaceValue(#\\\"Replaced Value14\\\",\\\"team1\\\",\\\"parade\\\",Replacer.ReplaceText,{\\\"dispatcher_user_id\\\"}),\\r\\n    #\\\"Replaced Value16\\\" = Table.ReplaceValue(#\\\"Replaced Value15\\\",\\\"cdispatch\\\",\\\"parade\\\",Replacer.ReplaceText,{\\\"dispatcher_user_id\\\"}),\\r\\n    //end replace teams with parade\\r\\n    #\\\"Replaced Value17\\\" = Table.ReplaceValue(#\\\"Replaced Value16\\\",\\\"cbt\\\",\\\"parade\\\",Replacer.ReplaceText,{\\\"dispatcher_user_id\\\"}),\\r\\n    #\\\"Trimmed Text1\\\" = Table.TransformColumns(#\\\"Replaced Value17\\\",{{\\\"dispatcher_user_id\\\", Text.Trim, type text}}),\\r\\n    #\\\"Uppercased Text\\\" = Table.TransformColumns(#\\\"Trimmed Text1\\\",{{\\\"dispatcher_user_id\\\", Text.Upper, type text}}),\\r\\n    #\\\"Appended Query\\\" = Table.Combine({#\\\"Uppercased Text\\\", mcleod_historic_movement}),\\r\\n    #\\\"Trimmed Text\\\" = Table.TransformColumns(#\\\"Appended Query\\\",{{\\\"id\\\", Text.Trim, type text}}),\\r\\n    #\\\"Merged Queries\\\" = Table.NestedJoin(#\\\"Trimmed Text\\\", {\\\"id\\\"}, movement_order, {\\\"movement_id\\\"}, \\\"movement_order\\\", JoinKind.LeftOuter),\\r\\n    #\\\"Expanded movement_order\\\" = Table.ExpandTableColumn(#\\\"Merged Queries\\\", \\\"movement_order\\\", {\\\"order_id\\\", \\\"sequence\\\"}, {\\\"order_id\\\", \\\"sequence\\\"}),\\r\\n    #\\\"Appended Query1\\\" = Table.Combine({#\\\"Expanded movement_order\\\", pcs_movements}),\\r\\n    #\\\"Changed Type2\\\" = Table.TransformColumnTypes(#\\\"Appended Query1\\\",{{\\\"invoice_recv_date\\\", type date}, {\\\"xfer2settle_date\\\", type date}, {\\\"target_pay\\\", Currency.Type}, {\\\"override_targetpay\\\", Currency.Type}, {\\\"override_pay_amt\\\", Currency.Type}, {\\\"max_buy\\\", Currency.Type}}),\\r\\n    #\\\"Merged Queries1\\\" = Table.NestedJoin(#\\\"Changed Type2\\\", {\\\"id\\\"}, parade_orders, {\\\"movement_id\\\"}, \\\"parade_orders\\\", JoinKind.LeftOuter),\\r\\n    #\\\"Expanded parade_orders\\\" = Table.ExpandTableColumn(#\\\"Merged Queries1\\\", \\\"parade_orders\\\", {\\\"id\\\"}, {\\\"parade_orders.id\\\"}),\\r\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Expanded parade_orders\\\",{{\\\"dispatcher_user_id\\\", \\\"dispatcher_user_id_old\\\"}}),\\r\\n    #\\\"Added Conditional Column\\\" = Table.AddColumn(#\\\"Renamed Columns\\\", \\\"dispatcher_user_id\\\", each if [parade_orders.id] = null then [dispatcher_user_id_old] else \\\"parade\\\"),\\r\\n    #\\\"Removed Columns1\\\" = Table.RemoveColumns(#\\\"Added Conditional Column\\\",{\\\"parade_orders.id\\\", \\\"dispatcher_user_id_old\\\"}),\\r\\n    #\\\"Merged Queries2\\\" = Table.NestedJoin(#\\\"Removed Columns1\\\", {\\\"id\\\"}, dnc, {\\\"DNC\\\"}, \\\"dnc\\\", JoinKind.LeftOuter),\\r\\n    #\\\"Expanded dnc\\\" = Table.ExpandTableColumn(#\\\"Merged Queries2\\\", \\\"dnc\\\", {\\\"DNC\\\"}, {\\\"dnc.DNC\\\"}),\\r\\n    #\\\"Added Conditional Column1\\\" = Table.AddColumn(#\\\"Expanded dnc\\\", \\\"dnc\\\", each if [dnc.DNC] = null then false else true),\\r\\n    #\\\"Changed Type3\\\" = Table.TransformColumnTypes(#\\\"Added Conditional Column1\\\",{{\\\"dnc\\\", type logical}}),\\r\\n    #\\\"Removed Columns2\\\" = Table.RemoveColumns(#\\\"Changed Type3\\\",{\\\"dnc.DNC\\\"})\\r\\nin\\r\\n    #\\\"Removed Columns2\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "driver_extra_pay",
      "lineageTag": "2ebdc404-318f-4cf1-accc-1504a5c41207",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Sql.Database(\"bl-appdb\", \"lme\"),",
        "    dbo_driver_extra_pay = Source{[Schema=\"dbo\",Item=\"driver_extra_pay\"]}[Data],",
        "    #\"Filtered Pay post RefreshCutOfDate\" = Table.SelectRows(dbo_driver_extra_pay, each [amount_d] >= RefreshCutOffDate),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Filtered Pay post RefreshCutOfDate\",{\"company_id\", \"amount_c\", \"amount_d\", \"amount_n\", \"amount_r\", \"carrier_rate_id\", \"descr\", \"detention_hist_pay_id\", \"driver_id\", \"fuel_surcharge_pay\", \"jag_rate_id\", \"order_id\", \"rate\", \"reference_no\", \"rev_uid\", \"transaction_date\", \"units\"}),",
        "    #\"Appended Query\" = Table.Combine({#\"Removed Columns\", mcleod_historic_driver_extra_pay})",
        "in",
        "    #\"Appended Query\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = Sql.Database(\\\"bl-appdb\\\", \\\"lme\\\"),\\r\\n    dbo_driver_extra_pay = Source{[Schema=\\\"dbo\\\",Item=\\\"driver_extra_pay\\\"]}[Data],\\r\\n    #\\\"Filtered Pay post RefreshCutOfDate\\\" = Table.SelectRows(dbo_driver_extra_pay, each [amount_d] >= RefreshCutOffDate),\\r\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(#\\\"Filtered Pay post RefreshCutOfDate\\\",{\\\"company_id\\\", \\\"amount_c\\\", \\\"amount_d\\\", \\\"amount_n\\\", \\\"amount_r\\\", \\\"carrier_rate_id\\\", \\\"descr\\\", \\\"detention_hist_pay_id\\\", \\\"driver_id\\\", \\\"fuel_surcharge_pay\\\", \\\"jag_rate_id\\\", \\\"order_id\\\", \\\"rate\\\", \\\"reference_no\\\", \\\"rev_uid\\\", \\\"transaction_date\\\", \\\"units\\\"}),\\r\\n    #\\\"Appended Query\\\" = Table.Combine({#\\\"Removed Columns\\\", mcleod_historic_driver_extra_pay})\\r\\nin\\r\\n    #\\\"Appended Query\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Calendar",
      "lineageTag": "c583c9ce-20dd-43b3-818e-c9d8da9a588a",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    //Variables",
        "    StartDate = #date(2001,1,1),",
        "    EndDate = #date(2025,12,31),",
        "    Duration = Duration.Days(Duration.From(EndDate-StartDate))+1,",
        "    Today = DateTime.Date(DateTime.LocalNow()),",
        "",
        "    //Date Columns",
        "    Dates = List.Dates(StartDate,Duration,#duration(1,0,0,0)),",
        "    #\"Converted to Table\" = Table.FromList(Dates, Splitter.SplitByNothing(), null, null, ExtraValues.Error),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Converted to Table\",{{\"Column1\", \"Date\"}}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\",{{\"Date\", type date}}),",
        "    #\"Inserted Start of Month\" = Table.AddColumn(#\"Changed Type\", \"Start of Month\", each Date.StartOfMonth([Date]), type date),",
        "    #\"Inserted Year\" = Table.AddColumn(#\"Inserted Start of Month\", \"Year\", each Date.Year([Date]), Int64.Type),",
        "    #\"Inserted Quarter\" = Table.AddColumn(#\"Inserted Year\", \"Quarter\", each \"Q\"&Text.From(Date.QuarterOfYear([Date]))),",
        "    #\"Inserted QuarterNmb\" = Table.AddColumn(#\"Inserted Quarter\", \"QuarterNmb\", each Date.QuarterOfYear([Date]), Int64.Type),",
        "    #\"Inserted Month Name\" = Table.AddColumn(#\"Inserted QuarterNmb\", \"Month Name\", each Date.MonthName([Date]), type text),",
        "    #\"Inserted MonthAbv\" = Table.AddColumn(#\"Inserted Month Name\", \"MonthAbv\", each Text.Start(Date.MonthName([Date]),3), type text),",
        "    #\"Inserted MonthNmb\" = Table.AddColumn(#\"Inserted MonthAbv\", \"MonthNmb\", each Date.Month([Date]), Int64.Type),",
        "    #\"Inserted Week of Year\" = Table.AddColumn(#\"Inserted MonthNmb\", \"Week of Year\", each Date.WeekOfYear([Date]), Int64.Type),",
        "    #\"Inserted Week of Month\" = Table.AddColumn(#\"Inserted Week of Year\", \"Week of Month\", each Date.WeekOfMonth([Date]), Int64.Type),",
        "    #\"Inserted Day of Year\" = Table.AddColumn(#\"Inserted Week of Month\", \"Day of Year\", each Date.DayOfYear([Date]), Int64.Type),",
        "    #\"Inserted Day of Month\" = Table.AddColumn(#\"Inserted Day of Year\", \"Day of Month\", each Date.Day([Date]), Int64.Type),",
        "    #\"Inserted Day of Week\" = Table.AddColumn(#\"Inserted Day of Month\", \"Day of Week\", each Date.DayOfWeek([Date]), Int64.Type),",
        "    #\"Inserted Day Name\" = Table.AddColumn(#\"Inserted Day of Week\", \"Day Name\", each Date.DayOfWeekName([Date]), type text),",
        "    #\"Inserted Is Past\" = Table.AddColumn(#\"Inserted Day Name\", \"Is Past\", each [Date]<Today),",
        "    #\"Changed Is Past to True False\" = Table.TransformColumnTypes(#\"Inserted Is Past\",{{\"Is Past\", type logical}}),",
        "    #\"Added Custom\" = Table.AddColumn(#\"Changed Is Past to True False\", \"Month / Year\", each Date.ToText([Date], \"MMM/yyyy\")),",
        "    #\"Added Day of Quarter\" = Table.AddColumn(#\"Added Custom\", \"Day of Quarter\", each Date.DayOfYear(Date.From([Date])) - Date.DayOfYear(Date.From(Date.StartOfQuarter([Date]))) + 1),",
        "    #\"Duplicated Column\" = Table.DuplicateColumn(#\"Added Day of Quarter\", \"Week of Year\", \"Week of Year - Copy\"),",
        "    #\"Duplicated Column1\" = Table.DuplicateColumn(#\"Duplicated Column\", \"Year\", \"Year - Copy\"),",
        "    #\"Merged Columns\" = Table.CombineColumns(Table.TransformColumnTypes(#\"Duplicated Column1\", {{\"Week of Year - Copy\", type text}, {\"Year - Copy\", type text}}, \"en-US\"),{\"Week of Year - Copy\", \"Year - Copy\"},Combiner.CombineTextByDelimiter(\"/\", QuoteStyle.None),\"Week / Year\"),",
        "    #\"Inserted Start of Week\" = Table.AddColumn(#\"Merged Columns\", \"Start of Week\", each Date.StartOfWeek([Date]), type date)",
        "in",
        "    #\"Inserted Start of Week\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    //Variables\\r\\n    StartDate = #date(2001,1,1),\\r\\n    EndDate = #date(2025,12,31),\\r\\n    Duration = Duration.Days(Duration.From(EndDate-StartDate))+1,\\r\\n    Today = DateTime.Date(DateTime.LocalNow()),\\r\\n\\r\\n    //Date Columns\\r\\n    Dates = List.Dates(StartDate,Duration,#duration(1,0,0,0)),\\r\\n    #\\\"Converted to Table\\\" = Table.FromList(Dates, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\\r\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Converted to Table\\\",{{\\\"Column1\\\", \\\"Date\\\"}}),\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Renamed Columns\\\",{{\\\"Date\\\", type date}}),\\r\\n    #\\\"Inserted Start of Month\\\" = Table.AddColumn(#\\\"Changed Type\\\", \\\"Start of Month\\\", each Date.StartOfMonth([Date]), type date),\\r\\n    #\\\"Inserted Year\\\" = Table.AddColumn(#\\\"Inserted Start of Month\\\", \\\"Year\\\", each Date.Year([Date]), Int64.Type),\\r\\n    #\\\"Inserted Quarter\\\" = Table.AddColumn(#\\\"Inserted Year\\\", \\\"Quarter\\\", each \\\"Q\\\"&Text.From(Date.QuarterOfYear([Date]))),\\r\\n    #\\\"Inserted QuarterNmb\\\" = Table.AddColumn(#\\\"Inserted Quarter\\\", \\\"QuarterNmb\\\", each Date.QuarterOfYear([Date]), Int64.Type),\\r\\n    #\\\"Inserted Month Name\\\" = Table.AddColumn(#\\\"Inserted QuarterNmb\\\", \\\"Month Name\\\", each Date.MonthName([Date]), type text),\\r\\n    #\\\"Inserted MonthAbv\\\" = Table.AddColumn(#\\\"Inserted Month Name\\\", \\\"MonthAbv\\\", each Text.Start(Date.MonthName([Date]),3), type text),\\r\\n    #\\\"Inserted MonthNmb\\\" = Table.AddColumn(#\\\"Inserted MonthAbv\\\", \\\"MonthNmb\\\", each Date.Month([Date]), Int64.Type),\\r\\n    #\\\"Inserted Week of Year\\\" = Table.AddColumn(#\\\"Inserted MonthNmb\\\", \\\"Week of Year\\\", each Date.WeekOfYear([Date]), Int64.Type),\\r\\n    #\\\"Inserted Week of Month\\\" = Table.AddColumn(#\\\"Inserted Week of Year\\\", \\\"Week of Month\\\", each Date.WeekOfMonth([Date]), Int64.Type),\\r\\n    #\\\"Inserted Day of Year\\\" = Table.AddColumn(#\\\"Inserted Week of Month\\\", \\\"Day of Year\\\", each Date.DayOfYear([Date]), Int64.Type),\\r\\n    #\\\"Inserted Day of Month\\\" = Table.AddColumn(#\\\"Inserted Day of Year\\\", \\\"Day of Month\\\", each Date.Day([Date]), Int64.Type),\\r\\n    #\\\"Inserted Day of Week\\\" = Table.AddColumn(#\\\"Inserted Day of Month\\\", \\\"Day of Week\\\", each Date.DayOfWeek([Date]), Int64.Type),\\r\\n    #\\\"Inserted Day Name\\\" = Table.AddColumn(#\\\"Inserted Day of Week\\\", \\\"Day Name\\\", each Date.DayOfWeekName([Date]), type text),\\r\\n    #\\\"Inserted Is Past\\\" = Table.AddColumn(#\\\"Inserted Day Name\\\", \\\"Is Past\\\", each [Date]<Today),\\r\\n    #\\\"Changed Is Past to True False\\\" = Table.TransformColumnTypes(#\\\"Inserted Is Past\\\",{{\\\"Is Past\\\", type logical}}),\\r\\n    #\\\"Added Custom\\\" = Table.AddColumn(#\\\"Changed Is Past to True False\\\", \\\"Month / Year\\\", each Date.ToText([Date], \\\"MMM/yyyy\\\")),\\r\\n    #\\\"Added Day of Quarter\\\" = Table.AddColumn(#\\\"Added Custom\\\", \\\"Day of Quarter\\\", each Date.DayOfYear(Date.From([Date])) - Date.DayOfYear(Date.From(Date.StartOfQuarter([Date]))) + 1),\\r\\n    #\\\"Duplicated Column\\\" = Table.DuplicateColumn(#\\\"Added Day of Quarter\\\", \\\"Week of Year\\\", \\\"Week of Year - Copy\\\"),\\r\\n    #\\\"Duplicated Column1\\\" = Table.DuplicateColumn(#\\\"Duplicated Column\\\", \\\"Year\\\", \\\"Year - Copy\\\"),\\r\\n    #\\\"Merged Columns\\\" = Table.CombineColumns(Table.TransformColumnTypes(#\\\"Duplicated Column1\\\", {{\\\"Week of Year - Copy\\\", type text}, {\\\"Year - Copy\\\", type text}}, \\\"en-US\\\"),{\\\"Week of Year - Copy\\\", \\\"Year - Copy\\\"},Combiner.CombineTextByDelimiter(\\\"/\\\", QuoteStyle.None),\\\"Week / Year\\\"),\\r\\n    #\\\"Inserted Start of Week\\\" = Table.AddColumn(#\\\"Merged Columns\\\", \\\"Start of Week\\\", each Date.StartOfWeek([Date]), type date)\\r\\nin\\r\\n    #\\\"Inserted Start of Week\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "crm_stages",
      "lineageTag": "3fe647cf-f0e9-4ca1-931e-2f3de372b7cb",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"Lc89D4IwEIDhv3LpjIkVP0clIQ4EdTAOhKHSio3Ya/oR/r5nYXyfS3u5pmGcZexilYGrQ29VFzxrs4atiCsc4SxMr00PpYs6pElOkwe6D2nqNXWNUKKDGsdEG6KTkFDOT7bUdxMwdm/xHNS0YUd4i2LQL61kkn0SDHMeKAunpA5wtDYRX5LxRQ4VCjl9w/8HFNEH/CrH2vYH\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Order = _t, #\"Stage Name\" = _t])",
        "in",
        "    Source"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\\\"Lc89D4IwEIDhv3LpjIkVP0clIQ4EdTAOhKHSio3Ya/oR/r5nYXyfS3u5pmGcZexilYGrQ29VFzxrs4atiCsc4SxMr00PpYs6pElOkwe6D2nqNXWNUKKDGsdEG6KTkFDOT7bUdxMwdm/xHNS0YUd4i2LQL61kkn0SDHMeKAunpA5wtDYRX5LxRQ4VCjl9w/8HFNEH/CrH2vYH\\\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Order = _t, #\\\"Stage Name\\\" = _t])\\r\\nin\\r\\n    Source\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "employees",
      "lineageTag": "0af26c3a-e69f-4de1-a4d5-3c1431c72fc3",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Excel.Workbook(Web.Contents(\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared%20Documents/02%20BL-Areas/bridge_iq/Data%20Sets/Bamboo/Employees.xlsx\"), null, true),",
        "    employees_Table = Source{[Item=\"employees\",Kind=\"Table\"]}[Data],",
        "    #\"Changed Type\" = Table.TransformColumnTypes(employees_Table,{{\"ID\", Int64.Type}, {\"Name\", type text}, {\"Prefered Name\", type text}, {\"Hire Date\", type date}, {\"Termination Date\", type any}, {\"Reporting to\", type text}, {\"Termination Type\", type text}, {\"Termination Reason\", type text}, {\"Regrettable or non- regrettable\", type text}, {\"Job Title\", type text}, {\"McLeod User Code\", type text}, {\"McLeod Salesperson Code\", type text}, {\"Work Email\", type text}}),",
        "    #\"Split Column by Delimiter\" = Table.SplitColumn(#\"Changed Type\", \"Name\", Splitter.SplitTextByDelimiter(\",\", QuoteStyle.Csv), {\"Name.1\", \"Name.2\"}),",
        "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Split Column by Delimiter\",{{\"Name.1\", type text}, {\"Name.2\", type text}}),",
        "    #\"Trimmed Text\" = Table.TransformColumns(#\"Changed Type1\",{{\"Name.2\", Text.Trim, type text}}),",
        "    #\"Added Conditional Column\" = Table.AddColumn(#\"Trimmed Text\", \"First Name\", each if [Prefered Name] = null then [Name.2] else [Prefered Name]),",
        "    #\"Merged Columns\" = Table.CombineColumns(#\"Added Conditional Column\",{\"First Name\", \"Name.1\"},Combiner.CombineTextByDelimiter(\" \", QuoteStyle.None),\"Name\"),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Merged Columns\",{\"Name.2\", \"Prefered Name\"}),",
        "    #\"Replaced Value\" = Table.ReplaceValue(#\"Removed Columns\",\"0000-00-00\",\"\",Replacer.ReplaceValue,{\"Termination Date\"}),",
        "    #\"Changed Type2\" = Table.TransformColumnTypes(#\"Replaced Value\",{{\"Termination Date\", type date}}),",
        "    #\"Replaced Value1\" = Table.ReplaceValue(#\"Changed Type2\",\"Development Team Sales\",\"Development Team\",Replacer.ReplaceText,{\"Devision\"}),",
        "    #\"Trimmed Text1\" = Table.TransformColumns(#\"Replaced Value1\",{{\"McLeod User Code\", Text.Trim, type text}}),",
        "    #\"Uppercased Text\" = Table.TransformColumns(#\"Trimmed Text1\",{{\"McLeod User Code\", Text.Upper, type text}}),",
        "    #\"Merged Queries\" = Table.NestedJoin(#\"Uppercased Text\", {\"McLeod User Code\"}, users, {\"id\"}, \"users\", JoinKind.LeftOuter),",
        "    #\"Expanded users\" = Table.ExpandTableColumn(#\"Merged Queries\", \"users\", {\"revenue_code_id\"}, {\"users.revenue_code_id\"})",
        "in",
        "    #\"Expanded users\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = Excel.Workbook(Web.Contents(\\\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared%20Documents/02%20BL-Areas/bridge_iq/Data%20Sets/Bamboo/Employees.xlsx\\\"), null, true),\\r\\n    employees_Table = Source{[Item=\\\"employees\\\",Kind=\\\"Table\\\"]}[Data],\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(employees_Table,{{\\\"ID\\\", Int64.Type}, {\\\"Name\\\", type text}, {\\\"Prefered Name\\\", type text}, {\\\"Hire Date\\\", type date}, {\\\"Termination Date\\\", type any}, {\\\"Reporting to\\\", type text}, {\\\"Termination Type\\\", type text}, {\\\"Termination Reason\\\", type text}, {\\\"Regrettable or non- regrettable\\\", type text}, {\\\"Job Title\\\", type text}, {\\\"McLeod User Code\\\", type text}, {\\\"McLeod Salesperson Code\\\", type text}, {\\\"Work Email\\\", type text}}),\\r\\n    #\\\"Split Column by Delimiter\\\" = Table.SplitColumn(#\\\"Changed Type\\\", \\\"Name\\\", Splitter.SplitTextByDelimiter(\\\",\\\", QuoteStyle.Csv), {\\\"Name.1\\\", \\\"Name.2\\\"}),\\r\\n    #\\\"Changed Type1\\\" = Table.TransformColumnTypes(#\\\"Split Column by Delimiter\\\",{{\\\"Name.1\\\", type text}, {\\\"Name.2\\\", type text}}),\\r\\n    #\\\"Trimmed Text\\\" = Table.TransformColumns(#\\\"Changed Type1\\\",{{\\\"Name.2\\\", Text.Trim, type text}}),\\r\\n    #\\\"Added Conditional Column\\\" = Table.AddColumn(#\\\"Trimmed Text\\\", \\\"First Name\\\", each if [Prefered Name] = null then [Name.2] else [Prefered Name]),\\r\\n    #\\\"Merged Columns\\\" = Table.CombineColumns(#\\\"Added Conditional Column\\\",{\\\"First Name\\\", \\\"Name.1\\\"},Combiner.CombineTextByDelimiter(\\\" \\\", QuoteStyle.None),\\\"Name\\\"),\\r\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(#\\\"Merged Columns\\\",{\\\"Name.2\\\", \\\"Prefered Name\\\"}),\\r\\n    #\\\"Replaced Value\\\" = Table.ReplaceValue(#\\\"Removed Columns\\\",\\\"0000-00-00\\\",\\\"\\\",Replacer.ReplaceValue,{\\\"Termination Date\\\"}),\\r\\n    #\\\"Changed Type2\\\" = Table.TransformColumnTypes(#\\\"Replaced Value\\\",{{\\\"Termination Date\\\", type date}}),\\r\\n    #\\\"Replaced Value1\\\" = Table.ReplaceValue(#\\\"Changed Type2\\\",\\\"Development Team Sales\\\",\\\"Development Team\\\",Replacer.ReplaceText,{\\\"Devision\\\"}),\\r\\n    #\\\"Trimmed Text1\\\" = Table.TransformColumns(#\\\"Replaced Value1\\\",{{\\\"McLeod User Code\\\", Text.Trim, type text}}),\\r\\n    #\\\"Uppercased Text\\\" = Table.TransformColumns(#\\\"Trimmed Text1\\\",{{\\\"McLeod User Code\\\", Text.Upper, type text}}),\\r\\n    #\\\"Merged Queries\\\" = Table.NestedJoin(#\\\"Uppercased Text\\\", {\\\"McLeod User Code\\\"}, users, {\\\"id\\\"}, \\\"users\\\", JoinKind.LeftOuter),\\r\\n    #\\\"Expanded users\\\" = Table.ExpandTableColumn(#\\\"Merged Queries\\\", \\\"users\\\", {\\\"revenue_code_id\\\"}, {\\\"users.revenue_code_id\\\"})\\r\\nin\\r\\n    #\\\"Expanded users\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "job_history",
      "lineageTag": "0d8addef-5917-4ed8-92a6-3a017ca615e0",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Excel.Workbook(Web.Contents(\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared%20Documents/02%20BL-Areas/bridge_iq/Data%20Sets/Bamboo/Job%20History.xlsx\"), null, true),",
        "    job_history_Table = Source{[Item=\"job_history\",Kind=\"Table\"]}[Data],",
        "    #\"Changed Type\" = Table.TransformColumnTypes(job_history_Table,{{\"Row ID\", type text}, {\"Name\", type text}, {\"Prefered Name\", type text}, {\"Job Start Date\", type date}, {\"ID\", Int64.Type}, {\"Division\", type text}, {\"Department\", type text}, {\"Job Title\", type text}, {\"Reports To\", type text}, {\"Mcleod Code\", type text}, {\"Work Email\", type text}, {\"McLeod Salesperson Code\", type text}, {\"End Date\", type date}, {\"TerminationDate\", type any}}),",
        "    #\"Added Conditional Column\" = Table.AddColumn(#\"Changed Type\", \"Job End Date\", each if [End Date] = null then [TerminationDate] else [End Date]),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Added Conditional Column\",{\"End Date\", \"TerminationDate\"}),",
        "    #\"Replaced Value\" = Table.ReplaceValue(#\"Removed Columns\",\"0000-00-00\",\"\",Replacer.ReplaceValue,{\"Job End Date\"}),",
        "    #\"Removed Columns1\" = Table.RemoveColumns(#\"Replaced Value\",{\"Name\", \"Prefered Name\"}),",
        "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Removed Columns1\",{{\"Job End Date\", type date}}),",
        "    #\"Replaced Value1\" = Table.ReplaceValue(#\"Changed Type1\",\"Development Team Sales\",\"Development Team\",Replacer.ReplaceText,{\"Division\"})",
        "in",
        "    #\"Replaced Value1\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = Excel.Workbook(Web.Contents(\\\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared%20Documents/02%20BL-Areas/bridge_iq/Data%20Sets/Bamboo/Job%20History.xlsx\\\"), null, true),\\r\\n    job_history_Table = Source{[Item=\\\"job_history\\\",Kind=\\\"Table\\\"]}[Data],\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(job_history_Table,{{\\\"Row ID\\\", type text}, {\\\"Name\\\", type text}, {\\\"Prefered Name\\\", type text}, {\\\"Job Start Date\\\", type date}, {\\\"ID\\\", Int64.Type}, {\\\"Division\\\", type text}, {\\\"Department\\\", type text}, {\\\"Job Title\\\", type text}, {\\\"Reports To\\\", type text}, {\\\"Mcleod Code\\\", type text}, {\\\"Work Email\\\", type text}, {\\\"McLeod Salesperson Code\\\", type text}, {\\\"End Date\\\", type date}, {\\\"TerminationDate\\\", type any}}),\\r\\n    #\\\"Added Conditional Column\\\" = Table.AddColumn(#\\\"Changed Type\\\", \\\"Job End Date\\\", each if [End Date] = null then [TerminationDate] else [End Date]),\\r\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(#\\\"Added Conditional Column\\\",{\\\"End Date\\\", \\\"TerminationDate\\\"}),\\r\\n    #\\\"Replaced Value\\\" = Table.ReplaceValue(#\\\"Removed Columns\\\",\\\"0000-00-00\\\",\\\"\\\",Replacer.ReplaceValue,{\\\"Job End Date\\\"}),\\r\\n    #\\\"Removed Columns1\\\" = Table.RemoveColumns(#\\\"Replaced Value\\\",{\\\"Name\\\", \\\"Prefered Name\\\"}),\\r\\n    #\\\"Changed Type1\\\" = Table.TransformColumnTypes(#\\\"Removed Columns1\\\",{{\\\"Job End Date\\\", type date}}),\\r\\n    #\\\"Replaced Value1\\\" = Table.ReplaceValue(#\\\"Changed Type1\\\",\\\"Development Team Sales\\\",\\\"Development Team\\\",Replacer.ReplaceText,{\\\"Division\\\"})\\r\\nin\\r\\n    #\\\"Replaced Value1\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "salesperson_key",
      "lineageTag": "b6d941d5-ebfa-4572-8487-a51694d36762",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = employees,",
        "    #\"Filtered Rows\" = Table.SelectRows(Source, each ([McLeod Salesperson Code] <> null)),",
        "    #\"Trimmed Text\" = Table.TransformColumns(#\"Filtered Rows\",{{\"Name\", Text.Trim, type text}}),",
        "    #\"Uppercased Text\" = Table.TransformColumns(#\"Trimmed Text\",{{\"Name\", Text.Upper, type text}, {\"Reporting to\", Text.Upper, type text}})",
        "in",
        "    #\"Uppercased Text\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = employees,\\r\\n    #\\\"Filtered Rows\\\" = Table.SelectRows(Source, each ([McLeod Salesperson Code] <> null)),\\r\\n    #\\\"Trimmed Text\\\" = Table.TransformColumns(#\\\"Filtered Rows\\\",{{\\\"Name\\\", Text.Trim, type text}}),\\r\\n    #\\\"Uppercased Text\\\" = Table.TransformColumns(#\\\"Trimmed Text\\\",{{\\\"Name\\\", Text.Upper, type text}, {\\\"Reporting to\\\", Text.Upper, type text}})\\r\\nin\\r\\n    #\\\"Uppercased Text\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Parameter1",
      "lineageTag": "59e49c03-a356-4cef-87fc-37914b4d1cd5",
      "queryGroupId": "607f3242-b6fd-47e9-b63c-113fb4156038",
      "text": [
        "#\"Sample File\" meta [IsParameterQuery=true, BinaryIdentifier=#\"Sample File\", Type=\"Binary\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Binary",
      "isHidden": false
    },
    {
      "name": "Transform Sample File",
      "lineageTag": "1fbdd36a-69da-4bdd-8d07-bdf16a9c249c",
      "queryGroupId": "59900c52-9b4a-40d6-a4ff-45759a3ddc22",
      "text": [
        "let",
        "    Source = Excel.Workbook(Parameter1, null, true),",
        "    Sheet1_Sheet = Source{[Item=\"Sheet1\",Kind=\"Sheet\"]}[Data],",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true])",
        "in",
        "    #\"Promoted Headers\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Sample File",
      "lineageTag": "3619b482-2bf8-4f12-915b-aab38357cf1f",
      "queryGroupId": "607f3242-b6fd-47e9-b63c-113fb4156038",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = SharePoint.Files(\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam\", [ApiVersion = 15]),",
        "    #\"Reordered Columns\" = Table.ReorderColumns(Source,{\"Content\", \"Name\", \"Extension\", \"Date accessed\", \"Date modified\", \"Date created\", \"Folder Path\", \"Attributes\"}),",
        "    #\"Filtered Rows\" = Table.SelectRows(#\"Reordered Columns\", each Text.Contains([Folder Path], \"02 BL-Areas/bridge_iq/Data Sets/Parade/parade_orders_api_files\")),",
        "    Navigation1 = #\"Filtered Rows\"{0}[Content]",
        "in",
        "    Navigation1"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Binary",
      "isHidden": false
    },
    {
      "name": "Transform File",
      "lineageTag": "9bb2a554-9b20-411a-b1b6-ea04113e9d7c",
      "queryGroupId": "607f3242-b6fd-47e9-b63c-113fb4156038",
      "text": [
        "let",
        "    Source = (Parameter1 as binary) => let",
        "        Source = Excel.Workbook(Parameter1, null, true),",
        "        Sheet1_Sheet = Source{[Item=\"Sheet1\",Kind=\"Sheet\"]}[Data],",
        "        #\"Promoted Headers\" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true])",
        "    in",
        "        #\"Promoted Headers\"",
        "in",
        "    Source"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Function",
      "isHidden": false
    },
    {
      "name": "parade_orders",
      "lineageTag": "61f23af1-ed35-407d-a264-f6699d7ceacf",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = SharePoint.Files(\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam\", [ApiVersion = 15]),",
        "    #\"Reordered Columns\" = Table.ReorderColumns(Source,{\"Content\", \"Name\", \"Extension\", \"Date accessed\", \"Date modified\", \"Date created\", \"Folder Path\", \"Attributes\"}),",
        "    #\"Filtered Rows\" = Table.SelectRows(#\"Reordered Columns\", each Text.Contains([Folder Path], \"02 BL-Areas/bridge_iq/Data Sets/Parade/parade_orders_api_files\")),",
        "    #\"Filtered Hidden Files1\" = Table.SelectRows(#\"Filtered Rows\", each [Attributes]?[Hidden]? <> true),",
        "    #\"Filtered Hidden Files2\" = Table.SelectRows(#\"Filtered Hidden Files1\", each [Attributes]?[Hidden]? <> true),",
        "    #\"Invoke Custom Function1\" = Table.AddColumn(#\"Filtered Hidden Files2\", \"Transform File (2)\", each #\"Transform File (2)\"([Content])),",
        "    #\"Removed Other Columns1\" = Table.SelectColumns(#\"Invoke Custom Function1\", {\"Transform File (2)\"}),",
        "    #\"Expanded Table Column1\" = Table.ExpandTableColumn(#\"Removed Other Columns1\", \"Transform File (2)\", Table.ColumnNames(#\"Transform File (2)\"(#\"Sample File (2)\"))),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Table Column1\",{{\"id\", Int64.Type}, {\"reference_id\", type text}, {\"created_at\", type datetime}, {\"archived_at\", type datetime}, {\"src_city\", type text}, {\"src_state\", type text}, {\"src_date\", type date}, {\"src_postal_code\", type text}, {\"dst_city\", type text}, {\"dst_state\", type text}, {\"dst_date\", type date}, {\"dst_postal_code\", type text}, {\"num_stops\", Int64.Type}, {\"equipment\", type text}, {\"trailer_type\", type text}, {\"rate_customer\", type number}, {\"first_load\", type logical}, {\"customer_id\", type text}, {\"revenue_code\", Int64.Type}, {\"team_name\", type any}, {\"rep_email\", type text}, {\"rep_name\", type text}, {\"carrier_manager\", type text}, {\"category\", type text}, {\"conversion_category\", type text}, {\"partner\", type text}, {\"margin_amount\", type number}, {\"margin_pct\", type number}, {\"carrier_name\", type text}, {\"dot_number\", Int64.Type}, {\"mc_number\", Int64.Type}, {\"carrier_rate\", type number}}),",
        "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Changed Type\",{{\"rate_customer\", Currency.Type}, {\"margin_amount\", Currency.Type}}),",
        "    #\"Sorted Rows\" = Table.Sort(#\"Changed Type1\",{{\"reference_id\", Order.Ascending}}),",
        "    #\"Extracted Text After Delimiter\" = Table.TransformColumns(#\"Sorted Rows\", {{\"reference_id\", each Text.AfterDelimiter(_, \"-\"), type text}}),",
        "    #\"Removed Blank Rows\" = Table.SelectRows(#\"Extracted Text After Delimiter\", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {\"\", null}))),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Blank Rows\",{{\"reference_id\", \"movement_id\"}}),",
        "    #\"Filtered Rows1\" = Table.SelectRows(#\"Renamed Columns\", each ([category] <> \"outside_parade\" and [category] <> \"unsuccessful_quote\")),",
        "    #\"Filtered Rows2\" = Table.SelectRows(#\"Filtered Rows1\", each ([category] <> \"digital_visit\")),",
        "    #\"Removed Duplicates\" = Table.Distinct(#\"Filtered Rows2\", {\"id\"}),",
        "    #\"Filtered Rows3\" = Table.SelectRows(#\"Removed Duplicates\", each [conversion_category] <> null and [conversion_category] <> \"\"),",
        "    #\"Filtered Orders on or after RefreshCutOffDate\" = Table.SelectRows(#\"Filtered Rows3\", each [created_at] >= RefreshCutOffDate),",
        "    #\"Appended Query\" = Table.Combine({#\"Filtered Orders on or after RefreshCutOffDate\", historic_parade_orders})",
        "in",
        "    #\"Appended Query\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "carrier_key",
      "lineageTag": "d46e93c2-0fe7-447c-aa96-63a09c700d0e",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Sql.Database(\"bl-appdb\", \"lme\"),",
        "    dbo_payee = Source{[Schema=\"dbo\",Item=\"payee\"]}[Data],",
        "    #\"Removed Other Columns\" = Table.SelectColumns(dbo_payee,{\"address1\", \"city\", \"id\", \"name\", \"state\", \"status\", \"zip_code\"})",
        "in",
        "    #\"Removed Other Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = Sql.Database(\\\"bl-appdb\\\", \\\"lme\\\"),\\r\\n    dbo_payee = Source{[Schema=\\\"dbo\\\",Item=\\\"payee\\\"]}[Data],\\r\\n    #\\\"Removed Other Columns\\\" = Table.SelectColumns(dbo_payee,{\\\"address1\\\", \\\"city\\\", \\\"id\\\", \\\"name\\\", \\\"state\\\", \\\"status\\\", \\\"zip_code\\\"})\\r\\nin\\r\\n    #\\\"Removed Other Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Parameter2",
      "lineageTag": "f0b8ebc3-304f-43e6-bbee-db250c156091",
      "queryGroupId": "7217c1cc-e4f7-4a1a-b427-82477ccf6cf6",
      "text": [
        "#\"Sample File (2)\" meta [IsParameterQuery=true, BinaryIdentifier=#\"Sample File (2)\", Type=\"Binary\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Binary",
      "isHidden": false
    },
    {
      "name": "Transform Sample File (2)",
      "lineageTag": "b142244a-63e0-49ba-9f70-76864dbaf607",
      "queryGroupId": "d1d57263-fc33-4269-9014-eebf190e5343",
      "text": [
        "let",
        "    Source = Excel.Workbook(Parameter2, null, true),",
        "    Sheet1_Sheet = Source{[Item=\"Sheet1\",Kind=\"Sheet\"]}[Data],",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true])",
        "in",
        "    #\"Promoted Headers\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Sample File (2)",
      "lineageTag": "c286de1c-fe54-4fb7-9c49-86bf12c129db",
      "queryGroupId": "7217c1cc-e4f7-4a1a-b427-82477ccf6cf6",
      "text": [
        "let",
        "    Source = SharePoint.Files(\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam\", [ApiVersion = 15]),",
        "    #\"Reordered Columns\" = Table.ReorderColumns(Source,{\"Content\", \"Name\", \"Extension\", \"Date accessed\", \"Date modified\", \"Date created\", \"Folder Path\", \"Attributes\"}),",
        "    #\"Filtered Rows\" = Table.SelectRows(#\"Reordered Columns\", each Text.Contains([Folder Path], \"02 BL-Areas/bridge_iq/Data Sets/Parade/parade_orders_api_files\")),",
        "    #\"Filtered Hidden Files1\" = Table.SelectRows(#\"Filtered Rows\", each [Attributes]?[Hidden]? <> true),",
        "    Navigation1 = #\"Filtered Hidden Files1\"{0}[Content]",
        "in",
        "    Navigation1"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Binary",
      "isHidden": false
    },
    {
      "name": "Transform File (2)",
      "lineageTag": "bf0440a7-90f6-460f-9fbc-c2f0a8fce758",
      "queryGroupId": "7217c1cc-e4f7-4a1a-b427-82477ccf6cf6",
      "text": [
        "let",
        "    Source = (Parameter2 as binary) => let",
        "        Source = Excel.Workbook(Parameter2, null, true),",
        "        Sheet1_Sheet = Source{[Item=\"Sheet1\",Kind=\"Sheet\"]}[Data],",
        "        #\"Promoted Headers\" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true])",
        "    in",
        "        #\"Promoted Headers\"",
        "in",
        "    Source"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Function",
      "isHidden": false
    },
    {
      "name": "callins",
      "lineageTag": "c3b14ccd-e8ea-4e24-b354-916b8bbb278e",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Sql.Database(\"bl-appdb\", \"lme\"),",
        "    dbo_callin = Source{[Schema=\"dbo\",Item=\"callin\"]}[Data],",
        "    #\"Removed Other Columns\" = Table.SelectColumns(dbo_callin,{\"entered_by\", \"entered_date\", \"movement_status\", \"payee_id\", \"initiated_type\", \"movement_id\"}),",
        "    #\"Filtered callins on or after RefreshCutOffDate\" = Table.SelectRows(#\"Removed Other Columns\", each [entered_date] >= RefreshCutOffDate),",
        "    #\"Inserted Time\" = Table.AddColumn(#\"Filtered callins on or after RefreshCutOffDate\", \"Time\", each DateTime.Time([entered_date]), type time),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Inserted Time\",{{\"Time\", \"entered_time\"}}),",
        "    #\"Extracted Date\" = Table.TransformColumns(#\"Renamed Columns\",{{\"entered_date\", DateTime.Date, type date}}),",
        "    #\"Calculated Start of Hour\" = Table.TransformColumns(#\"Extracted Date\",{{\"entered_time\", Time.StartOfHour, type time}}),",
        "    #\"Appended Query\" = Table.Combine({#\"Calculated Start of Hour\", historic_callins})",
        "in",
        "    #\"Appended Query\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = Sql.Database(\\\"bl-appdb\\\", \\\"lme\\\"),\\r\\n    dbo_callin = Source{[Schema=\\\"dbo\\\",Item=\\\"callin\\\"]}[Data],\\r\\n    #\\\"Removed Other Columns\\\" = Table.SelectColumns(dbo_callin,{\\\"entered_by\\\", \\\"entered_date\\\", \\\"movement_status\\\", \\\"payee_id\\\", \\\"initiated_type\\\", \\\"movement_id\\\"}),\\r\\n    #\\\"Filtered callins on or after RefreshCutOffDate\\\" = Table.SelectRows(#\\\"Removed Other Columns\\\", each [entered_date] >= RefreshCutOffDate),\\r\\n    #\\\"Inserted Time\\\" = Table.AddColumn(#\\\"Filtered callins on or after RefreshCutOffDate\\\", \\\"Time\\\", each DateTime.Time([entered_date]), type time),\\r\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Inserted Time\\\",{{\\\"Time\\\", \\\"entered_time\\\"}}),\\r\\n    #\\\"Extracted Date\\\" = Table.TransformColumns(#\\\"Renamed Columns\\\",{{\\\"entered_date\\\", DateTime.Date, type date}}),\\r\\n    #\\\"Calculated Start of Hour\\\" = Table.TransformColumns(#\\\"Extracted Date\\\",{{\\\"entered_time\\\", Time.StartOfHour, type time}}),\\r\\n    #\\\"Appended Query\\\" = Table.Combine({#\\\"Calculated Start of Hour\\\", historic_callins})\\r\\nin\\r\\n    #\\\"Appended Query\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "crt_movement_data",
      "lineageTag": "6fb9b42f-de18-477c-8b98-344a1312204f",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Excel.Workbook(Web.Contents(\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared%20Documents/02%20BL-Areas/bridge_iq/Data%20Sets/Carrier_Dispatch_Movement_data_New/Carrier_Dispatch_Movement_data_New.xlsx\"), null, true),",
        "    CRT_DATA_Table = Source{[Item=\"CRT_DATA\",Kind=\"Table\"]}[Data],",
        "    #\"Changed Type\" = Table.TransformColumnTypes(CRT_DATA_Table,{{\"Order ID\", type text}, {\"Movement ID\", type text}, {\"Avail #\", Int64.Type}, {\"Avail Time\", type datetime}, {\"Load Board Time\", type datetime}, {\"Give Back Time \", type datetime}, {\"Covered Time\", type datetime}, {\"Start Max Pay\", type number}, {\"End Max Pay\", Int64.Type}, {\"Carrier Offers before LB\", Int64.Type}, {\"Carrier Offers\", Int64.Type}, {\"Unique ID\", type text}}),",
        "    #\"Added Prefix\" = Table.TransformColumns(#\"Changed Type\", {{\"Order ID\", each \"0\" & _, type text}}),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Added Prefix\",{\"Unique ID\"})",
        "in",
        "    #\"Removed Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = Excel.Workbook(Web.Contents(\\\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared%20Documents/02%20BL-Areas/bridge_iq/Data%20Sets/Carrier_Dispatch_Movement_data_New/Carrier_Dispatch_Movement_data_New.xlsx\\\"), null, true),\\r\\n    CRT_DATA_Table = Source{[Item=\\\"CRT_DATA\\\",Kind=\\\"Table\\\"]}[Data],\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(CRT_DATA_Table,{{\\\"Order ID\\\", type text}, {\\\"Movement ID\\\", type text}, {\\\"Avail #\\\", Int64.Type}, {\\\"Avail Time\\\", type datetime}, {\\\"Load Board Time\\\", type datetime}, {\\\"Give Back Time \\\", type datetime}, {\\\"Covered Time\\\", type datetime}, {\\\"Start Max Pay\\\", type number}, {\\\"End Max Pay\\\", Int64.Type}, {\\\"Carrier Offers before LB\\\", Int64.Type}, {\\\"Carrier Offers\\\", Int64.Type}, {\\\"Unique ID\\\", type text}}),\\r\\n    #\\\"Added Prefix\\\" = Table.TransformColumns(#\\\"Changed Type\\\", {{\\\"Order ID\\\", each \\\"0\\\" & _, type text}}),\\r\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(#\\\"Added Prefix\\\",{\\\"Unique ID\\\"})\\r\\nin\\r\\n    #\\\"Removed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "lane",
      "lineageTag": "7bc0b0c0-f527-406e-9f68-57b6dddde0c5",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = orders,",
        "    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"lane\"}),",
        "    #\"Uppercased Text\" = Table.TransformColumns(#\"Removed Other Columns\",{{\"lane\", Text.Upper, type text}}),",
        "    #\"Trimmed Text\" = Table.TransformColumns(#\"Uppercased Text\",{{\"lane\", Text.Trim, type text}}),",
        "    #\"Removed Duplicates\" = Table.Distinct(#\"Trimmed Text\")",
        "in",
        "    #\"Removed Duplicates\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = orders,\\r\\n    #\\\"Removed Other Columns\\\" = Table.SelectColumns(Source,{\\\"lane\\\"}),\\r\\n    #\\\"Uppercased Text\\\" = Table.TransformColumns(#\\\"Removed Other Columns\\\",{{\\\"lane\\\", Text.Upper, type text}}),\\r\\n    #\\\"Trimmed Text\\\" = Table.TransformColumns(#\\\"Uppercased Text\\\",{{\\\"lane\\\", Text.Trim, type text}}),\\r\\n    #\\\"Removed Duplicates\\\" = Table.Distinct(#\\\"Trimmed Text\\\")\\r\\nin\\r\\n    #\\\"Removed Duplicates\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "daily_number_override",
      "lineageTag": "45fdfe2a-47d4-4b73-9ae1-78f6485bc2ab",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Excel.Workbook(Web.Contents(\"https://bridgelogisticsinc.sharepoint.com/sites/SalesGoals/Shared%20Documents/Sales%20Goals.xlsx\"), null, true),",
        "    daily_number_override_Table = Source{[Item=\"daily_number_override\",Kind=\"Table\"]}[Data],",
        "    #\"Changed Type\" = Table.TransformColumnTypes(daily_number_override_Table,{{\"Month\", type date}, {\"Margin Number\", Int64.Type}})",
        "in",
        "    #\"Changed Type\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = Excel.Workbook(Web.Contents(\\\"https://bridgelogisticsinc.sharepoint.com/sites/SalesGoals/Shared%20Documents/Sales%20Goals.xlsx\\\"), null, true),\\r\\n    daily_number_override_Table = Source{[Item=\\\"daily_number_override\\\",Kind=\\\"Table\\\"]}[Data],\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(daily_number_override_Table,{{\\\"Month\\\", type date}, {\\\"Margin Number\\\", Int64.Type}})\\r\\nin\\r\\n    #\\\"Changed Type\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "wolf_pack",
      "lineageTag": "958b89fd-1535-4e40-a583-7db4a312b458",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = rev_codes,",
        "    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"wolf_pack\"}),",
        "    #\"Removed Duplicates\" = Table.Distinct(#\"Removed Other Columns\"),",
        "    #\"Removed Blank Rows\" = Table.SelectRows(#\"Removed Duplicates\", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {\"\", null})))",
        "in",
        "    #\"Removed Blank Rows\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = rev_codes,\\r\\n    #\\\"Removed Other Columns\\\" = Table.SelectColumns(Source,{\\\"wolf_pack\\\"}),\\r\\n    #\\\"Removed Duplicates\\\" = Table.Distinct(#\\\"Removed Other Columns\\\"),\\r\\n    #\\\"Removed Blank Rows\\\" = Table.SelectRows(#\\\"Removed Duplicates\\\", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {\\\"\\\", null})))\\r\\nin\\r\\n    #\\\"Removed Blank Rows\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "account_rep",
      "lineageTag": "642ea876-02df-49cf-bf2d-b661b2941b01",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = rev_codes,",
        "    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"account_rep\", \"wolf_pack\"}),",
        "    #\"Removed Duplicates\" = Table.Distinct(#\"Removed Other Columns\"),",
        "    #\"Removed Blank Rows\" = Table.SelectRows(#\"Removed Duplicates\", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {\"\", null})))",
        "in",
        "    #\"Removed Blank Rows\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = rev_codes,\\r\\n    #\\\"Removed Other Columns\\\" = Table.SelectColumns(Source,{\\\"account_rep\\\", \\\"wolf_pack\\\"}),\\r\\n    #\\\"Removed Duplicates\\\" = Table.Distinct(#\\\"Removed Other Columns\\\"),\\r\\n    #\\\"Removed Blank Rows\\\" = Table.SelectRows(#\\\"Removed Duplicates\\\", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {\\\"\\\", null})))\\r\\nin\\r\\n    #\\\"Removed Blank Rows\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "observed_holidays",
      "lineageTag": "f7c87e41-1186-4900-8b88-98adeba2d71b",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Excel.Workbook(Web.Contents(\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared%20Documents/02%20BL-Areas/bridge_iq/Data%20Sets/Observed%20Holidays.xlsx\"), null, true),",
        "    observed_holidays_Table = Source{[Item=\"observed_holidays\",Kind=\"Table\"]}[Data],",
        "    #\"Changed Type\" = Table.TransformColumnTypes(observed_holidays_Table,{{\"Observed Holidays\", type date}})",
        "in",
        "    #\"Changed Type\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = Excel.Workbook(Web.Contents(\\\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared%20Documents/02%20BL-Areas/bridge_iq/Data%20Sets/Observed%20Holidays.xlsx\\\"), null, true),\\r\\n    observed_holidays_Table = Source{[Item=\\\"observed_holidays\\\",Kind=\\\"Table\\\"]}[Data],\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(observed_holidays_Table,{{\\\"Observed Holidays\\\", type date}})\\r\\nin\\r\\n    #\\\"Changed Type\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Parameter3",
      "lineageTag": "c5b8bf0c-fa84-413d-a472-27c7814f3c56",
      "queryGroupId": "54f88845-49d2-4623-b7a7-c20afd90ea7d",
      "text": [
        "#\"Sample File (3)\" meta [IsParameterQuery=true, BinaryIdentifier=#\"Sample File (3)\", Type=\"Binary\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Binary",
      "isHidden": false
    },
    {
      "name": "Transform Sample File (3)",
      "lineageTag": "04305715-2431-48aa-84c3-4fffc150748a",
      "queryGroupId": "9108b55e-5644-4614-a43b-e7aca8a2e004",
      "text": [
        "let",
        "    Source = Excel.Workbook(Parameter3, null, true),",
        "    Sheet1_Sheet = Source{[Item=\"Sheet1\",Kind=\"Sheet\"]}[Data],",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true])",
        "in",
        "    #\"Promoted Headers\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Sample File (3)",
      "lineageTag": "fc6fe0e2-27aa-48a4-8d3b-f19ba57636e6",
      "queryGroupId": "54f88845-49d2-4623-b7a7-c20afd90ea7d",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = SharePoint.Files(\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam\", [ApiVersion = 15]),",
        "    #\"Filtered Rows\" = Table.SelectRows(Source, each Text.Contains([Folder Path], \"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared Documents/02 BL-Areas/bridge_iq/Data Sets/behaviors_api_files/\")),",
        "    Navigation1 = #\"Filtered Rows\"{0}[Content]",
        "in",
        "    Navigation1"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Binary",
      "isHidden": false
    },
    {
      "name": "Transform File (3)",
      "lineageTag": "b594b25c-1827-4acd-ae47-d19aae6df491",
      "queryGroupId": "54f88845-49d2-4623-b7a7-c20afd90ea7d",
      "text": [
        "let",
        "    Source = (Parameter3 as binary) => let",
        "        Source = Excel.Workbook(Parameter3, null, true),",
        "        Sheet1_Sheet = Source{[Item=\"Sheet1\",Kind=\"Sheet\"]}[Data],",
        "        #\"Promoted Headers\" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true])",
        "    in",
        "        #\"Promoted Headers\"",
        "in",
        "    Source"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Function",
      "isHidden": false
    },
    {
      "name": "Parameter4",
      "lineageTag": "50f5d478-8d0f-4752-923f-22e5b5b84184",
      "queryGroupId": "af1a3c85-2bbe-48f2-b5a3-df1563595dfe",
      "text": [
        "#\"Sample File (4)\" meta [IsParameterQuery=true, BinaryIdentifier=#\"Sample File (4)\", Type=\"Binary\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Binary",
      "isHidden": false
    },
    {
      "name": "Transform Sample File (4)",
      "lineageTag": "40157f7e-dcc8-4409-9d8f-b835b60dc51f",
      "queryGroupId": "06240070-0280-4771-8759-3c22da0490cb",
      "text": [
        "let",
        "    Source = Excel.Workbook(Parameter4, null, true),",
        "    Sheet1_Sheet = Source{[Item=\"Sheet1\",Kind=\"Sheet\"]}[Data],",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true])",
        "in",
        "    #\"Promoted Headers\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Sample File (4)",
      "lineageTag": "6c753d56-0e08-4fa7-8bde-cdf69a56d0ac",
      "queryGroupId": "af1a3c85-2bbe-48f2-b5a3-df1563595dfe",
      "text": [
        "let",
        "    Source = SharePoint.Files(\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam\", [ApiVersion = 15]),",
        "    #\"Filtered Rows\" = Table.SelectRows(Source, each Text.Contains([Folder Path], \"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared Documents/02 BL-Areas/bridge_iq/Data Sets/behaviors_api_files/\")),",
        "    #\"Filtered Hidden Files1\" = Table.SelectRows(#\"Filtered Rows\", each [Attributes]?[Hidden]? <> true),",
        "    Navigation1 = #\"Filtered Hidden Files1\"{0}[Content]",
        "in",
        "    Navigation1"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Binary",
      "isHidden": false
    },
    {
      "name": "Transform File (4)",
      "lineageTag": "96187a1f-dd5c-48bf-9faa-843e6b5cd850",
      "queryGroupId": "af1a3c85-2bbe-48f2-b5a3-df1563595dfe",
      "text": [
        "let",
        "    Source = (Parameter4 as binary) => let",
        "        Source = Excel.Workbook(Parameter4, null, true),",
        "        Sheet1_Sheet = Source{[Item=\"Sheet1\",Kind=\"Sheet\"]}[Data],",
        "        #\"Promoted Headers\" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true])",
        "    in",
        "        #\"Promoted Headers\"",
        "in",
        "    Source"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Function",
      "isHidden": false
    },
    {
      "name": "behavior_key",
      "lineageTag": "aafa2cf9-54f9-4dbf-a436-c8f4b18b186a",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = behaviors,",
        "    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"mail_activity_type_id\"}),",
        "    #\"Removed Errors\" = Table.RemoveRowsWithErrors(#\"Removed Other Columns\", {\"mail_activity_type_id\"}),",
        "    #\"Removed Blank Rows\" = Table.SelectRows(#\"Removed Errors\", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {\"\", null}))),",
        "    #\"Removed Duplicates\" = Table.Distinct(#\"Removed Blank Rows\")",
        "in",
        "    #\"Removed Duplicates\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = behaviors,\\r\\n    #\\\"Removed Other Columns\\\" = Table.SelectColumns(Source,{\\\"mail_activity_type_id\\\"}),\\r\\n    #\\\"Removed Errors\\\" = Table.RemoveRowsWithErrors(#\\\"Removed Other Columns\\\", {\\\"mail_activity_type_id\\\"}),\\r\\n    #\\\"Removed Blank Rows\\\" = Table.SelectRows(#\\\"Removed Errors\\\", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {\\\"\\\", null}))),\\r\\n    #\\\"Removed Duplicates\\\" = Table.Distinct(#\\\"Removed Blank Rows\\\")\\r\\nin\\r\\n    #\\\"Removed Duplicates\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "dispatcher_key",
      "lineageTag": "ff69ace9-66a1-4c1b-b797-0305f2b98a1b",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = employees,",
        "    #\"Filtered Rows\" = Table.SelectRows(Source, each ([McLeod User Code] <> null))",
        "in",
        "    #\"Filtered Rows\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = employees,\\r\\n    #\\\"Filtered Rows\\\" = Table.SelectRows(Source, each ([McLeod User Code] <> null))\\r\\nin\\r\\n    #\\\"Filtered Rows\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "crm",
      "lineageTag": "deee83fc-4184-4d0b-8229-32031f2212a8",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Excel.Workbook(Web.Contents(\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared%20Documents/02%20BL-Areas/bridge_iq/Data%20Sets/CRM/crm.xlsx\"), null, true),",
        "    Sheet1_Sheet = Source{[Item=\"Sheet1\",Kind=\"Sheet\"]}[Data],",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),",
        "    #\"Extracted Text Between Delimiters\" = Table.TransformColumns(#\"Promoted Headers\", {{\"user_id\", each Text.BetweenDelimiters(Text.From(_, \"en-US\"), \"'\", \"'\"), type text}, {\"stage_id\", each Text.BetweenDelimiters(_, \"'\", \"'\"), type text}, {\"x_studio_primary_industry\", each Text.BetweenDelimiters(Text.From(_, \"en-US\"), \"'\", \"'\"), type text}, {\"state_id\", each Text.BetweenDelimiters(Text.From(_, \"en-US\"), \"'\", \"'\"), type text}, {\"x_stage_id\", each Text.BetweenDelimiters(Text.From(_, \"en-US\"), \"'\", \"'\"), type text}}),",
        "    #\"Extracted Text Between Delimiters1\" = Table.TransformColumns(#\"Extracted Text Between Delimiters\", {{\"partner_id\", each Text.BetweenDelimiters(_, \"[\", \",\"), type text}}),",
        "    #\"Replaced Value\" = Table.ReplaceValue(#\"Extracted Text Between Delimiters1\",false,null,Replacer.ReplaceValue,{\"x_studio_mcleod_code\", \"x_studio_sdr\", \"stage_id\", \"date_last_stage_update\", \"activity_date_deadline\", \"date_open\", \"x_studio_lead_type\", \"x_studio_originally_passed_to\", \"x_studio_lead_passed_date\", \"x_studio_enrichment_date\", \"city\", \"x_studio_revenue_range\"}),",
        "    #\"Added Conditional Column\" = Table.AddColumn(#\"Replaced Value\", \"Stage\", each if [type] = \"lead\" then [x_stage_id] else [stage_id]),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Added Conditional Column\",{\"stage_id\", \"x_stage_id\"}),",
        "    #\"Added Conditional Column1\" = Table.AddColumn(#\"Removed Columns\", \"Last Stage Change\", each if [type] = \"lead\" then [x_date_last_prospect_stage_change] else [date_last_stage_update]),",
        "    #\"Removed Columns1\" = Table.RemoveColumns(#\"Added Conditional Column1\",{\"date_last_stage_update\", \"x_date_last_prospect_stage_change\"}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Columns1\",{{\"date_open\", type datetime}, {\"Last Stage Change\", type datetime}}),",
        "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Changed Type\",{{\"Last Stage Change\", type date}, {\"x_studio_enrichment_date\", type date}, {\"date_open\", type date}, {\"activity_date_deadline\", type date}}),",
        "    #\"Removed Errors\" = Table.RemoveRowsWithErrors(#\"Changed Type1\", {\"partner_id\"}),",
        "    #\"Extracted Text Between Delimiters2\" = Table.TransformColumns(#\"Removed Errors\", {{\"x_studio_sdr\", each Text.BetweenDelimiters(_, \"'\", \"'\"), type text}}),",
        "    #\"Changed Type2\" = Table.TransformColumnTypes(#\"Extracted Text Between Delimiters2\",{{\"x_studio_lead_passed_date\", type date}}),",
        "    #\"Trimmed Text\" = Table.TransformColumns(#\"Changed Type2\",{{\"user_id\", Text.Trim, type text}})",
        "in",
        "    #\"Trimmed Text\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = Excel.Workbook(Web.Contents(\\\"https://bridgelogisticsinc.sharepoint.com/sites/BL-BiTeam/Shared%20Documents/02%20BL-Areas/bridge_iq/Data%20Sets/CRM/crm.xlsx\\\"), null, true),\\r\\n    Sheet1_Sheet = Source{[Item=\\\"Sheet1\\\",Kind=\\\"Sheet\\\"]}[Data],\\r\\n    #\\\"Promoted Headers\\\" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),\\r\\n    #\\\"Extracted Text Between Delimiters\\\" = Table.TransformColumns(#\\\"Promoted Headers\\\", {{\\\"user_id\\\", each Text.BetweenDelimiters(Text.From(_, \\\"en-US\\\"), \\\"'\\\", \\\"'\\\"), type text}, {\\\"stage_id\\\", each Text.BetweenDelimiters(_, \\\"'\\\", \\\"'\\\"), type text}, {\\\"x_studio_primary_industry\\\", each Text.BetweenDelimiters(Text.From(_, \\\"en-US\\\"), \\\"'\\\", \\\"'\\\"), type text}, {\\\"state_id\\\", each Text.BetweenDelimiters(Text.From(_, \\\"en-US\\\"), \\\"'\\\", \\\"'\\\"), type text}, {\\\"x_stage_id\\\", each Text.BetweenDelimiters(Text.From(_, \\\"en-US\\\"), \\\"'\\\", \\\"'\\\"), type text}}),\\r\\n    #\\\"Extracted Text Between Delimiters1\\\" = Table.TransformColumns(#\\\"Extracted Text Between Delimiters\\\", {{\\\"partner_id\\\", each Text.BetweenDelimiters(_, \\\"[\\\", \\\",\\\"), type text}}),\\r\\n    #\\\"Replaced Value\\\" = Table.ReplaceValue(#\\\"Extracted Text Between Delimiters1\\\",false,null,Replacer.ReplaceValue,{\\\"x_studio_mcleod_code\\\", \\\"x_studio_sdr\\\", \\\"stage_id\\\", \\\"date_last_stage_update\\\", \\\"activity_date_deadline\\\", \\\"date_open\\\", \\\"x_studio_lead_type\\\", \\\"x_studio_originally_passed_to\\\", \\\"x_studio_lead_passed_date\\\", \\\"x_studio_enrichment_date\\\", \\\"city\\\", \\\"x_studio_revenue_range\\\"}),\\r\\n    #\\\"Added Conditional Column\\\" = Table.AddColumn(#\\\"Replaced Value\\\", \\\"Stage\\\", each if [type] = \\\"lead\\\" then [x_stage_id] else [stage_id]),\\r\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(#\\\"Added Conditional Column\\\",{\\\"stage_id\\\", \\\"x_stage_id\\\"}),\\r\\n    #\\\"Added Conditional Column1\\\" = Table.AddColumn(#\\\"Removed Columns\\\", \\\"Last Stage Change\\\", each if [type] = \\\"lead\\\" then [x_date_last_prospect_stage_change] else [date_last_stage_update]),\\r\\n    #\\\"Removed Columns1\\\" = Table.RemoveColumns(#\\\"Added Conditional Column1\\\",{\\\"date_last_stage_update\\\", \\\"x_date_last_prospect_stage_change\\\"}),\\r\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Removed Columns1\\\",{{\\\"date_open\\\", type datetime}, {\\\"Last Stage Change\\\", type datetime}}),\\r\\n    #\\\"Changed Type1\\\" = Table.TransformColumnTypes(#\\\"Changed Type\\\",{{\\\"Last Stage Change\\\", type date}, {\\\"x_studio_enrichment_date\\\", type date}, {\\\"date_open\\\", type date}, {\\\"activity_date_deadline\\\", type date}}),\\r\\n    #\\\"Removed Errors\\\" = Table.RemoveRowsWithErrors(#\\\"Changed Type1\\\", {\\\"partner_id\\\"}),\\r\\n    #\\\"Extracted Text Between Delimiters2\\\" = Table.TransformColumns(#\\\"Removed Errors\\\", {{\\\"x_studio_sdr\\\", each Text.BetweenDelimiters(_, \\\"'\\\", \\\"'\\\"), type text}}),\\r\\n    #\\\"Changed Type2\\\" = Table.TransformColumnTypes(#\\\"Extracted Text Between Delimiters2\\\",{{\\\"x_studio_lead_passed_date\\\", type date}}),\\r\\n    #\\\"Trimmed Text\\\" = Table.TransformColumns(#\\\"Changed Type2\\\",{{\\\"user_id\\\", Text.Trim, type text}})\\r\\nin\\r\\n    #\\\"Trimmed Text\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "division_key",
      "lineageTag": "1b8dd742-2d76-4e50-88d9-4317989076d3",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = job_history,",
        "    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"Division\"}),",
        "    #\"Removed Duplicates\" = Table.Distinct(#\"Removed Other Columns\"),",
        "    #\"Removed Errors\" = Table.RemoveRowsWithErrors(#\"Removed Duplicates\", {\"Division\"}),",
        "    #\"Filtered Rows\" = Table.SelectRows(#\"Removed Errors\", each ([Division] <> null))",
        "in",
        "    #\"Filtered Rows\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\r\\n    Source = job_history,\\r\\n    #\\\"Removed Other Columns\\\" = Table.SelectColumns(Source,{\\\"Division\\\"}),\\r\\n    #\\\"Removed Duplicates\\\" = Table.Distinct(#\\\"Removed Other Columns\\\"),\\r\\n    #\\\"Removed Errors\\\" = Table.RemoveRowsWithErrors(#\\\"Removed Duplicates\\\", {\\\"Division\\\"}),\\r\\n    #\\\"Filtered Rows\\\" = Table.SelectRows(#\\\"Removed Errors\\\", each ([Division] <> null))\\r\\nin\\r\\n    #\\\"Filtered Rows\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    }
  ],
  "queryGroups": [
    {
      "name": "Parameters",
      "id": "2beb8cee-e196-4d77-9b9d-fd2eeec8aa3e",
      "description": ""
    },
    {
      "name": "Historic Tables",
      "id": "caaa80e5-0b68-49f7-8048-af185c067fb6",
      "order": 1,
      "description": ""
    },
    {
      "name": "Transform File from parade_orders",
      "id": "d1d57263-fc33-4269-9014-eebf190e5343",
      "order": 4,
      "description": ""
    },
    {
      "name": "Transform File from historic_parade_orders",
      "id": "59900c52-9b4a-40d6-a4ff-45759a3ddc22",
      "order": 2,
      "description": ""
    },
    {
      "name": "Transform File from behaviors",
      "id": "9108b55e-5644-4614-a43b-e7aca8a2e004",
      "order": 6,
      "description": ""
    },
    {
      "name": "Transform File from historic_behaviors",
      "id": "06240070-0280-4771-8759-3c22da0490cb",
      "order": 8,
      "description": ""
    },
    {
      "name": "Helper Queries",
      "id": "7217c1cc-e4f7-4a1a-b427-82477ccf6cf6",
      "description": "",
      "parentId": "d1d57263-fc33-4269-9014-eebf190e5343"
    },
    {
      "name": "Helper Queries",
      "id": "607f3242-b6fd-47e9-b63c-113fb4156038",
      "description": "",
      "parentId": "59900c52-9b4a-40d6-a4ff-45759a3ddc22"
    },
    {
      "name": "Helper Queries",
      "id": "54f88845-49d2-4623-b7a7-c20afd90ea7d",
      "description": "",
      "parentId": "9108b55e-5644-4614-a43b-e7aca8a2e004"
    },
    {
      "name": "Helper Queries",
      "id": "af1a3c85-2bbe-48f2-b5a3-df1563595dfe",
      "description": "",
      "parentId": "06240070-0280-4771-8759-3c22da0490cb"
    }
  ],
  "culture": "en-US"
}