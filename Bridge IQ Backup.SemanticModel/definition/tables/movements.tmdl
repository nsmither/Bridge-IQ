table movements
	lineageTag: 4d68b890-a71e-49b5-b4ab-a9a72c28eef7

	column brokerage_status
		dataType: string
		lineageTag: c04d5d89-981a-499e-9e4c-9526b4364e19
		summarizeBy: none
		sourceColumn: brokerage_status

		annotation SummarizationSetBy = Automatic

	column dest_stop_id
		dataType: string
		lineageTag: 51838280-c0c9-41e4-b588-c1f572284b38
		summarizeBy: none
		sourceColumn: dest_stop_id

		annotation SummarizationSetBy = Automatic

	column dispatcher_user_id
		dataType: string
		lineageTag: 2a012ce0-7317-42a0-a02e-a2bacae5a258
		summarizeBy: none
		sourceColumn: dispatcher_user_id

		annotation SummarizationSetBy = Automatic

	column id
		dataType: string
		lineageTag: 6982983d-8e5c-4ef1-81dc-399a58169917
		summarizeBy: none
		sourceColumn: id

		annotation SummarizationSetBy = Automatic

	column invoice_recv_date
		dataType: dateTime
		formatString: Long Date
		lineageTag: 80cdb262-6904-4b05-97ad-3d39f04399c3
		summarizeBy: none
		sourceColumn: invoice_recv_date

		annotation SummarizationSetBy = Automatic

		annotation UnderlyingDateTimeDataType = Date

	column max_buy
		dataType: decimal
		lineageTag: e808aa27-9356-4003-9c04-4010d6d2603c
		summarizeBy: sum
		sourceColumn: max_buy

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column move_distance
		dataType: double
		lineageTag: f3d49253-18e9-4a53-ac52-5ce4a17c2048
		summarizeBy: sum
		sourceColumn: move_distance

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column origin_stop_id
		dataType: string
		lineageTag: b3855a3d-ff5c-4ec3-9b6e-693829c2f15b
		summarizeBy: none
		sourceColumn: origin_stop_id

		annotation SummarizationSetBy = Automatic

	column override_pay_amt
		dataType: decimal
		lineageTag: a43b099e-4dca-4c78-8ca7-f937511c001b
		summarizeBy: sum
		sourceColumn: override_pay_amt

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column override_payee_id
		dataType: string
		lineageTag: 96b618d5-96c2-445b-be68-224136aec231
		summarizeBy: none
		sourceColumn: override_payee_id

		annotation SummarizationSetBy = Automatic

	column override_targetpay
		dataType: decimal
		lineageTag: 4e60199c-c1b0-44cf-8a27-0dff23b32ec3
		summarizeBy: sum
		sourceColumn: override_targetpay

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column override_type
		dataType: string
		lineageTag: ad8b12df-f0ad-4535-b38c-15b8db9d830d
		summarizeBy: none
		sourceColumn: override_type

		annotation SummarizationSetBy = Automatic

	column status
		dataType: string
		lineageTag: 3f103b99-a5b7-48f0-bb60-13a6b75812bd
		summarizeBy: none
		sourceColumn: status

		annotation SummarizationSetBy = Automatic

	column target_pay
		dataType: decimal
		lineageTag: 528d4647-afa8-4918-a35c-f05269eb57a9
		summarizeBy: sum
		sourceColumn: target_pay

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column xfer2settle_date
		dataType: dateTime
		formatString: Long Date
		lineageTag: 3d02172a-c0e9-442d-9766-324cef059eea
		summarizeBy: none
		sourceColumn: xfer2settle_date

		annotation SummarizationSetBy = Automatic

		annotation UnderlyingDateTimeDataType = Date

	column order_id
		dataType: string
		lineageTag: 8c84edc2-64e7-41b7-bfa6-1e333c258c1f
		summarizeBy: none
		sourceColumn: order_id

		annotation SummarizationSetBy = Automatic

	column sequence
		dataType: int64
		formatString: 0
		lineageTag: eb3c47e8-42ed-471b-b37c-3b21657577cf
		summarizeBy: sum
		sourceColumn: sequence

		annotation SummarizationSetBy = Automatic

	column dnc
		dataType: boolean
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: 751a058d-ec39-485f-a40d-f9fcda0b3d14
		summarizeBy: none
		sourceColumn: dnc

		annotation SummarizationSetBy = Automatic

	partition movements = m
		mode: import
		source =
				let
				    Source = Sql.Database("bl-appdb", "lme"),
				    dbo_movement = Source{[Schema="dbo",Item="movement"]}[Data],
				    #"Changed Type" = Table.TransformColumnTypes(dbo_movement,{{"id", type number}}),
				    #"filtered movements >= MovmentCuttOFfNumber" = Table.SelectRows(#"Changed Type", each [id] >= MovementCutOffNumber),
				    #"Changed Type1" = Table.TransformColumnTypes(#"filtered movements >= MovmentCuttOFfNumber",{{"id", type text}}),
				    #"Removed Columns" = Table.RemoveColumns(#"Changed Type1",{"company_id", "authorized", "average_broker_rating", "booking_no", "br_details_link", "br_status_link", "br_track_interval", "br_track_status", "br_tracking_id", "br_vendor", "broker_avail_tract", "brokerage", "carrier_contact", "carrier_email", "carrier_fuel_pay_rate_id", "carrier_lane_rate_id", "carrier_override_user", "carrier_phone", "carrier_rate_id", "chassis", "checkcall_sched_id", "container", "container_returned", "container_status", "controlling_carrier_code", "dedicated_order_id", "est_tolls", "est_tolls_c", "est_tolls_d", "est_tolls_n", "est_tolls_r", "exclude_movement", "fleet_manager", "freight_matching_override", "fuel_distance_um", "fuel_tax_exempt", "hubtran_approved_inv_date", "hubtran_ok2pay_date", "integrated_carrier_search", "is_container", "is_dray", "is_local_mile", "linked_id", "linked_sequence", "loaded", "locked_user_id", "ltl", "ltl_staging_wrs_uid", "macropoint_status", "manifest_empty_distance", "manifest_estimated_arrival", "manifest_estimated_depart", "manifest_id", "manifest_loaded_distance", "manifest_reg_uid", "manifest_spots_capacity", "manifest_spots_consumed", "manifest_weight_capacity", "manifest_weight_consumed", "max_buy_c", "max_buy_d", "max_buy_n", "max_buy_r", "max_pay_method", "max_pay_units", "missed_call_sent", "fuel_distance", "move_distance_um", "movement_type", "must_respond_by", "next_sched_call", "operational_status", "operations_user", "override_crny_type", "override_driver_id", "override_driver_nm", "override_drvr_cell", "override_drvr_email", "override_max_pay", "override_max_pay_c", "override_max_pay_d", "override_max_pay_n", "override_max_pay_r", "override_pay_amt_c", "override_pay_amt_d", "override_pay_amt_n", "override_pay_amt_r", "override_paye_rate", "override_targetpay_c", "override_targetpay_d", "override_targetpay_n", "override_targetpay_r", "override_unit_desc", "override_units", "pay_distance", "pay_distance_um", "placard_required", "priority", "pro_nbr", "rate_alert_basis", "rate_alert_date", "rate_alert_days", "rate_alert_hours", "rate_alert_minutes", "rate_confirm_template", "rate_confirmation_sent_date", "rate_confirmation_status", "rate_expiration_basis", "rate_expiration_date", "rate_expiration_days", "rate_expiration_hours", "rate_expiration_minutes", "rdy_pickup_date", "recurring_movement_id", "reminder_sent", "required_vendor", "reserved", "return_date", "seg_alloc_code", "ss_location_id", "target_extra_stop_pay", "target_extra_stop_pay_c", "target_extra_stop_pay_d", "target_extra_stop_pay_n", "target_extra_stop_pay_r", "target_fuel_surcharge_pay", "target_pay_c", "target_pay_d", "target_pay_n", "target_pay_r", "target_pay_method", "target_pay_units", "target_rate_id", "time_to_send_msg", "tracking_request_status", "trailer_rent_pct", "trip_lease", "trip_mgt_recalc_datetime", "trip_mgt_tracking_id", "triumphpay_exclude", "trp_uid", "unlock_time", "waterfall_flood_time", "waterfall_in_progress", "xferred2fueltax", "xferred2fueltaxdt", "xmit_accepted", "xmitted2driver", "zmit_trip", "require_tracking", "ts_borrowing_company", "ts_commodity", "ts_movement_id", "tracking_duration_ext", "tracking_notify_email", "shpmt_ident_type", "shpmt_ident_value", "override_driver2_nm", "ic_company_to", "load_booking_source", "override_drvr2_email", "track_start_date", "br_track_vehicle_id", "br_track_status_desc", "pending_carrier_type", "shipper_email", "carrier_override_carrier", "pending_carrier_name", "override_driver2_id", "carrier_empty_from_city_id", "shipper_notify_frequency", "pending_carrier_nbr", "ic_order_to", "digital_booking", "is_intercompany", "override_drvr2_cell", "carrier_tractor", "carrier_trailer", "equipment_group_id", "empty2next_order", "eform_rate_confirmation", "override_pay_rate", "preassign_sequence", "carrier_trailer_type", "pending_payee_id"}),
				    #"Filtered Rows" = Table.SelectRows(#"Removed Columns", each ([status] <> "V")),
				   //start replacing teams with parade
				    #"Replaced Value" = Table.ReplaceValue(#"Filtered Rows","team17","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
				    #"Replaced Value1" = Table.ReplaceValue(#"Replaced Value","team16","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
				    #"Replaced Value2" = Table.ReplaceValue(#"Replaced Value1","team15","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
				    #"Replaced Value3" = Table.ReplaceValue(#"Replaced Value2","team14","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
				    #"Replaced Value4" = Table.ReplaceValue(#"Replaced Value3","team13","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
				    #"Replaced Value5" = Table.ReplaceValue(#"Replaced Value4","team12","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
				    #"Replaced Value6" = Table.ReplaceValue(#"Replaced Value5","team10","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
				    #"Replaced Value7" = Table.ReplaceValue(#"Replaced Value6","team9","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
				    #"Replaced Value8" = Table.ReplaceValue(#"Replaced Value7","team8","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
				    #"Replaced Value9" = Table.ReplaceValue(#"Replaced Value8","team7","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
				    #"Replaced Value10" = Table.ReplaceValue(#"Replaced Value9","team6","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
				    #"Replaced Value11" = Table.ReplaceValue(#"Replaced Value10","team5","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
				    #"Replaced Value12" = Table.ReplaceValue(#"Replaced Value11","team4","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
				    #"Replaced Value13" = Table.ReplaceValue(#"Replaced Value12","team3","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
				    #"Replaced Value14" = Table.ReplaceValue(#"Replaced Value13","team2","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
				    #"Replaced Value15" = Table.ReplaceValue(#"Replaced Value14","team1","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
				    #"Replaced Value16" = Table.ReplaceValue(#"Replaced Value15","cdispatch","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
				    //end replace teams with parade
				    #"Replaced Value17" = Table.ReplaceValue(#"Replaced Value16","cbt","parade",Replacer.ReplaceText,{"dispatcher_user_id"}),
				    #"Trimmed Text1" = Table.TransformColumns(#"Replaced Value17",{{"dispatcher_user_id", Text.Trim, type text}}),
				    #"Uppercased Text" = Table.TransformColumns(#"Trimmed Text1",{{"dispatcher_user_id", Text.Upper, type text}}),
				    #"Appended Query" = Table.Combine({#"Uppercased Text", mcleod_historic_movement}),
				    #"Trimmed Text" = Table.TransformColumns(#"Appended Query",{{"id", Text.Trim, type text}}),
				    #"Merged Queries" = Table.NestedJoin(#"Trimmed Text", {"id"}, movement_order, {"movement_id"}, "movement_order", JoinKind.LeftOuter),
				    #"Expanded movement_order" = Table.ExpandTableColumn(#"Merged Queries", "movement_order", {"order_id", "sequence"}, {"order_id", "sequence"}),
				    #"Appended Query1" = Table.Combine({#"Expanded movement_order", pcs_movements}),
				    #"Changed Type2" = Table.TransformColumnTypes(#"Appended Query1",{{"invoice_recv_date", type date}, {"xfer2settle_date", type date}, {"target_pay", Currency.Type}, {"override_targetpay", Currency.Type}, {"override_pay_amt", Currency.Type}, {"max_buy", Currency.Type}}),
				    #"Merged Queries1" = Table.NestedJoin(#"Changed Type2", {"id"}, parade_orders, {"movement_id"}, "parade_orders", JoinKind.LeftOuter),
				    #"Expanded parade_orders" = Table.ExpandTableColumn(#"Merged Queries1", "parade_orders", {"id"}, {"parade_orders.id"}),
				    #"Renamed Columns" = Table.RenameColumns(#"Expanded parade_orders",{{"dispatcher_user_id", "dispatcher_user_id_old"}}),
				    #"Added Conditional Column" = Table.AddColumn(#"Renamed Columns", "dispatcher_user_id", each if [parade_orders.id] = null then [dispatcher_user_id_old] else "parade"),
				    #"Removed Columns1" = Table.RemoveColumns(#"Added Conditional Column",{"parade_orders.id", "dispatcher_user_id_old"}),
				    #"Merged Queries2" = Table.NestedJoin(#"Removed Columns1", {"id"}, dnc, {"DNC"}, "dnc", JoinKind.LeftOuter),
				    #"Expanded dnc" = Table.ExpandTableColumn(#"Merged Queries2", "dnc", {"DNC"}, {"dnc.DNC"}),
				    #"Added Conditional Column1" = Table.AddColumn(#"Expanded dnc", "dnc", each if [dnc.DNC] = null then false else true),
				    #"Changed Type3" = Table.TransformColumnTypes(#"Added Conditional Column1",{{"dnc", type logical}}),
				    #"Removed Columns2" = Table.RemoveColumns(#"Changed Type3",{"dnc.DNC"})
				in
				    #"Removed Columns2"

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

